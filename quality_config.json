{
  "global_settings": {
    "enable_quality_validation": false,
    "log_fixes": true,
    "save_fix_report": true
  },
  
  "validation_actions": {
    "auto_fix": {
      "single_line_code": {
        "enabled": true,
        "description": "Add newlines to fix 'class MyScene(Scene): def construct(self): ...' patterns"
      },
      "missing_imports": {
        "enabled": true,
        "default_import": "from manim import *",
        "description": "Add missing manim imports"
      },
      "common_syntax_errors": {
        "enabled": true,
        "fix_missing_colons": true,
        "fix_indentation": true,
        "fix_unclosed_quotes": true,
        "description": "Fix common Python syntax errors"
      },
      "empty_description": {
        "enabled": true,
        "placeholder": "[PLACEHOLDER - Needs description]",
        "description": "Replace empty descriptions with placeholder"
      }
    },
    
    "must_reject": {
      "empty_code": {
        "enabled": true,
        "description": "Reject if code field is empty or just whitespace"
      },
      "corrupted_data": {
        "enabled": true,
        "description": "Reject malformed entries missing required fields"
      },
      "code_below_minimum": {
        "enabled": true,
        "min_length": 30,
        "description": "Reject if code is shorter than minimum viable Manim scene"
      },
      "non_manim_code": {
        "enabled": false,
        "description": "Reject if code doesn't appear to be Manim (disabled for now)"
      }
    },
    
    "allow_through": {
      "short_descriptions": {
        "enabled": true,
        "min_length": 0,
        "description": "Keep samples with short descriptions like 'Draw a circle'"
      },
      "placeholder_descriptions": {
        "enabled": true,
        "patterns": ["[PLACEHOLDER", "TODO", "TBD", "[INSERT"],
        "description": "Keep samples with placeholder descriptions for later fixing"
      },
      "no_animation_methods": {
        "enabled": true,
        "description": "Keep samples even if they don't use play() or add()"
      },
      "simple_examples": {
        "enabled": true,
        "description": "Keep simple one-line animations for curriculum learning"
      },
      "old_manim_style": {
        "enabled": true,
        "description": "Keep samples using older Manim API versions"
      }
    },
    
    "quality_warnings": {
      "log_only": true,
      "categories": {
        "missing_scene_class": "Code might not have proper Scene class structure",
        "no_construct_method": "Scene class missing construct() method",
        "description_code_mismatch": "Description might not match the code",
        "generic_description": "Description is too generic or vague",
        "potential_syntax_issue": "Code might have syntax issues we couldn't auto-fix"
      }
    }
  },
  
  "source_specific_overrides": {
    "thanks_dataset": {
      "auto_fix": {
        "single_line_code": {
          "enabled": true,
          "aggressive_mode": true
        },
        "common_syntax_errors": {
          "enabled": true,
          "fix_all_issues": true
        },
        "empty_description": {
          "enabled": true,
          "placeholder": "[Code-only sample - description generated later]"
        }
      },
      "must_reject": {
        "non_manim_code": {
          "enabled": false
        }
      },
      "notes": "Unified extractor: 47.2% description mismatch rate, 50% duplicates, using code-only approach"
    },
    
    "vivek3141": {
      "allow_through": {
        "old_manim_style": {
          "enabled": true,
          "expected": true
        }
      },
      "notes": "Uses older Manim API, this is expected"
    },
    
    "manim_ce_examples": {
      "validation_actions": {
        "must_reject": {
          "enabled": false
        }
      },
      "notes": "Official examples, assume high quality"
    }
  },
  
  "fix_strategies": {
    "single_line_code": {
      "patterns": [
        {
          "pattern": "class (\\w+)\\(Scene\\): def construct\\(self\\): (.+)",
          "replacement": "class $1(Scene):\n    def construct(self):\n        $2"
        },
        {
          "pattern": "from manim import \\* class",
          "replacement": "from manim import *\n\nclass"
        }
      ]
    },
    "missing_imports": {
      "detection": [
        "uses Scene class",
        "uses Manim objects (Circle, Square, Text, etc.)",
        "no import statements found"
      ],
      "fix": "prepend 'from manim import *\\n\\n' to code"
    }
  }
}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Animate the creation of a 2\u00d72 table with row and column labels and outer borders. The table appears gradually on screen, then remains visible during a brief pause."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CreateTableExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            include_outer_lines=True)\n        self.play(table.create())\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that animate the creation of a 2\u00d72 table with row and column labels and outer borders. The table appears gradually on screen, then remains visible during a brief pause."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CreateTableExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            include_outer_lines=True)\n        self.play(table.create())\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to animate the creation of a 2\u00d72 table with row and column labels and outer borders. The table appears gradually on screen, then remains visible during a brief pause."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CreateTableExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            include_outer_lines=True)\n        self.play(table.create())\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two seven-pointed stars arranged side by side:\n\n1. A red star with a density of 2, creating a more open and less intersecting shape.\n2. A purple star with a density of 3, resulting in a more intricate and tightly woven pattern.\n\nThe difference in density alters how the star points connect, showcasing distinct geometric styles."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DifferentDensitiesExample(Scene):\n    def construct(self):\n        density_2 = Star(7, outer_radius=2, density=2, color=RED)\n        density_3 = Star(7, outer_radius=2, density=3, color=PURPLE)\n\n        self.add(VGroup(density_2, density_3).arrange(RIGHT))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two seven-pointed stars arranged side by side:\n\n1. A red star with a density of 2, creating a more open and less intersecting shape.\n2. A purple star with a density of 3, resulting in a more intricate and tightly woven pattern.\n\nThe difference in density alters how the star points connect, showcasing distinct geometric styles."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DifferentDensitiesExample(Scene):\n    def construct(self):\n        density_2 = Star(7, outer_radius=2, density=2, color=RED)\n        density_3 = Star(7, outer_radius=2, density=3, color=PURPLE)\n\n        self.add(VGroup(density_2, density_3).arrange(RIGHT))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display eight diagrams arranged in a 2\u00d74 grid, each showing two diagonal lines intersecting at various angles. Each diagram highlights a different angle between the lines using a curved arc, with variations in radius, quadrant placement, stroke width, color, and whether the smaller or larger angle is shown. Each diagram is enclosed in a light rectangular frame for clarity."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AngleExample(Scene):\n    def construct(self):\n        line1 = Line( LEFT + (1/3) * UP, RIGHT + (1/3) * DOWN )\n        line2 = Line( DOWN + (1/3) * RIGHT, UP + (1/3) * LEFT )\n        angles = [\n            Angle(line1, line2),\n            Angle(line1, line2, radius=0.4, quadrant=(1,-1), other_angle=True),\n            Angle(line1, line2, radius=0.5, quadrant=(-1,1), stroke_width=8, other_angle=True),\n            Angle(line1, line2, radius=0.7, quadrant=(-1,-1), color=RED),\n            Angle(line1, line2, other_angle=True),\n            Angle(line1, line2, radius=0.4, quadrant=(1,-1)),\n            Angle(line1, line2, radius=0.5, quadrant=(-1,1), stroke_width=8),\n            Angle(line1, line2, radius=0.7, quadrant=(-1,-1), color=RED, other_angle=True),\n        ]\n        plots = VGroup()\n        for angle in angles:\n            plot=VGroup(line1.copy(),line2.copy(), angle)\n            plots.add(VGroup(plot,SurroundingRectangle(plot, buff=0.3)))\n        plots.arrange_in_grid(rows=2,buff=1)\n        self.add(plots)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display eight diagrams arranged in a 2\u00d74 grid, each showing two diagonal lines intersecting at various angles. Each diagram highlights a different angle between the lines using a curved arc, with variations in radius, quadrant placement, stroke width, color, and whether the smaller or larger angle is shown. Each diagram is enclosed in a light rectangular frame for clarity."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AngleExample(Scene):\n    def construct(self):\n        line1 = Line( LEFT + (1/3) * UP, RIGHT + (1/3) * DOWN )\n        line2 = Line( DOWN + (1/3) * RIGHT, UP + (1/3) * LEFT )\n        angles = [\n            Angle(line1, line2),\n            Angle(line1, line2, radius=0.4, quadrant=(1,-1), other_angle=True),\n            Angle(line1, line2, radius=0.5, quadrant=(-1,1), stroke_width=8, other_angle=True),\n            Angle(line1, line2, radius=0.7, quadrant=(-1,-1), color=RED),\n            Angle(line1, line2, other_angle=True),\n            Angle(line1, line2, radius=0.4, quadrant=(1,-1)),\n            Angle(line1, line2, radius=0.5, quadrant=(-1,1), stroke_width=8),\n            Angle(line1, line2, radius=0.7, quadrant=(-1,-1), color=RED, other_angle=True),\n        ]\n        plots = VGroup()\n        for angle in angles:\n            plot=VGroup(line1.copy(),line2.copy(), angle)\n            plots.add(VGroup(plot,SurroundingRectangle(plot, buff=0.3)))\n        plots.arrange_in_grid(rows=2,buff=1)\n        self.add(plots)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a coordinate system with labeled axes and grid lines. A green dot is placed at the point (2, 2) relative to the axes, with dashed guide lines extending from the axes to the dot. A red dot is also placed at the same (2, 2) location, but relative to the scene's default coordinate system. This illustrates the difference between placing objects using axis-based coordinates versus scene-based coordinates."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CoordsToPointExample(Scene):\n    def construct(self):\n        ax = Axes().add_coordinates()\n\n        # a dot with respect to the axes\n        dot_axes = Dot(ax.coords_to_point(2, 2), color=GREEN)\n        lines = ax.get_lines_to_point(ax.c2p(2,2))\n\n        # a dot with respect to the scene\n        # the default plane corresponds to the coordinates of the scene.\n        plane = NumberPlane()\n        dot_scene = Dot((2,2,0), color=RED)\n\n        self.add(plane, dot_scene, ax, dot_axes, lines)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a coordinate system with labeled axes and grid lines. A green dot is placed at the point (2, 2) relative to the axes, with dashed guide lines extending from the axes to the dot. A red dot is also placed at the same (2, 2) location, but relative to the scene's default coordinate system. This illustrates the difference between placing objects using axis-based coordinates versus scene-based coordinates."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CoordsToPointExample(Scene):\n    def construct(self):\n        ax = Axes().add_coordinates()\n\n        # a dot with respect to the axes\n        dot_axes = Dot(ax.coords_to_point(2, 2), color=GREEN)\n        lines = ax.get_lines_to_point(ax.c2p(2,2))\n\n        # a dot with respect to the scene\n        # the default plane corresponds to the coordinates of the scene.\n        plane = NumberPlane()\n        dot_scene = Dot((2,2,0), color=RED)\n\n        self.add(plane, dot_scene, ax, dot_axes, lines)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a semi-transparent orange square. Over three seconds, transform it into a semi-transparent blue circle. Then, create a small dot that stays just below the circle as it moves. Animate the circle shifting to the right, with the dot following it. Finally, fade out both the circle and the dot."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ToyExample(Scene):\n    def construct(self):\n        orange_square = Square(color=ORANGE, fill_opacity=0.5)\n        blue_circle = Circle(color=BLUE, fill_opacity=0.5)\n        self.add(orange_square)\n        self.play(ReplacementTransform(orange_square, blue_circle, run_time=3))\n        small_dot = Dot()\n        small_dot.add_updater(lambda mob: mob.next_to(blue_circle, DOWN))\n        self.play(Create(small_dot))\n        self.play(blue_circle.animate.shift(RIGHT))\n        self.wait()\n        self.play(FadeOut(blue_circle, small_dot))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a semi-transparent orange square. Over three seconds, transform it into a semi-transparent blue circle. Then, create a small dot that stays just below the circle as it moves. Animate the circle shifting to the right, with the dot following it. Finally, fade out both the circle and the dot."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ToyExample(Scene):\n    def construct(self):\n        orange_square = Square(color=ORANGE, fill_opacity=0.5)\n        blue_circle = Circle(color=BLUE, fill_opacity=0.5)\n        self.add(orange_square)\n        self.play(ReplacementTransform(orange_square, blue_circle, run_time=3))\n        small_dot = Dot()\n        small_dot.add_updater(lambda mob: mob.next_to(blue_circle, DOWN))\n        self.play(Create(small_dot))\n        self.play(blue_circle.animate.shift(RIGHT))\n        self.wait()\n        self.play(FadeOut(blue_circle, small_dot))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a graph with six labeled nodes arranged using the spectral layout, which positions nodes based on the eigenvectors of the graph's Laplacian matrix. The nodes are connected in a loop with additional cross-links between non-adjacent nodes, forming a dense and structured network. The layout emphasizes the graph's underlying connectivity patterns through a linear or curved arrangement."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpectralLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"spectral\",\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a graph with six labeled nodes arranged using the spectral layout, which positions nodes based on the eigenvectors of the graph's Laplacian matrix. The nodes are connected in a loop with additional cross-links between non-adjacent nodes, forming a dense and structured network. The layout emphasizes the graph's underlying connectivity patterns through a linear or curved arrangement."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpectralLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"spectral\",\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a coordinate grid using a number plane. Then, draw a green vectorized shape (VMobject) composed of two connected B\u00e9zier curves defined by eight control points. Add red dots at the control points that act as curve handles, and draw red lines connecting the start and end points of each curve segment to their respective control points, visually illustrating how the curves are shaped."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass VMobjectDemo(Scene):\n    def construct(self):\n        plane = NumberPlane()\n        my_vmobject = VMobject(color=GREEN)\n        my_vmobject.points = [\n            np.array([-2, -1, 0]),  # start of first curve\n            np.array([-3, 1, 0]),\n            np.array([0, 3, 0]),\n            np.array([1, 3, 0]),  # end of first curve\n            np.array([1, 3, 0]),  # start of second curve\n            np.array([0, 1, 0]),\n            np.array([4, 3, 0]),\n            np.array([4, -2, 0]),  # end of second curve\n        ]\n        handles = [\n            Dot(point, color=RED) for point in\n            [[-3, 1, 0], [0, 3, 0], [0, 1, 0], [4, 3, 0]]\n        ]\n        handle_lines = [\n            Line(\n                my_vmobject.points[ind],\n                my_vmobject.points[ind+1],\n                color=RED,\n                stroke_width=2\n            ) for ind in range(0, len(my_vmobject.points), 2)\n        ]\n        self.add(plane, *handles, *handle_lines, my_vmobject)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a coordinate grid using a number plane. Then, draw a green vectorized shape (VMobject) composed of two connected B\u00e9zier curves defined by eight control points. Add red dots at the control points that act as curve handles, and draw red lines connecting the start and end points of each curve segment to their respective control points, visually illustrating how the curves are shaped."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass VMobjectDemo(Scene):\n    def construct(self):\n        plane = NumberPlane()\n        my_vmobject = VMobject(color=GREEN)\n        my_vmobject.points = [\n            np.array([-2, -1, 0]),  # start of first curve\n            np.array([-3, 1, 0]),\n            np.array([0, 3, 0]),\n            np.array([1, 3, 0]),  # end of first curve\n            np.array([1, 3, 0]),  # start of second curve\n            np.array([0, 1, 0]),\n            np.array([4, 3, 0]),\n            np.array([4, -2, 0]),  # end of second curve\n        ]\n        handles = [\n            Dot(point, color=RED) for point in\n            [[-3, 1, 0], [0, 3, 0], [0, 1, 0], [4, 3, 0]]\n        ]\n        handle_lines = [\n            Line(\n                my_vmobject.points[ind],\n                my_vmobject.points[ind+1],\n                color=RED,\n                stroke_width=2\n            ) for ind in range(0, len(my_vmobject.points), 2)\n        ]\n        self.add(plane, *handles, *handle_lines, my_vmobject)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a coordinate grid using a number plane. Then, draw a green vectorized shape (VMobject) composed of two connected B\u00e9zier curves defined by eight control points. Add red dots at the control points that act as curve handles, and draw red lines connecting the start and end points of each curve segment to their respective control points, visually illustrating how the curves are shaped."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass VMobjectDemo(Scene):\n    def construct(self):\n        plane = NumberPlane()\n        my_vmobject = VMobject(color=GREEN)\n        my_vmobject.points = [\n            np.array([-2, -1, 0]),  # start of first curve\n            np.array([-3, 1, 0]),\n            np.array([0, 3, 0]),\n            np.array([1, 3, 0]),  # end of first curve\n            np.array([1, 3, 0]),  # start of second curve\n            np.array([0, 1, 0]),\n            np.array([4, 3, 0]),\n            np.array([4, -2, 0]),  # end of second curve\n        ]\n        handles = [\n            Dot(point, color=RED) for point in\n            [[-3, 1, 0], [0, 3, 0], [0, 1, 0], [4, 3, 0]]\n        ]\n        handle_lines = [\n            Line(\n                my_vmobject.points[ind],\n                my_vmobject.points[ind+1],\n                color=RED,\n                stroke_width=2\n            ) for ind in range(0, len(my_vmobject.points), 2)\n        ]\n        self.add(plane, *handles, *handle_lines, my_vmobject)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a directed graph with five labeled nodes arranged in a circular layout. Arrows connect the nodes according to specified edges, with all edges styled using thin lines and square arrow tips. One specific edge, from node 3 to node 4, is highlighted in red and features a larger, more prominent arrow tip. The entire graph scales up slightly as it is drawn onto the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CustomDiGraph(Scene):\n    def construct(self):\n        vertices = [i for i in range(5)]\n        edges = [\n            (0, 1),\n            (1, 2),\n            (3, 2),\n            (3, 4),\n        ]\n\n        edge_config = {\n            \"stroke_width\": 2,\n            \"tip_config\": {\n                \"tip_shape\": ArrowSquareTip,\n                \"tip_length\": 0.15,\n            },\n            (3, 4): {\n                \"color\": RED,\n                \"tip_config\": {\"tip_length\": 0.25, \"tip_width\": 0.25}\n            },\n        }\n\n        g = DiGraph(\n            vertices,\n            edges,\n            labels=True,\n            layout=\"circular\",\n            edge_config=edge_config,\n        ).scale(1.4)\n\n        self.play(Create(g))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a directed graph with five labeled nodes arranged in a circular layout. Arrows connect the nodes according to specified edges, with all edges styled using thin lines and square arrow tips. One specific edge, from node 3 to node 4, is highlighted in red and features a larger, more prominent arrow tip. The entire graph scales up slightly as it is drawn onto the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CustomDiGraph(Scene):\n    def construct(self):\n        vertices = [i for i in range(5)]\n        edges = [\n            (0, 1),\n            (1, 2),\n            (3, 2),\n            (3, 4),\n        ]\n\n        edge_config = {\n            \"stroke_width\": 2,\n            \"tip_config\": {\n                \"tip_shape\": ArrowSquareTip,\n                \"tip_length\": 0.15,\n            },\n            (3, 4): {\n                \"color\": RED,\n                \"tip_config\": {\"tip_length\": 0.25, \"tip_width\": 0.25}\n            },\n        }\n\n        g = DiGraph(\n            vertices,\n            edges,\n            labels=True,\n            layout=\"circular\",\n            edge_config=edge_config,\n        ).scale(1.4)\n\n        self.play(Create(g))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a bar chart with five labeled bars:  \n- Bars represent the values -5, 40, -10, 20, and -3, labeled respectively as \"one\", \"two\", \"three\", \"four\", and \"five\".  \n- The chart spans a y-axis range from -20 to 50 with tick marks every 10 units.  \n- The x-axis is 10 units long with large font labels, and the y-axis is 6 units tall.  \n- Each bar has a corresponding numerical label displayed above or below it.  \nThe chart and labels appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BarChartExample(Scene):\n    def construct(self):\n        chart = BarChart(\n            values=[-5, 40, -10, 20, -3],\n            bar_names=[\"one\", \"two\", \"three\", \"four\", \"five\"],\n            y_range=[-20, 50, 10],\n            y_length=6,\n            x_length=10,\n            x_axis_config={\"font_size\": 36},\n        )\n\n        c_bar_lbls = chart.get_bar_labels(font_size=48)\n\n        self.add(chart, c_bar_lbls)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a bar chart with five labeled bars:  \n- Bars represent the values -5, 40, -10, 20, and -3, labeled respectively as \"one\", \"two\", \"three\", \"four\", and \"five\".  \n- The chart spans a y-axis range from -20 to 50 with tick marks every 10 units.  \n- The x-axis is 10 units long with large font labels, and the y-axis is 6 units tall.  \n- Each bar has a corresponding numerical label displayed above or below it.  \nThe chart and labels appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BarChartExample(Scene):\n    def construct(self):\n        chart = BarChart(\n            values=[-5, 40, -10, 20, -3],\n            bar_names=[\"one\", \"two\", \"three\", \"four\", \"five\"],\n            y_range=[-20, 50, 10],\n            y_length=6,\n            x_length=10,\n            x_axis_config={\"font_size\": 36},\n        )\n\n        c_bar_lbls = chart.get_bar_labels(font_size=48)\n\n        self.add(chart, c_bar_lbls)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a bar chart with five labeled bars:  \n- Bars represent the values -5, 40, -10, 20, and -3, labeled respectively as \"one\", \"two\", \"three\", \"four\", and \"five\".  \n- The chart spans a y-axis range from -20 to 50 with tick marks every 10 units.  \n- The x-axis is 10 units long with large font labels, and the y-axis is 6 units tall.  \n- Each bar has a corresponding numerical label displayed above or below it.  \nThe chart and labels appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BarChartExample(Scene):\n    def construct(self):\n        chart = BarChart(\n            values=[-5, 40, -10, 20, -3],\n            bar_names=[\"one\", \"two\", \"three\", \"four\", \"five\"],\n            y_range=[-20, 50, 10],\n            y_length=6,\n            x_length=10,\n            x_axis_config={\"font_size\": 36},\n        )\n\n        c_bar_lbls = chart.get_bar_labels(font_size=48)\n\n        self.add(chart, c_bar_lbls)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display four variations of a 2\u00d72 table arranged in a grid:\n\n1. The first table contains plain text entries, with the second row's second cell showing a line break.\n2. The second table adds row and column labels and highlights the bottom-right cell in yellow.\n3. The third table includes the same labels, a star icon in the top-left corner, outer borders, right-aligned text, and a red-colored bottom-right cell.\n4. The fourth table is similar to the third but uses thinner yellow lines and removes all vertical lines.\n\nAll tables are scaled down and spaced evenly in a 2\u00d72 grid layout."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TableExamples(Scene):\n    def construct(self):\n        t0 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table in \\\\n Manim.\"]])\n        t1 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        t1.add_highlighted_cell((2,2), color=YELLOW)\n        t2 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            top_left_entry=Star().scale(0.3),\n            include_outer_lines=True,\n            arrange_in_grid_config={\"cell_alignment\": RIGHT})\n        t2.add(t2.get_cell((2,2), color=RED))\n        t3 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            top_left_entry=Star().scale(0.3),\n            include_outer_lines=True,\n            line_config={\"stroke_width\": 1, \"color\": YELLOW})\n        t3.remove(*t3.get_vertical_lines())\n        g = Group(\n            t0,t1,t2,t3\n        ).scale(0.7).arrange_in_grid(buff=1)\n        self.add(g)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display four variations of a 2\u00d72 table arranged in a grid:\n\n1. The first table contains plain text entries, with the second row's second cell showing a line break.\n2. The second table adds row and column labels and highlights the bottom-right cell in yellow.\n3. The third table includes the same labels, a star icon in the top-left corner, outer borders, right-aligned text, and a red-colored bottom-right cell.\n4. The fourth table is similar to the third but uses thinner yellow lines and removes all vertical lines.\n\nAll tables are scaled down and spaced evenly in a 2\u00d72 grid layout."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TableExamples(Scene):\n    def construct(self):\n        t0 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table in \\\\n Manim.\"]])\n        t1 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        t1.add_highlighted_cell((2,2), color=YELLOW)\n        t2 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            top_left_entry=Star().scale(0.3),\n            include_outer_lines=True,\n            arrange_in_grid_config={\"cell_alignment\": RIGHT})\n        t2.add(t2.get_cell((2,2), color=RED))\n        t3 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            top_left_entry=Star().scale(0.3),\n            include_outer_lines=True,\n            line_config={\"stroke_width\": 1, \"color\": YELLOW})\n        t3.remove(*t3.get_vertical_lines())\n        g = Group(\n            t0,t1,t2,t3\n        ).scale(0.7).arrange_in_grid(buff=1)\n        self.add(g)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a six-pointed star (hexagram) formed by two overlapping triangles\u2014one pointing upward and the other downward. A dot appears and smoothly moves along the outline of the star, tracing its shape over time before disappearing."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nimport numpy as np\n\nclass PolygramExample(Scene):\n    def construct(self):\n        hexagram = Polygram(\n            [[0, 2, 0], [-np.sqrt(3), -1, 0], [np.sqrt(3), -1, 0]],\n            [[-np.sqrt(3), 1, 0], [0, -2, 0], [np.sqrt(3), 1, 0]],\n        )\n        self.add(hexagram)\n\n        dot = Dot()\n        self.play(MoveAlongPath(dot, hexagram), run_time=5, rate_func=linear)\n        self.remove(dot)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a six-pointed star (hexagram) formed by two overlapping triangles\u2014one pointing upward and the other downward. A dot appears and smoothly moves along the outline of the star, tracing its shape over time before disappearing."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nimport numpy as np\n\nclass PolygramExample(Scene):\n    def construct(self):\n        hexagram = Polygram(\n            [[0, 2, 0], [-np.sqrt(3), -1, 0], [np.sqrt(3), -1, 0]],\n            [[-np.sqrt(3), 1, 0], [0, -2, 0], [np.sqrt(3), 1, 0]],\n        )\n        self.add(hexagram)\n\n        dot = Dot()\n        self.play(MoveAlongPath(dot, hexagram), run_time=5, rate_func=linear)\n        self.remove(dot)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two five-sided polygons (pentagons) being drawn simultaneously: one on the left rotating counterclockwise and one on the right rotating clockwise. The reversed direction of the right polygon creates a mirrored drawing effect during the animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ChangeOfDirection(Scene):\n    def construct(self):\n        ccw = RegularPolygon(5)\n        ccw.shift(LEFT)\n        cw = RegularPolygon(5)\n        cw.shift(RIGHT).reverse_direction()\n\n        self.play(Create(ccw), Create(cw),\n        run_time=4)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two five-sided polygons (pentagons) being drawn simultaneously: one on the left rotating counterclockwise and one on the right rotating clockwise. The reversed direction of the right polygon creates a mirrored drawing effect during the animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ChangeOfDirection(Scene):\n    def construct(self):\n        ccw = RegularPolygon(5)\n        ccw.shift(LEFT)\n        cw = RegularPolygon(5)\n        cw.shift(RIGHT).reverse_direction()\n\n        self.play(Create(ccw), Create(cw),\n        run_time=4)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display two five-sided polygons (pentagons) being drawn simultaneously: one on the left rotating counterclockwise and one on the right rotating clockwise. The reversed direction of the right polygon creates a mirrored drawing effect during the animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ChangeOfDirection(Scene):\n    def construct(self):\n        ccw = RegularPolygon(5)\n        ccw.shift(LEFT)\n        cw = RegularPolygon(5)\n        cw.shift(RIGHT).reverse_direction()\n\n        self.play(Create(ccw), Create(cw),\n        run_time=4)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D coordinate system with labeled axes. The z-axis is labeled with the text \u201c\\( z \\)-label\u201d using LaTeX formatting. The camera is set at an angled perspective to clearly show the 3D structure and the position of the z-axis label in space."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetZAxisLabelExample(ThreeDScene):\n    def construct(self):\n        ax = ThreeDAxes()\n        lab = ax.get_z_axis_label(Tex(\"$z$-label\"))\n        self.set_camera_orientation(phi=2*PI/5, theta=PI/5)\n        self.add(ax, lab)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D coordinate system with labeled axes. The z-axis is labeled with the text \u201c\\( z \\)-label\u201d using LaTeX formatting. The camera is set at an angled perspective to clearly show the 3D structure and the position of the z-axis label in space."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetZAxisLabelExample(ThreeDScene):\n    def construct(self):\n        ax = ThreeDAxes()\n        lab = ax.get_z_axis_label(Tex(\"$z$-label\"))\n        self.set_camera_orientation(phi=2*PI/5, theta=PI/5)\n        self.add(ax, lab)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 3D coordinate system with labeled axes. The z-axis is labeled with the text \u201c\\( z \\)-label\u201d using LaTeX formatting. The camera is set at an angled perspective to clearly show the 3D structure and the position of the z-axis label in space."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetZAxisLabelExample(ThreeDScene):\n    def construct(self):\n        ax = ThreeDAxes()\n        lab = ax.get_z_axis_label(Tex(\"$z$-label\"))\n        self.set_camera_orientation(phi=2*PI/5, theta=PI/5)\n        self.add(ax, lab)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two side-by-side coordinate grids, each showing the graph of the function \\( f(x) = \\frac{x^2 - 2}{x^2 - 4} \\):  \n- On the left, a red curve is plotted without accounting for discontinuities, resulting in visual artifacts at \\(x = \\pm2\\).  \n- On the right, a green curve correctly omits the discontinuous points at \\(x = -2\\) and \\(x = 2\\), producing a more accurate representation.  \nBoth graphs appear simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DiscontinuousExample(Scene):\n    def construct(self):\n        ax1 = NumberPlane((-3, 3), (-4, 4))\n        ax2 = NumberPlane((-3, 3), (-4, 4))\n        VGroup(ax1, ax2).arrange()\n        discontinuous_function = lambda x: (x ** 2 - 2) / (x ** 2 - 4)\n        incorrect = ax1.plot(discontinuous_function, color=RED)\n        correct = ax2.plot(\n            discontinuous_function,\n            discontinuities=[-2, 2],  # discontinuous points\n            dt=0.1,  # left and right tolerance of discontinuity\n            color=GREEN,\n        )\n        self.add(ax1, ax2, incorrect, correct)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two side-by-side coordinate grids, each showing the graph of the function \\( f(x) = \\frac{x^2 - 2}{x^2 - 4} \\):  \n- On the left, a red curve is plotted without accounting for discontinuities, resulting in visual artifacts at \\(x = \\pm2\\).  \n- On the right, a green curve correctly omits the discontinuous points at \\(x = -2\\) and \\(x = 2\\), producing a more accurate representation.  \nBoth graphs appear simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DiscontinuousExample(Scene):\n    def construct(self):\n        ax1 = NumberPlane((-3, 3), (-4, 4))\n        ax2 = NumberPlane((-3, 3), (-4, 4))\n        VGroup(ax1, ax2).arrange()\n        discontinuous_function = lambda x: (x ** 2 - 2) / (x ** 2 - 4)\n        incorrect = ax1.plot(discontinuous_function, color=RED)\n        correct = ax2.plot(\n            discontinuous_function,\n            discontinuities=[-2, 2],  # discontinuous points\n            dt=0.1,  # left and right tolerance of discontinuity\n            color=GREEN,\n        )\n        self.add(ax1, ax2, incorrect, correct)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a red 3D helical spring-like curve winding upward along the z-axis, defined by the parametric equations \\((1.2 \\cos(u), 1.2 \\sin(u), 0.05u)\\) for \\(u\\) ranging from \\(-3\\tau\\) to \\(5\\tau\\), overlaid on a 3D coordinate axis. The camera is set to an angled perspective, and the scene appears without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ThreeDParametricSpring(ThreeDScene):\n    def construct(self):\n        curve1 = ParametricFunction(\n            lambda u: (\n                1.2 * np.cos(u),\n                1.2 * np.sin(u),\n                u * 0.05\n            ), color=RED, t_range = (-3*TAU, 5*TAU, 0.01)\n        ).set_shade_in_3d(True)\n        axes = ThreeDAxes()\n        self.add(axes, curve1)\n        self.set_camera_orientation(phi=80 * DEGREES, theta=-60 * DEGREES)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a red 3D helical spring-like curve winding upward along the z-axis, defined by the parametric equations \\((1.2 \\cos(u), 1.2 \\sin(u), 0.05u)\\) for \\(u\\) ranging from \\(-3\\tau\\) to \\(5\\tau\\), overlaid on a 3D coordinate axis. The camera is set to an angled perspective, and the scene appears without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ThreeDParametricSpring(ThreeDScene):\n    def construct(self):\n        curve1 = ParametricFunction(\n            lambda u: (\n                1.2 * np.cos(u),\n                1.2 * np.sin(u),\n                u * 0.05\n            ), color=RED, t_range = (-3*TAU, 5*TAU, 0.01)\n        ).set_shade_in_3d(True)\n        axes = ThreeDAxes()\n        self.add(axes, curve1)\n        self.set_camera_orientation(phi=80 * DEGREES, theta=-60 * DEGREES)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a red 3D helical spring-like curve winding upward along the z-axis, defined by the parametric equations \\((1.2 \\cos(u), 1.2 \\sin(u), 0.05u)\\) for \\(u\\) ranging from \\(-3\\tau\\) to \\(5\\tau\\), overlaid on a 3D coordinate axis. The camera is set to an angled perspective, and the scene appears without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ThreeDParametricSpring(ThreeDScene):\n    def construct(self):\n        curve1 = ParametricFunction(\n            lambda u: (\n                1.2 * np.cos(u),\n                1.2 * np.sin(u),\n                u * 0.05\n            ), color=RED, t_range = (-3*TAU, 5*TAU, 0.01)\n        ).set_shade_in_3d(True)\n        axes = ThreeDAxes()\n        self.add(axes, curve1)\n        self.set_camera_orientation(phi=80 * DEGREES, theta=-60 * DEGREES)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of axes. Plot the graph of the function \\( f(x) = \\frac{k}{x} \\) in yellow. Show a blue rectangle with yellow edges that dynamically updates its size based on the value of \\( t \\). Display a dot that moves along the graph, updating its position as \\( t \\) changes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PolygonOnAxes(Scene):\n    def get_rectangle_corners(self, bottom_left, top_right):\n        return [\n            (top_right[0], top_right[1]),\n            (bottom_left[0], top_right[1]),\n            (bottom_left[0], bottom_left[1]),\n            (top_right[0], bottom_left[1]),\n        ]\n\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 10],\n            y_range=[0, 10],\n            x_length=6,\n            y_length=6,\n            axis_config={\"include_tip\": False},\n        )\n\n        t = ValueTracker(5)\n        k = 25\n\n        graph = ax.plot(\n            lambda x: k / x,\n            color=YELLOW_D,\n            x_range=[k / 10, 10.0, 0.01],\n            use_smoothing=False,\n        )\n\n        def get_rectangle():\n            polygon = Polygon(\n                *[\n                    ax.c2p(*i)\n                    for i in self.get_rectangle_corners(\n                        (0, 0), (t.get_value(), k / t.get_value())\n                    )\n                ]\n            )\n            polygon.stroke_width = 1\n            polygon.set_fill(BLUE, opacity=0.5)\n            polygon.set_stroke(YELLOW_B)\n            return polygon\n\n        polygon = always_redraw(get_rectangle)\n\n        dot = Dot()\n        dot.add_updater(lambda x: x.move_to(ax.c2p(t.get_value(), k / t.get_value())))\n        dot.set_z_index(10)\n\n        self.add(ax, graph, dot)\n        self.play(Create(polygon))\n        self.play(t.animate.set_value(10))\n        self.play(t.animate.set_value(k / 10))\n        self.play(t.animate.set_value(5))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of axes. Plot the graph of the function \\( f(x) = \\frac{k}{x} \\) in yellow. Show a blue rectangle with yellow edges that dynamically updates its size based on the value of \\( t \\). Display a dot that moves along the graph, updating its position as \\( t \\) changes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PolygonOnAxes(Scene):\n    def get_rectangle_corners(self, bottom_left, top_right):\n        return [\n            (top_right[0], top_right[1]),\n            (bottom_left[0], top_right[1]),\n            (bottom_left[0], bottom_left[1]),\n            (top_right[0], bottom_left[1]),\n        ]\n\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 10],\n            y_range=[0, 10],\n            x_length=6,\n            y_length=6,\n            axis_config={\"include_tip\": False},\n        )\n\n        t = ValueTracker(5)\n        k = 25\n\n        graph = ax.plot(\n            lambda x: k / x,\n            color=YELLOW_D,\n            x_range=[k / 10, 10.0, 0.01],\n            use_smoothing=False,\n        )\n\n        def get_rectangle():\n            polygon = Polygon(\n                *[\n                    ax.c2p(*i)\n                    for i in self.get_rectangle_corners(\n                        (0, 0), (t.get_value(), k / t.get_value())\n                    )\n                ]\n            )\n            polygon.stroke_width = 1\n            polygon.set_fill(BLUE, opacity=0.5)\n            polygon.set_stroke(YELLOW_B)\n            return polygon\n\n        polygon = always_redraw(get_rectangle)\n\n        dot = Dot()\n        dot.add_updater(lambda x: x.move_to(ax.c2p(t.get_value(), k / t.get_value())))\n        dot.set_z_index(10)\n\n        self.add(ax, graph, dot)\n        self.play(Create(polygon))\n        self.play(t.animate.set_value(10))\n        self.play(t.animate.set_value(k / 10))\n        self.play(t.animate.set_value(5))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display four lines of styled text arranged vertically:\n\n1. The first line reads \"all in sans except this\" where the entire line uses a sans-serif font except for \"except this\", which is in a serif font.\n2. The second line shows \"mixing fonts is ugly\" with \"mixing\" in a serif font, \"fonts\" in a sans-serif font, and \"is ugly\" in a monospaced font.\n3. The third line displays \"special char > or >\" demonstrating that both the literal \">\" and the HTML entity `&gt;` render as the same character.\n4. The fourth line shows \"special char < and &\" using the HTML entities `&lt;` and `&amp;` to render \"<\" and \"&\" respectively.\n\nAll lines are centered and stacked vertically on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FontExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\n            'all in sans <span font_family=\"serif\">except this</span>', font=\"sans\"\n        )\n        text2 = MarkupText(\n            '<span font_family=\"serif\">mixing</span> <span font_family=\"sans\">fonts</span> <span font_family=\"monospace\">is ugly</span>'\n        )\n        text3 = MarkupText(\"special char > or &gt;\")\n        text4 = MarkupText(\"special char &lt; and &amp;\")\n        group = VGroup(text1, text2, text3, text4).arrange(DOWN)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display four lines of styled text arranged vertically:\n\n1. The first line reads \"all in sans except this\" where the entire line uses a sans-serif font except for \"except this\", which is in a serif font.\n2. The second line shows \"mixing fonts is ugly\" with \"mixing\" in a serif font, \"fonts\" in a sans-serif font, and \"is ugly\" in a monospaced font.\n3. The third line displays \"special char > or >\" demonstrating that both the literal \">\" and the HTML entity `&gt;` render as the same character.\n4. The fourth line shows \"special char < and &\" using the HTML entities `&lt;` and `&amp;` to render \"<\" and \"&\" respectively.\n\nAll lines are centered and stacked vertically on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FontExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\n            'all in sans <span font_family=\"serif\">except this</span>', font=\"sans\"\n        )\n        text2 = MarkupText(\n            '<span font_family=\"serif\">mixing</span> <span font_family=\"sans\">fonts</span> <span font_family=\"monospace\">is ugly</span>'\n        )\n        text3 = MarkupText(\"special char > or &gt;\")\n        text4 = MarkupText(\"special char &lt; and &amp;\")\n        group = VGroup(text1, text2, text3, text4).arrange(DOWN)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a series of text labels, each showing the name of a different indication animation in large font. For each label:\n\n1. Apply the corresponding indication effect:\n   - \u201cApplyWave\u201d animates a wave passing through the text.\n   - \u201cCircumscribe\u201d draws a border around the text.\n   - \u201cFlash\u201d creates a flashing effect at the top of the screen.\n   - \u201cFocusOn\u201d highlights the text with a spotlight effect.\n   - \u201cIndicate\u201d briefly highlights the text with a pulsing effect.\n   - \u201cShowPassingFlash\u201d animates an underline flashing across the text.\n   - \u201cWiggle\u201d makes the text wiggle.\n\n2. After each effect, fade out the current label upward and fade in the next one from below, cycling through all the animations."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Indications(Scene):\n    def construct(self):\n        indications = [ApplyWave,Circumscribe,Flash,FocusOn,Indicate,ShowPassingFlash,Wiggle]\n        names = [Tex(i.__name__).scale(3) for i in indications]\n\n        self.add(names[0])\n        for i in range(len(names)):\n            if indications[i] is Flash:\n                self.play(Flash(UP))\n            elif indications[i] is ShowPassingFlash:\n                self.play(ShowPassingFlash(Underline(names[i])))\n            else:\n                self.play(indications[i](names[i]))\n            self.play(AnimationGroup(\n                FadeOut(names[i], shift=UP*1.5),\n                FadeIn(names[(i+1)%len(names)], shift=UP*1.5),\n            ))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a series of text labels, each showing the name of a different indication animation in large font. For each label:\n\n1. Apply the corresponding indication effect:\n   - \u201cApplyWave\u201d animates a wave passing through the text.\n   - \u201cCircumscribe\u201d draws a border around the text.\n   - \u201cFlash\u201d creates a flashing effect at the top of the screen.\n   - \u201cFocusOn\u201d highlights the text with a spotlight effect.\n   - \u201cIndicate\u201d briefly highlights the text with a pulsing effect.\n   - \u201cShowPassingFlash\u201d animates an underline flashing across the text.\n   - \u201cWiggle\u201d makes the text wiggle.\n\n2. After each effect, fade out the current label upward and fade in the next one from below, cycling through all the animations."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Indications(Scene):\n    def construct(self):\n        indications = [ApplyWave,Circumscribe,Flash,FocusOn,Indicate,ShowPassingFlash,Wiggle]\n        names = [Tex(i.__name__).scale(3) for i in indications]\n\n        self.add(names[0])\n        for i in range(len(names)):\n            if indications[i] is Flash:\n                self.play(Flash(UP))\n            elif indications[i] is ShowPassingFlash:\n                self.play(ShowPassingFlash(Underline(names[i])))\n            else:\n                self.play(indications[i](names[i]))\n            self.play(AnimationGroup(\n                FadeOut(names[i], shift=UP*1.5),\n                FadeIn(names[(i+1)%len(names)], shift=UP*1.5),\n            ))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a square at the center of the screen. Four braces are added to one side of the square, each with a different sharpness value ranging from 0.1 to 1.0. Next to each brace, a label indicates its corresponding sharpness value. All braces and labels are then arranged vertically with slight spacing between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BraceExample(Scene):\n    def construct(self):\n        s = Square()\n        self.add(s)\n        for i in np.linspace(0.1,1.0,4):\n            br = Brace(s, sharpness=i)\n            t = Text(f\"sharpness= {i}\").next_to(br, RIGHT)\n            self.add(t)\n            self.add(br)\n        VGroup(*self.mobjects).arrange(DOWN, buff=0.2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a square at the center of the screen. Four braces are added to one side of the square, each with a different sharpness value ranging from 0.1 to 1.0. Next to each brace, a label indicates its corresponding sharpness value. All braces and labels are then arranged vertically with slight spacing between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BraceExample(Scene):\n    def construct(self):\n        s = Square()\n        self.add(s)\n        for i in np.linspace(0.1,1.0,4):\n            br = Brace(s, sharpness=i)\n            t = Text(f\"sharpness= {i}\").next_to(br, RIGHT)\n            self.add(t)\n            self.add(br)\n        VGroup(*self.mobjects).arrange(DOWN, buff=0.2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a square at the center of the screen. Four braces are added to one side of the square, each with a different sharpness value ranging from 0.1 to 1.0. Next to each brace, a label indicates its corresponding sharpness value. All braces and labels are then arranged vertically with slight spacing between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BraceExample(Scene):\n    def construct(self):\n        s = Square()\n        self.add(s)\n        for i in np.linspace(0.1,1.0,4):\n            br = Brace(s, sharpness=i)\n            t = Text(f\"sharpness= {i}\").next_to(br, RIGHT)\n            self.add(t)\n            self.add(br)\n        VGroup(*self.mobjects).arrange(DOWN, buff=0.2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 matrix  \n\\[\n\\begin{bmatrix}\n\\pi & 1 \\\\\n-1 & 3\n\\end{bmatrix}\n\\]  \nwith the first row colored red, the second row colored blue, and the brackets colored green. The matrix appears on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SetRowColorsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 1], [-1, 3]],\n        ).set_row_colors([RED,BLUE], GREEN)\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 matrix  \n\\[\n\\begin{bmatrix}\n\\pi & 1 \\\\\n-1 & 3\n\\end{bmatrix}\n\\]  \nwith the first row colored red, the second row colored blue, and the brackets colored green. The matrix appears on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SetRowColorsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 1], [-1, 3]],\n        ).set_row_colors([RED,BLUE], GREEN)\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 2\u00d72 matrix  \n\\[\n\\begin{bmatrix}\n\\pi & 1 \\\\\n-1 & 3\n\\end{bmatrix}\n\\]  \nwith the first row colored red, the second row colored blue, and the brackets colored green. The matrix appears on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SetRowColorsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 1], [-1, 3]],\n        ).set_row_colors([RED,BLUE], GREEN)\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a large circle with two tangent lines:\n\n1. A blue tangent line touching the circle on the right side.\n2. A green tangent line touching the circle at an upper-left point.\n\nBoth lines extend outward from their points of contact, illustrating tangents at different positions on the circle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TangentLineExample(Scene):\n    def construct(self):\n        circle = Circle(radius=2)\n        line_1 = TangentLine(circle, alpha=0.0, length=4, color=BLUE_D) # right\n        line_2 = TangentLine(circle, alpha=0.4, length=4, color=GREEN) # top left\n        self.add(circle, line_1, line_2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a large circle with two tangent lines:\n\n1. A blue tangent line touching the circle on the right side.\n2. A green tangent line touching the circle at an upper-left point.\n\nBoth lines extend outward from their points of contact, illustrating tangents at different positions on the circle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TangentLineExample(Scene):\n    def construct(self):\n        circle = Circle(radius=2)\n        line_1 = TangentLine(circle, alpha=0.0, length=4, color=BLUE_D) # right\n        line_2 = TangentLine(circle, alpha=0.4, length=4, color=GREEN) # top left\n        self.add(circle, line_1, line_2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 table with row and column labels. All horizontal lines in the table, including those separating rows and labels, are colored red to visually emphasize the row divisions."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetHorizontalLinesExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.get_horizontal_lines().set_color(RED)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 table with row and column labels. All horizontal lines in the table, including those separating rows and labels, are colored red to visually emphasize the row divisions."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetHorizontalLinesExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.get_horizontal_lines().set_color(RED)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D coordinate system with two lines:\n\n1. A red line extending from the point (2, 0, 0) to the point (0, 1, 1), angled diagonally through space.\n2. A yellow line that is parallel to the red line, automatically generated to match its direction.\n\nThe camera is set at a vertical angle of \\( \\frac{\\pi}{3} \\) and a horizontal angle of \\( -\\frac{\\pi}{4} \\), providing a tilted view that clearly shows the parallel orientation of the two lines in 3D space."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ParallelLineExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(PI / 3, -PI / 4)\n        ax = ThreeDAxes((-5, 5), (-5, 5), (-5, 5), 10, 10, 10)\n        line1 = Line3D(RIGHT * 2, UP + OUT, color=RED)\n        line2 = Line3D.parallel_to(line1, color=YELLOW)\n        self.add(ax, line1, line2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D coordinate system with two lines:\n\n1. A red line extending from the point (2, 0, 0) to the point (0, 1, 1), angled diagonally through space.\n2. A yellow line that is parallel to the red line, automatically generated to match its direction.\n\nThe camera is set at a vertical angle of \\( \\frac{\\pi}{3} \\) and a horizontal angle of \\( -\\frac{\\pi}{4} \\), providing a tilted view that clearly shows the parallel orientation of the two lines in 3D space."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ParallelLineExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(PI / 3, -PI / 4)\n        ax = ThreeDAxes((-5, 5), (-5, 5), (-5, 5), 10, 10, 10)\n        line1 = Line3D(RIGHT * 2, UP + OUT, color=RED)\n        line2 = Line3D.parallel_to(line1, color=YELLOW)\n        self.add(ax, line1, line2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a filled square and a triangle side by side, with the square on the left. As the animation begins, the square continuously shifts to the right at a steady pace. Meanwhile, the triangle gradually becomes visible by increasing its fill opacity. The square keeps moving as long as the animation is active."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShiftingSquare(Scene):\n    def construct(self):\n        sq = Square().set_fill(opacity=1)\n        tri = Triangle()\n        VGroup(sq, tri).arrange(LEFT)\n\n        # construct a square which is continuously\n        # shifted to the right\n        always_shift(sq, RIGHT, rate=5)\n\n        self.add(sq)\n        self.play(tri.animate.set_fill(opacity=1))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a filled square and a triangle side by side, with the square on the left. As the animation begins, the square continuously shifts to the right at a steady pace. Meanwhile, the triangle gradually becomes visible by increasing its fill opacity. The square keeps moving as long as the animation is active."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShiftingSquare(Scene):\n    def construct(self):\n        sq = Square().set_fill(opacity=1)\n        tri = Triangle()\n        VGroup(sq, tri).arrange(LEFT)\n\n        # construct a square which is continuously\n        # shifted to the right\n        always_shift(sq, RIGHT, rate=5)\n\n        self.add(sq)\n        self.play(tri.animate.set_fill(opacity=1))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "First, transform a circle into a square, then transform that square into a triangle, and finally fade out the triangle. After a brief pause, repeat the sequence using replacement transforms: replace the circle with a square, then replace the square with a triangle, and finally fade out the triangle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TwoTransforms(Scene):\n    def transform(self):\n        a = Circle()\n        b = Square()\n        c = Triangle()\n        self.play(Transform(a, b))\n        self.play(Transform(a, c))\n        self.play(FadeOut(a))\n\n    def replacement_transform(self):\n        a = Circle()\n        b = Square()\n        c = Triangle()\n        self.play(ReplacementTransform(a, b))\n        self.play(ReplacementTransform(b, c))\n        self.play(FadeOut(c))\n\n    def construct(self):\n        self.transform()\n        self.wait(0.5)  # wait for 0.5 seconds\n        self.replacement_transform()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that first, transform a circle into a square, then transform that square into a triangle, and finally fade out the triangle. After a brief pause, repeat the sequence using replacement transforms: replace the circle with a square, then replace the square with a triangle, and finally fade out the triangle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TwoTransforms(Scene):\n    def transform(self):\n        a = Circle()\n        b = Square()\n        c = Triangle()\n        self.play(Transform(a, b))\n        self.play(Transform(a, c))\n        self.play(FadeOut(a))\n\n    def replacement_transform(self):\n        a = Circle()\n        b = Square()\n        c = Triangle()\n        self.play(ReplacementTransform(a, b))\n        self.play(ReplacementTransform(b, c))\n        self.play(FadeOut(c))\n\n    def construct(self):\n        self.transform()\n        self.wait(0.5)  # wait for 0.5 seconds\n        self.replacement_transform()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to first, transform a circle into a square, then transform that square into a triangle, and finally fade out the triangle. After a brief pause, repeat the sequence using replacement transforms: replace the circle with a square, then replace the square with a triangle, and finally fade out the triangle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TwoTransforms(Scene):\n    def transform(self):\n        a = Circle()\n        b = Square()\n        c = Triangle()\n        self.play(Transform(a, b))\n        self.play(Transform(a, c))\n        self.play(FadeOut(a))\n\n    def replacement_transform(self):\n        a = Circle()\n        b = Square()\n        c = Triangle()\n        self.play(ReplacementTransform(a, b))\n        self.play(ReplacementTransform(b, c))\n        self.play(FadeOut(c))\n\n    def construct(self):\n        self.transform()\n        self.wait(0.5)  # wait for 0.5 seconds\n        self.replacement_transform()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D coordinate system with two lines:\n\n1. A red line extending from the point (2, 0, 0) to the point (0, 1, 1), angled diagonally through space.\n2. A blue line that is perpendicular to the red line, automatically generated to intersect it at a right angle.\n\nThe camera is set at a vertical angle of \\( \\frac{\\pi}{3} \\) and a horizontal angle of \\( -\\frac{\\pi}{4} \\), providing a tilted view that clearly shows the perpendicular relationship between the two lines in 3D space."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PerpLineExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(PI / 3, -PI / 4)\n        ax = ThreeDAxes((-5, 5), (-5, 5), (-5, 5), 10, 10, 10)\n        line1 = Line3D(RIGHT * 2, UP + OUT, color=RED)\n        line2 = Line3D.perpendicular_to(line1, color=BLUE)\n        self.add(ax, line1, line2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D coordinate system with two lines:\n\n1. A red line extending from the point (2, 0, 0) to the point (0, 1, 1), angled diagonally through space.\n2. A blue line that is perpendicular to the red line, automatically generated to intersect it at a right angle.\n\nThe camera is set at a vertical angle of \\( \\frac{\\pi}{3} \\) and a horizontal angle of \\( -\\frac{\\pi}{4} \\), providing a tilted view that clearly shows the perpendicular relationship between the two lines in 3D space."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PerpLineExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(PI / 3, -PI / 4)\n        ax = ThreeDAxes((-5, 5), (-5, 5), (-5, 5), 10, 10, 10)\n        line1 = Line3D(RIGHT * 2, UP + OUT, color=RED)\n        line2 = Line3D.perpendicular_to(line1, color=BLUE)\n        self.add(ax, line1, line2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a number plane with labeled axes ranging from 0 to 7 on the x-axis and 0 to 5 on the y-axis. A gold-colored line graph is plotted through a series of six data points, each marked with a purple dot outlined in black. The graph shows a fluctuating trend, rising and falling across the plotted x-values, and is centered on the screen for clear visibility."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LineGraphExample(Scene):\n    def construct(self):\n        plane = NumberPlane(\n            x_range = (0, 7),\n            y_range = (0, 5),\n            x_length = 7,\n            axis_config={\"include_numbers\": True},\n        )\n        plane.center()\n        line_graph = plane.plot_line_graph(\n            x_values = [0, 1.5, 2, 2.8, 4, 6.25],\n            y_values = [1, 3, 2.25, 4, 2.5, 1.75],\n            line_color=GOLD_E,\n            vertex_dot_style=dict(stroke_width=3,  fill_color=PURPLE),\n            stroke_width = 4,\n        )\n        self.add(plane, line_graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a number plane with labeled axes ranging from 0 to 7 on the x-axis and 0 to 5 on the y-axis. A gold-colored line graph is plotted through a series of six data points, each marked with a purple dot outlined in black. The graph shows a fluctuating trend, rising and falling across the plotted x-values, and is centered on the screen for clear visibility."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LineGraphExample(Scene):\n    def construct(self):\n        plane = NumberPlane(\n            x_range = (0, 7),\n            y_range = (0, 5),\n            x_length = 7,\n            axis_config={\"include_numbers\": True},\n        )\n        plane.center()\n        line_graph = plane.plot_line_graph(\n            x_values = [0, 1.5, 2, 2.8, 4, 6.25],\n            y_values = [1, 3, 2.25, 4, 2.5, 1.75],\n            line_color=GOLD_E,\n            vertex_dot_style=dict(stroke_width=3,  fill_color=PURPLE),\n            stroke_width = 4,\n        )\n        self.add(plane, line_graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a streamlines vector field where each line represents the flow of a custom vector function that subtly rotates and scales position vectors. The streamlines illustrate the continuous motion and direction of the field across the screen, without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BasicUsage(Scene):\n    def construct(self):\n        func = lambda pos: ((pos[0] * UR + pos[1] * LEFT) - pos) / 3\n        self.add(StreamLines(func))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a streamlines vector field where each line represents the flow of a custom vector function that subtly rotates and scales position vectors. The streamlines illustrate the continuous motion and direction of the field across the screen, without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BasicUsage(Scene):\n    def construct(self):\n        func = lambda pos: ((pos[0] * UR + pos[1] * LEFT) - pos) / 3\n        self.add(StreamLines(func))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a streamlines vector field where each line represents the flow of a custom vector function that subtly rotates and scales position vectors. The streamlines illustrate the continuous motion and direction of the field across the screen, without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BasicUsage(Scene):\n    def construct(self):\n        func = lambda pos: ((pos[0] * UR + pos[1] * LEFT) - pos) / 3\n        self.add(StreamLines(func))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a dot positioned at the upper left. Then animate the text \u201cFadeOut with shift or target_position and scale\u201d disappearing in four parts: the first part fades out normally, the second fades out while shifting downward, the third fades out while moving toward the dot, and the fourth fades out while scaling down. Each part disappears with a delay between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FadeInExample(Scene):\n    def construct(self):\n        dot = Dot(UP * 2 + LEFT)\n        self.add(dot)\n        tex = Tex(\n            \"FadeOut with \", \"shift \", r\" or target\\_position\", \" and scale\"\n        ).scale(1)\n        animations = [\n            FadeOut(tex[0]),\n            FadeOut(tex[1], shift=DOWN),\n            FadeOut(tex[2], target_position=dot),\n            FadeOut(tex[3], scale=0.5),\n        ]\n        self.play(AnimationGroup(*animations, lag_ratio=0.5))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a dot positioned at the upper left. Then animate the text \u201cFadeOut with shift or target_position and scale\u201d disappearing in four parts: the first part fades out normally, the second fades out while shifting downward, the third fades out while moving toward the dot, and the fourth fades out while scaling down. Each part disappears with a delay between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FadeInExample(Scene):\n    def construct(self):\n        dot = Dot(UP * 2 + LEFT)\n        self.add(dot)\n        tex = Tex(\n            \"FadeOut with \", \"shift \", r\" or target\\_position\", \" and scale\"\n        ).scale(1)\n        animations = [\n            FadeOut(tex[0]),\n            FadeOut(tex[1], shift=DOWN),\n            FadeOut(tex[2], target_position=dot),\n            FadeOut(tex[3], scale=0.5),\n        ]\n        self.play(AnimationGroup(*animations, lag_ratio=0.5))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a dot positioned at the upper left. Then animate the text \u201cFadeOut with shift or target_position and scale\u201d disappearing in four parts: the first part fades out normally, the second fades out while shifting downward, the third fades out while moving toward the dot, and the fourth fades out while scaling down. Each part disappears with a delay between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FadeInExample(Scene):\n    def construct(self):\n        dot = Dot(UP * 2 + LEFT)\n        self.add(dot)\n        tex = Tex(\n            \"FadeOut with \", \"shift \", r\" or target\\_position\", \" and scale\"\n        ).scale(1)\n        animations = [\n            FadeOut(tex[0]),\n            FadeOut(tex[1], shift=DOWN),\n            FadeOut(tex[2], target_position=dot),\n            FadeOut(tex[3], scale=0.5),\n        ]\n        self.play(AnimationGroup(*animations, lag_ratio=0.5))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a circle positioned two units to the left of the center. Place a square to the left of the circle with a small gap between them. Then, position a triangle so that its left edge aligns with the left edge of the circle. Show all three shapes on screen and pause for one second."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectPlacement(Scene):\n    def construct(self):\n        circle = Circle()\n        square = Square()\n        triangle = Triangle()\n\n        # place the circle two units left from the origin\n        circle.move_to(LEFT * 2)\n        # place the square to the left of the circle\n        square.next_to(circle, LEFT)\n        # align the left border of the triangle to the left border of the circle\n        triangle.align_to(circle, LEFT)\n\n        self.add(circle, square, triangle)\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a circle positioned two units to the left of the center. Place a square to the left of the circle with a small gap between them. Then, position a triangle so that its left edge aligns with the left edge of the circle. Show all three shapes on screen and pause for one second."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectPlacement(Scene):\n    def construct(self):\n        circle = Circle()\n        square = Square()\n        triangle = Triangle()\n\n        # place the circle two units left from the origin\n        circle.move_to(LEFT * 2)\n        # place the square to the left of the circle\n        square.next_to(circle, LEFT)\n        # align the left border of the triangle to the left border of the circle\n        triangle.align_to(circle, LEFT)\n\n        self.add(circle, square, triangle)\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the word \"Hello\" in large font with a smooth gradient transitioning from red to blue to green across the text."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GradientExample(Scene):\n    def construct(self):\n        t = Text(\"Hello\", gradient=(RED, BLUE, GREEN), font_size=96)\n        self.add(t)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the word \"Hello\" in large font with a smooth gradient transitioning from red to blue to green across the text."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GradientExample(Scene):\n    def construct(self):\n        t = Text(\"Hello\", gradient=(RED, BLUE, GREEN), font_size=96)\n        self.add(t)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the word \"Hello\" in large font with a smooth gradient transitioning from red to blue to green across the text."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GradientExample(Scene):\n    def construct(self):\n        t = Text(\"Hello\", gradient=(RED, BLUE, GREEN), font_size=96)\n        self.add(t)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a square at the center of the screen. First, the square is drawn. Then, in a single smooth animation, it shifts to the right, doubles in size, and rotates 90 degrees counterclockwise. Finally, the square disappears."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnimateChainExample(Scene):\n    def construct(self):\n        s = Square()\n        self.play(Create(s))\n        self.play(s.animate.shift(RIGHT).scale(2).rotate(PI / 2))\n        self.play(Uncreate(s))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a square at the center of the screen. First, the square is drawn. Then, in a single smooth animation, it shifts to the right, doubles in size, and rotates 90 degrees counterclockwise. Finally, the square disappears."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnimateChainExample(Scene):\n    def construct(self):\n        s = Square()\n        self.play(Create(s))\n        self.play(s.animate.shift(RIGHT).scale(2).rotate(PI / 2))\n        self.play(Uncreate(s))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \u201cFocusing on the dot below:\u201d at the top of the screen with a yellow dot positioned below it. Then animate a spotlight effect that highlights and draws attention to the dot."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UsingFocusOn(Scene):\n    def construct(self):\n        dot = Dot(color=YELLOW).shift(DOWN)\n        self.add(Tex(\"Focusing on the dot below:\"), dot)\n        self.play(FocusOn(dot))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \u201cFocusing on the dot below:\u201d at the top of the screen with a yellow dot positioned below it. Then animate a spotlight effect that highlights and draws attention to the dot."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UsingFocusOn(Scene):\n    def construct(self):\n        dot = Dot(color=YELLOW).shift(DOWN)\n        self.add(Tex(\"Focusing on the dot below:\"), dot)\n        self.play(FocusOn(dot))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a scene with two main sections arranged vertically:\n\n1. At the top, a title reading \u201cA Quote from Newton\u201d is shown. Below it, a blue-colored quote is displayed:  \n   *\u201cIf I have seen further than others, it is by standing upon the shoulders of giants.\u201d*  \n   This quote is enclosed in a yellow rectangular border with extra padding.\n\n2. Below the quote, a large \u201cHello World\u201d message is shown in LaTeX style, surrounded by a rounded rectangle.\n\nBoth sections are centered and neatly spaced for clarity."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SurroundingRectExample(Scene):\n    def construct(self):\n        title = Title(\"A Quote from Newton\")\n        quote = Text(\n            \"If I have seen further than others, \\n\"\n            \"it is by standing upon the shoulders of giants.\",\n            color=BLUE,\n        ).scale(0.75)\n        box = SurroundingRectangle(quote, color=YELLOW, buff=MED_LARGE_BUFF)\n\n        t2 = Tex(r\"Hello World\").scale(1.5)\n        box2 = SurroundingRectangle(t2, corner_radius=0.2)\n        mobjects = VGroup(VGroup(box, quote), VGroup(t2, box2)).arrange(DOWN)\n        self.add(title, mobjects)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a scene with two main sections arranged vertically:\n\n1. At the top, a title reading \u201cA Quote from Newton\u201d is shown. Below it, a blue-colored quote is displayed:  \n   *\u201cIf I have seen further than others, it is by standing upon the shoulders of giants.\u201d*  \n   This quote is enclosed in a yellow rectangular border with extra padding.\n\n2. Below the quote, a large \u201cHello World\u201d message is shown in LaTeX style, surrounded by a rounded rectangle.\n\nBoth sections are centered and neatly spaced for clarity."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SurroundingRectExample(Scene):\n    def construct(self):\n        title = Title(\"A Quote from Newton\")\n        quote = Text(\n            \"If I have seen further than others, \\n\"\n            \"it is by standing upon the shoulders of giants.\",\n            color=BLUE,\n        ).scale(0.75)\n        box = SurroundingRectangle(quote, color=YELLOW, buff=MED_LARGE_BUFF)\n\n        t2 = Tex(r\"Hello World\").scale(1.5)\n        box2 = SurroundingRectangle(t2, corner_radius=0.2)\n        mobjects = VGroup(VGroup(box, quote), VGroup(t2, box2)).arrange(DOWN)\n        self.add(title, mobjects)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a scene with two main sections arranged vertically:\n\n1. At the top, a title reading \u201cA Quote from Newton\u201d is shown. Below it, a blue-colored quote is displayed:  \n   *\u201cIf I have seen further than others, it is by standing upon the shoulders of giants.\u201d*  \n   This quote is enclosed in a yellow rectangular border with extra padding.\n\n2. Below the quote, a large \u201cHello World\u201d message is shown in LaTeX style, surrounded by a rounded rectangle.\n\nBoth sections are centered and neatly spaced for clarity."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SurroundingRectExample(Scene):\n    def construct(self):\n        title = Title(\"A Quote from Newton\")\n        quote = Text(\n            \"If I have seen further than others, \\n\"\n            \"it is by standing upon the shoulders of giants.\",\n            color=BLUE,\n        ).scale(0.75)\n        box = SurroundingRectangle(quote, color=YELLOW, buff=MED_LARGE_BUFF)\n\n        t2 = Tex(r\"Hello World\").scale(1.5)\n        box2 = SurroundingRectangle(t2, corner_radius=0.2)\n        mobjects = VGroup(VGroup(box, quote), VGroup(t2, box2)).arrange(DOWN)\n        self.add(title, mobjects)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D scene with a set of 15 points in space, each marked by a small dot. These points are enclosed by a translucent convex hull\u2014a 3D shape formed by connecting the outermost points. The hull has no visible faces but faint blue edges with low opacity. The camera is angled to provide a clear view of the 3D structure, tilted at 75\u00b0 vertically and 30\u00b0 horizontally."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ConvexHull3DExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        points = [\n            [ 1.93192757,  0.44134585, -1.52407061],\n            [-0.93302521,  1.23206983,  0.64117067],\n            [-0.44350918, -0.61043677,  0.21723705],\n            [-0.42640268, -1.05260843,  1.61266094],\n            [-1.84449637,  0.91238739, -1.85172623],\n            [ 1.72068132, -0.11880457,  0.51881751],\n            [ 0.41904805,  0.44938012, -1.86440686],\n            [ 0.83864666,  1.66653337,  1.88960123],\n            [ 0.22240514, -0.80986286,  1.34249326],\n            [-1.29585759,  1.01516189,  0.46187522],\n            [ 1.7776499,  -1.59550796, -1.70240747],\n            [ 0.80065226, -0.12530398,  1.70063977],\n            [ 1.28960948, -1.44158255,  1.39938582],\n            [-0.93538943,  1.33617705, -0.24852643],\n            [-1.54868271,  1.7444399,  -0.46170734]\n        ]\n        hull = ConvexHull3D(\n            *points,\n            faces_config = {\"stroke_opacity\": 0},\n            graph_config = {\n                \"vertex_type\": Dot3D,\n                \"edge_config\": {\n                    \"stroke_color\": BLUE,\n                    \"stroke_width\": 2,\n                    \"stroke_opacity\": 0.05,\n                }\n            }\n        )\n        dots = VGroup(*[Dot3D(point) for point in points])\n        self.add(hull)\n        self.add(dots)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D scene with a set of 15 points in space, each marked by a small dot. These points are enclosed by a translucent convex hull\u2014a 3D shape formed by connecting the outermost points. The hull has no visible faces but faint blue edges with low opacity. The camera is angled to provide a clear view of the 3D structure, tilted at 75\u00b0 vertically and 30\u00b0 horizontally."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ConvexHull3DExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        points = [\n            [ 1.93192757,  0.44134585, -1.52407061],\n            [-0.93302521,  1.23206983,  0.64117067],\n            [-0.44350918, -0.61043677,  0.21723705],\n            [-0.42640268, -1.05260843,  1.61266094],\n            [-1.84449637,  0.91238739, -1.85172623],\n            [ 1.72068132, -0.11880457,  0.51881751],\n            [ 0.41904805,  0.44938012, -1.86440686],\n            [ 0.83864666,  1.66653337,  1.88960123],\n            [ 0.22240514, -0.80986286,  1.34249326],\n            [-1.29585759,  1.01516189,  0.46187522],\n            [ 1.7776499,  -1.59550796, -1.70240747],\n            [ 0.80065226, -0.12530398,  1.70063977],\n            [ 1.28960948, -1.44158255,  1.39938582],\n            [-0.93538943,  1.33617705, -0.24852643],\n            [-1.54868271,  1.7444399,  -0.46170734]\n        ]\n        hull = ConvexHull3D(\n            *points,\n            faces_config = {\"stroke_opacity\": 0},\n            graph_config = {\n                \"vertex_type\": Dot3D,\n                \"edge_config\": {\n                    \"stroke_color\": BLUE,\n                    \"stroke_width\": 2,\n                    \"stroke_opacity\": 0.05,\n                }\n            }\n        )\n        dots = VGroup(*[Dot3D(point) for point in points])\n        self.add(hull)\n        self.add(dots)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a graph with six labeled nodes arranged in three vertical partitions: nodes 1 and 2 in the first column, nodes 3 and 4 in the second, and nodes 5 and 6 in the third. The nodes are connected by a mix of sequential and cross-partition edges, forming a complex, interconnected structure that spans across all three partitions."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PartiteLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"partite\",\n            layout_config={\"partitions\": [[1,2],[3,4],[5,6]]},\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a graph with six labeled nodes arranged in three vertical partitions: nodes 1 and 2 in the first column, nodes 3 and 4 in the second, and nodes 5 and 6 in the third. The nodes are connected by a mix of sequential and cross-partition edges, forming a complex, interconnected structure that spans across all three partitions."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PartiteLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"partite\",\n            layout_config={\"partitions\": [[1,2],[3,4],[5,6]]},\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a graph with six labeled nodes arranged in three vertical partitions: nodes 1 and 2 in the first column, nodes 3 and 4 in the second, and nodes 5 and 6 in the third. The nodes are connected by a mix of sequential and cross-partition edges, forming a complex, interconnected structure that spans across all three partitions."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PartiteLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"partite\",\n            layout_config={\"partitions\": [[1,2],[3,4],[5,6]]},\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Animate the creation of a yellow streamlines vector field, where each line flows according to a custom function that subtly rotates and shifts position vectors. The streamlines appear gradually across the screen with a smooth animation, using shorter lines and fewer anchor points for performance and visual clarity."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass StreamLineCreation(Scene):\n    def construct(self):\n        func = lambda pos: (pos[0] * UR + pos[1] * LEFT) - pos\n        stream_lines = StreamLines(\n            func,\n            color=YELLOW,\n            x_range=[-7, 7, 1],\n            y_range=[-4, 4, 1],\n            stroke_width=3,\n            virtual_time=1,  # use shorter lines\n            max_anchors_per_line=5,  # better performance with fewer anchors\n        )\n        self.play(stream_lines.create())  # uses virtual_time as run_time\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that animate the creation of a yellow streamlines vector field, where each line flows according to a custom function that subtly rotates and shifts position vectors. The streamlines appear gradually across the screen with a smooth animation, using shorter lines and fewer anchor points for performance and visual clarity."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass StreamLineCreation(Scene):\n    def construct(self):\n        func = lambda pos: (pos[0] * UR + pos[1] * LEFT) - pos\n        stream_lines = StreamLines(\n            func,\n            color=YELLOW,\n            x_range=[-7, 7, 1],\n            y_range=[-4, 4, 1],\n            stroke_width=3,\n            virtual_time=1,  # use shorter lines\n            max_anchors_per_line=5,  # better performance with fewer anchors\n        )\n        self.play(stream_lines.create())  # uses virtual_time as run_time\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display four annular sectors on a white background, each positioned in a different quadrant of the screen: \n\n- a default yellow sector in the upper left\n- a red sector with a thicker ring and 45-degree angle in the upper right\n- a semi-transparent blue half-ring in the lower left, and a green sector in the lower right drawn clockwise with a 270-degree angle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnnularSectorExample(Scene):\n    def construct(self):\n        # Changes background color to clearly visualize changes in fill_opacity.\n        self.camera.background_color = WHITE\n\n        # The default parameter start_angle is 0, so the AnnularSector starts from the +x-axis.\n        s1 = AnnularSector(color=YELLOW).move_to(2 * UL)\n\n        # Different inner_radius and outer_radius than the default.\n        s2 = AnnularSector(inner_radius=1.5, outer_radius=2, angle=45 * DEGREES, color=RED).move_to(2 * UR)\n\n        # fill_opacity is typically a number > 0 and <= 1. If fill_opacity=0, the AnnularSector is transparent.\n        s3 = AnnularSector(inner_radius=1, outer_radius=1.5, angle=PI, fill_opacity=0.25, color=BLUE).move_to(2 * DL)\n\n        # With a negative value for the angle, the AnnularSector is drawn clockwise from the start value.\n        s4 = AnnularSector(inner_radius=1, outer_radius=1.5, angle=-3 * PI / 2, color=GREEN).move_to(2 * DR)\n\n        self.add(s1, s2, s3, s4)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display four annular sectors on a white background, each positioned in a different quadrant of the screen: \n\n- a default yellow sector in the upper left\n- a red sector with a thicker ring and 45-degree angle in the upper right\n- a semi-transparent blue half-ring in the lower left, and a green sector in the lower right drawn clockwise with a 270-degree angle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnnularSectorExample(Scene):\n    def construct(self):\n        # Changes background color to clearly visualize changes in fill_opacity.\n        self.camera.background_color = WHITE\n\n        # The default parameter start_angle is 0, so the AnnularSector starts from the +x-axis.\n        s1 = AnnularSector(color=YELLOW).move_to(2 * UL)\n\n        # Different inner_radius and outer_radius than the default.\n        s2 = AnnularSector(inner_radius=1.5, outer_radius=2, angle=45 * DEGREES, color=RED).move_to(2 * UR)\n\n        # fill_opacity is typically a number > 0 and <= 1. If fill_opacity=0, the AnnularSector is transparent.\n        s3 = AnnularSector(inner_radius=1, outer_radius=1.5, angle=PI, fill_opacity=0.25, color=BLUE).move_to(2 * DL)\n\n        # With a negative value for the angle, the AnnularSector is drawn clockwise from the start value.\n        s4 = AnnularSector(inner_radius=1, outer_radius=1.5, angle=-3 * PI / 2, color=GREEN).move_to(2 * DR)\n\n        self.add(s1, s2, s3, s4)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two ellipses arranged horizontally: a tall blue ellipse on the left and a wide dark blue ellipse on the right, with space between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass EllipseExample(Scene):\n    def construct(self):\n        ellipse_1 = Ellipse(width=2.0, height=4.0, color=BLUE_B)\n        ellipse_2 = Ellipse(width=4.0, height=1.0, color=BLUE_D)\n        ellipse_group = Group(ellipse_1,ellipse_2).arrange(buff=1)\n        self.add(ellipse_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two ellipses arranged horizontally: a tall blue ellipse on the left and a wide dark blue ellipse on the right, with space between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass EllipseExample(Scene):\n    def construct(self):\n        ellipse_1 = Ellipse(width=2.0, height=4.0, color=BLUE_B)\n        ellipse_2 = Ellipse(width=4.0, height=1.0, color=BLUE_D)\n        ellipse_group = Group(ellipse_1,ellipse_2).arrange(buff=1)\n        self.add(ellipse_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display two ellipses arranged horizontally: a tall blue ellipse on the left and a wide dark blue ellipse on the right, with space between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass EllipseExample(Scene):\n    def construct(self):\n        ellipse_1 = Ellipse(width=2.0, height=4.0, color=BLUE_B)\n        ellipse_2 = Ellipse(width=4.0, height=1.0, color=BLUE_D)\n        ellipse_group = Group(ellipse_1,ellipse_2).arrange(buff=1)\n        self.add(ellipse_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of coordinate axes with a purple sine curve representing \\( y = \\sin(x) \\). At \\( x = \\frac{\\pi}{2} \\), a dot is placed on the curve, and a label showing \\( \\frac{\\pi}{2} \\) appears near the dot, positioned diagonally up and to the right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetGraphLabelExample(Scene):\n    def construct(self):\n        ax = Axes()\n        sin = ax.plot(lambda x: np.sin(x), color=PURPLE_B)\n        label = ax.get_graph_label(\n            graph=sin,\n            label= MathTex(r\"\\frac{\\pi}{2}\"),\n            x_val=PI / 2,\n            dot=True,\n            direction=UR,\n        )\n\n        self.add(ax, sin, label)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of coordinate axes with a purple sine curve representing \\( y = \\sin(x) \\). At \\( x = \\frac{\\pi}{2} \\), a dot is placed on the curve, and a label showing \\( \\frac{\\pi}{2} \\) appears near the dot, positioned diagonally up and to the right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetGraphLabelExample(Scene):\n    def construct(self):\n        ax = Axes()\n        sin = ax.plot(lambda x: np.sin(x), color=PURPLE_B)\n        label = ax.get_graph_label(\n            graph=sin,\n            label= MathTex(r\"\\frac{\\pi}{2}\"),\n            x_val=PI / 2,\n            dot=True,\n            direction=UR,\n        )\n\n        self.add(ax, sin, label)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a set of coordinate axes with a purple sine curve representing \\( y = \\sin(x) \\). At \\( x = \\frac{\\pi}{2} \\), a dot is placed on the curve, and a label showing \\( \\frac{\\pi}{2} \\) appears near the dot, positioned diagonally up and to the right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetGraphLabelExample(Scene):\n    def construct(self):\n        ax = Axes()\n        sin = ax.plot(lambda x: np.sin(x), color=PURPLE_B)\n        label = ax.get_graph_label(\n            graph=sin,\n            label= MathTex(r\"\\frac{\\pi}{2}\"),\n            x_val=PI / 2,\n            dot=True,\n            direction=UR,\n        )\n\n        self.add(ax, sin, label)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of axes with labels \\(\\Delta Q\\) for the x-axis and \\(T[^\\circ C]\\) for the y-axis. Plot a line graph with points at (0, 20), (8, 0), (38, 0), and (39, -5)."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass HeatDiagramPlot(Scene):\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 40, 5],\n            y_range=[-8, 32, 5],\n            x_length=9,\n            y_length=6,\n            x_axis_config={\"numbers_to_include\": np.arange(0, 40, 5)},\n            y_axis_config={\"numbers_to_include\": np.arange(-5, 34, 5)},\n            tips=False,\n        )\n        labels = ax.get_axis_labels(\n            x_label=Tex(r\"$\\Delta Q$\"), y_label=Tex(r\"T[$^\\circ C$]\")\n        )\n\n        x_vals = [0, 8, 38, 39]\n        y_vals = [20, 0, 0, -5]\n        graph = ax.plot_line_graph(x_values=x_vals, y_values=y_vals)\n\n        self.add(ax, labels, graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of axes with labels \\(\\Delta Q\\) for the x-axis and \\(T[^\\circ C]\\) for the y-axis. Plot a line graph with points at (0, 20), (8, 0), (38, 0), and (39, -5)."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass HeatDiagramPlot(Scene):\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 40, 5],\n            y_range=[-8, 32, 5],\n            x_length=9,\n            y_length=6,\n            x_axis_config={\"numbers_to_include\": np.arange(0, 40, 5)},\n            y_axis_config={\"numbers_to_include\": np.arange(-5, 34, 5)},\n            tips=False,\n        )\n        labels = ax.get_axis_labels(\n            x_label=Tex(r\"$\\Delta Q$\"), y_label=Tex(r\"T[$^\\circ C$]\")\n        )\n\n        x_vals = [0, 8, 38, 39]\n        y_vals = [20, 0, 0, -5]\n        graph = ax.plot_line_graph(x_values=x_vals, y_values=y_vals)\n\n        self.add(ax, labels, graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a set of axes with labels \\(\\Delta Q\\) for the x-axis and \\(T[^\\circ C]\\) for the y-axis. Plot a line graph with points at (0, 20), (8, 0), (38, 0), and (39, -5)."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass HeatDiagramPlot(Scene):\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 40, 5],\n            y_range=[-8, 32, 5],\n            x_length=9,\n            y_length=6,\n            x_axis_config={\"numbers_to_include\": np.arange(0, 40, 5)},\n            y_axis_config={\"numbers_to_include\": np.arange(-5, 34, 5)},\n            tips=False,\n        )\n        labels = ax.get_axis_labels(\n            x_label=Tex(r\"$\\Delta Q$\"), y_label=Tex(r\"T[$^\\circ C$]\")\n        )\n\n        x_vals = [0, 8, 38, 39]\n        y_vals = [20, 0, 0, -5]\n        graph = ax.plot_line_graph(x_values=x_vals, y_values=y_vals)\n\n        self.add(ax, labels, graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a pink circle with 50% transparency centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CreateCircle(Scene):\n    def construct(self):\n        circle = Circle()  # create a circle\n        circle.set_fill(PINK, opacity=0.5)  # set the color and transparency\n        self.play(Create(circle))  # show the circle on screen\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a pink circle with 50% transparency centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CreateCircle(Scene):\n    def construct(self):\n        circle = Circle()  # create a circle\n        circle.set_fill(PINK, opacity=0.5)  # set the color and transparency\n        self.play(Create(circle))  # show the circle on screen\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \"So shiny!\" at the center of the screen with a glowing animated boundary effect that cycles through red, green, and blue colors at a rate of 3 cycles per second. The animation runs for 2 seconds."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnimatedBoundaryExample(Scene):\n    def construct(self):\n        text = Text(\"So shiny!\")\n        boundary = AnimatedBoundary(text, colors=[RED, GREEN, BLUE],\n                                    cycle_rate=3)\n        self.add(text, boundary)\n        self.wait(2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \"So shiny!\" at the center of the screen with a glowing animated boundary effect that cycles through red, green, and blue colors at a rate of 3 cycles per second. The animation runs for 2 seconds."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnimatedBoundaryExample(Scene):\n    def construct(self):\n        text = Text(\"So shiny!\")\n        boundary = AnimatedBoundary(text, colors=[RED, GREEN, BLUE],\n                                    cycle_rate=3)\n        self.add(text, boundary)\n        self.wait(2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a graph with eight labeled nodes arranged in a circular layout. Node 7 is highlighted in red, and three edges connected to it\u2014(1, 7), (2, 7), and (4, 7)\u2014are also colored red to emphasize its connections. The rest of the graph uses default styling, and all nodes are evenly spaced around the circle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LabeledModifiedGraph(Scene):\n    def construct(self):\n        vertices = [1, 2, 3, 4, 5, 6, 7, 8]\n        edges = [(1, 7), (1, 8), (2, 3), (2, 4), (2, 5),\n                 (2, 8), (3, 4), (6, 1), (6, 2),\n                 (6, 3), (7, 2), (7, 4)]\n        g = Graph(vertices, edges, layout=\"circular\", layout_scale=3,\n                  labels=True, vertex_config={7: {\"fill_color\": RED}},\n                  edge_config={(1, 7): {\"stroke_color\": RED},\n                               (2, 7): {\"stroke_color\": RED},\n                               (4, 7): {\"stroke_color\": RED}})\n        self.add(g)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a graph with eight labeled nodes arranged in a circular layout. Node 7 is highlighted in red, and three edges connected to it\u2014(1, 7), (2, 7), and (4, 7)\u2014are also colored red to emphasize its connections. The rest of the graph uses default styling, and all nodes are evenly spaced around the circle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LabeledModifiedGraph(Scene):\n    def construct(self):\n        vertices = [1, 2, 3, 4, 5, 6, 7, 8]\n        edges = [(1, 7), (1, 8), (2, 3), (2, 4), (2, 5),\n                 (2, 8), (3, 4), (6, 1), (6, 2),\n                 (6, 3), (7, 2), (7, 4)]\n        g = Graph(vertices, edges, layout=\"circular\", layout_scale=3,\n                  labels=True, vertex_config={7: {\"fill_color\": RED}},\n                  edge_config={(1, 7): {\"stroke_color\": RED},\n                               (2, 7): {\"stroke_color\": RED},\n                               (4, 7): {\"stroke_color\": RED}})\n        self.add(g)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a red square and a yellow circle labeled with keys \"s\" and \"c\" respectively, grouped together using a visual dictionary. After a pause, green text labeled \"t\" appears below the square. A rectangle is then added below the text and labeled \"r\". The text changes color to purple, scales up, and is then replaced with new blue text. This new text is removed, followed by the red square being uncreated, the yellow circle fading out, and the rectangle fading out while shifting downward. Finally, two new VDicts appear: one on the left showing integers 1, 2, and 3 stacked vertically, and another on the right showing a square, circle, and rectangle arranged together."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShapesWithVDict(Scene):\n    def construct(self):\n        square = Square().set_color(RED)\n        circle = Circle().set_color(YELLOW).next_to(square, UP)\n\n        # create dict from list of tuples each having key-mobject pair\n        pairs = [(\"s\", square), (\"c\", circle)]\n        my_dict = VDict(pairs, show_keys=True)\n\n        # display it just like a VGroup\n        self.play(Create(my_dict))\n        self.wait()\n\n        text = Tex(\"Some text\").set_color(GREEN).next_to(square, DOWN)\n\n        # add a key-value pair by wrapping it in a single-element list of tuple\n        # after attrs branch is merged, it will be easier like `.add(t=text)`\n        my_dict.add([(\"t\", text)])\n        self.wait()\n\n        rect = Rectangle().next_to(text, DOWN)\n        # can also do key assignment like a python dict\n        my_dict[\"r\"] = rect\n\n        # access submobjects like a python dict\n        my_dict[\"t\"].set_color(PURPLE)\n        self.play(my_dict[\"t\"].animate.scale(3))\n        self.wait()\n\n        # also supports python dict styled reassignment\n        my_dict[\"t\"] = Tex(\"Some other text\").set_color(BLUE)\n        self.wait()\n\n        # remove submobject by key\n        my_dict.remove(\"t\")\n        self.wait()\n\n        self.play(Uncreate(my_dict[\"s\"]))\n        self.wait()\n\n        self.play(FadeOut(my_dict[\"c\"]))\n        self.wait()\n\n        self.play(FadeOut(my_dict[\"r\"], shift=DOWN))\n        self.wait()\n\n        # you can also make a VDict from an existing dict of mobjects\n        plain_dict = {\n            1: Integer(1).shift(DOWN),\n            2: Integer(2).shift(2 * DOWN),\n            3: Integer(3).shift(3 * DOWN),\n        }\n\n        vdict_from_plain_dict = VDict(plain_dict)\n        vdict_from_plain_dict.shift(1.5 * (UP + LEFT))\n        self.play(Create(vdict_from_plain_dict))\n\n        # you can even use zip\n        vdict_using_zip = VDict(zip([\"s\", \"c\", \"r\"], [Square(), Circle(), Rectangle()]))\n        vdict_using_zip.shift(1.5 * RIGHT)\n        self.play(Create(vdict_using_zip))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a red square and a yellow circle labeled with keys \"s\" and \"c\" respectively, grouped together using a visual dictionary. After a pause, green text labeled \"t\" appears below the square. A rectangle is then added below the text and labeled \"r\". The text changes color to purple, scales up, and is then replaced with new blue text. This new text is removed, followed by the red square being uncreated, the yellow circle fading out, and the rectangle fading out while shifting downward. Finally, two new VDicts appear: one on the left showing integers 1, 2, and 3 stacked vertically, and another on the right showing a square, circle, and rectangle arranged together."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShapesWithVDict(Scene):\n    def construct(self):\n        square = Square().set_color(RED)\n        circle = Circle().set_color(YELLOW).next_to(square, UP)\n\n        # create dict from list of tuples each having key-mobject pair\n        pairs = [(\"s\", square), (\"c\", circle)]\n        my_dict = VDict(pairs, show_keys=True)\n\n        # display it just like a VGroup\n        self.play(Create(my_dict))\n        self.wait()\n\n        text = Tex(\"Some text\").set_color(GREEN).next_to(square, DOWN)\n\n        # add a key-value pair by wrapping it in a single-element list of tuple\n        # after attrs branch is merged, it will be easier like `.add(t=text)`\n        my_dict.add([(\"t\", text)])\n        self.wait()\n\n        rect = Rectangle().next_to(text, DOWN)\n        # can also do key assignment like a python dict\n        my_dict[\"r\"] = rect\n\n        # access submobjects like a python dict\n        my_dict[\"t\"].set_color(PURPLE)\n        self.play(my_dict[\"t\"].animate.scale(3))\n        self.wait()\n\n        # also supports python dict styled reassignment\n        my_dict[\"t\"] = Tex(\"Some other text\").set_color(BLUE)\n        self.wait()\n\n        # remove submobject by key\n        my_dict.remove(\"t\")\n        self.wait()\n\n        self.play(Uncreate(my_dict[\"s\"]))\n        self.wait()\n\n        self.play(FadeOut(my_dict[\"c\"]))\n        self.wait()\n\n        self.play(FadeOut(my_dict[\"r\"], shift=DOWN))\n        self.wait()\n\n        # you can also make a VDict from an existing dict of mobjects\n        plain_dict = {\n            1: Integer(1).shift(DOWN),\n            2: Integer(2).shift(2 * DOWN),\n            3: Integer(3).shift(3 * DOWN),\n        }\n\n        vdict_from_plain_dict = VDict(plain_dict)\n        vdict_from_plain_dict.shift(1.5 * (UP + LEFT))\n        self.play(Create(vdict_from_plain_dict))\n\n        # you can even use zip\n        vdict_using_zip = VDict(zip([\"s\", \"c\", \"r\"], [Square(), Circle(), Rectangle()]))\n        vdict_using_zip.shift(1.5 * RIGHT)\n        self.play(Create(vdict_using_zip))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a solid red square at the center of the screen with four labeled dots placed around its corners:  \n- A red-labeled dot with \"42\" at the upper left,  \n- A green-labeled dot with \"a\" at the upper right,  \n- A blue-labeled dot with \"ii\" at the lower left,  \n- A default-labeled dot with \"3\" at the lower right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SeveralLabeledDots(Scene):\n    def construct(self):\n        sq = Square(fill_color=RED, fill_opacity=1)\n        self.add(sq)\n        dot1 = LabeledDot(Tex(\"42\", color=RED))\n        dot2 = LabeledDot(MathTex(\"a\", color=GREEN))\n        dot3 = LabeledDot(Text(\"ii\", color=BLUE))\n        dot4 = LabeledDot(\"3\")\n        dot1.next_to(sq, UL)\n        dot2.next_to(sq, UR)\n        dot3.next_to(sq, DL)\n        dot4.next_to(sq, DR)\n        self.add(dot1, dot2, dot3, dot4)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a solid red square at the center of the screen with four labeled dots placed around its corners:  \n- A red-labeled dot with \"42\" at the upper left,  \n- A green-labeled dot with \"a\" at the upper right,  \n- A blue-labeled dot with \"ii\" at the lower left,  \n- A default-labeled dot with \"3\" at the lower right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SeveralLabeledDots(Scene):\n    def construct(self):\n        sq = Square(fill_color=RED, fill_opacity=1)\n        self.add(sq)\n        dot1 = LabeledDot(Tex(\"42\", color=RED))\n        dot2 = LabeledDot(MathTex(\"a\", color=GREEN))\n        dot3 = LabeledDot(Text(\"ii\", color=BLUE))\n        dot4 = LabeledDot(\"3\")\n        dot1.next_to(sq, UL)\n        dot2.next_to(sq, UR)\n        dot3.next_to(sq, DL)\n        dot4.next_to(sq, DR)\n        self.add(dot1, dot2, dot3, dot4)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a solid red square at the center of the screen with four labeled dots placed around its corners:  \n- A red-labeled dot with \"42\" at the upper left,  \n- A green-labeled dot with \"a\" at the upper right,  \n- A blue-labeled dot with \"ii\" at the lower left,  \n- A default-labeled dot with \"3\" at the lower right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SeveralLabeledDots(Scene):\n    def construct(self):\n        sq = Square(fill_color=RED, fill_opacity=1)\n        self.add(sq)\n        dot1 = LabeledDot(Tex(\"42\", color=RED))\n        dot2 = LabeledDot(MathTex(\"a\", color=GREEN))\n        dot3 = LabeledDot(Text(\"ii\", color=BLUE))\n        dot4 = LabeledDot(\"3\")\n        dot1.next_to(sq, UL)\n        dot2.next_to(sq, UR)\n        dot3.next_to(sq, DL)\n        dot4.next_to(sq, DR)\n        self.add(dot1, dot2, dot3, dot4)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a mathematical formula centered on screen:  \n$$\\int_a^b f'(x)\\, dx = f(b) - f(a)$$  \nThis represents the Fundamental Theorem of Calculus, showing the relationship between a function\u2019s derivative and its definite integral."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Formula(Scene):\n    def construct(self):\n        t = MathTex(r\"\\int_a^b f'(x) dx = f(b)- f(a)\")\n        self.add(t)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a mathematical formula centered on screen:  \n$$\\int_a^b f'(x)\\, dx = f(b) - f(a)$$  \nThis represents the Fundamental Theorem of Calculus, showing the relationship between a function\u2019s derivative and its definite integral."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Formula(Scene):\n    def construct(self):\n        t = MathTex(r\"\\int_a^b f'(x) dx = f(b)- f(a)\")\n        self.add(t)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a mathematical formula centered on screen:  \n$$\\int_a^b f'(x)\\, dx = f(b) - f(a)$$  \nThis represents the Fundamental Theorem of Calculus, showing the relationship between a function\u2019s derivative and its definite integral."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Formula(Scene):\n    def construct(self):\n        t = MathTex(r\"\\int_a^b f'(x) dx = f(b)- f(a)\")\n        self.add(t)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \"This is some \\LaTeX\" and the mathematical expression \\(\\sum_{n=1}^\\infty \\frac{1}{n^2} = \\frac{\\pi^2}{6}\\) arranged vertically. Write the text and fade in the expression from above. Transform the text to \"That was a transform\" and move it to the upper left corner while fading out the expression. Display a number plane with the text \"This is a grid\" on top. Fade out the previous text and fade in the new text while creating the grid. Apply a non-linear transformation to the grid and update the text to \"That was a non-linear function applied to the grid.\""}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass OpeningManim(Scene):\n    def construct(self):\n        title = Tex(r\"This is some \\LaTeX\")\n        basel = MathTex(r\"\\sum_{n=1}^\\infty \\frac{1}{n^2} = \\frac{\\pi^2}{6}\")\n        VGroup(title, basel).arrange(DOWN)\n        self.play(\n            Write(title),\n            FadeIn(basel, shift=DOWN),\n        )\n        self.wait()\n\n        transform_title = Tex(\"That was a transform\")\n        transform_title.to_corner(UP + LEFT)\n        self.play(\n            Transform(title, transform_title),\n            LaggedStart(*[FadeOut(obj, shift=DOWN) for obj in basel]),\n        )\n        self.wait()\n\n        grid = NumberPlane()\n        grid_title = Tex(\"This is a grid\", font_size=72)\n        grid_title.move_to(transform_title)\n\n        self.add(grid, grid_title)  # Make sure title is on top of grid\n        self.play(\n            FadeOut(title),\n            FadeIn(grid_title, shift=UP),\n            Create(grid, run_time=3, lag_ratio=0.1),\n        )\n        self.wait()\n\n        grid_transform_title = Tex(\n            r\"That was a non-linear function \\\\ applied to the grid\"\n        )\n        grid_transform_title.move_to(grid_title, UL)\n        grid.prepare_for_nonlinear_transform()\n        self.play(\n            grid.animate.apply_function(\n                lambda p: p\n                          + np.array(\n                    [\n                        np.sin(p[1]),\n                        np.sin(p[0]),\n                        0,\n                    ]\n                )\n            ),\n            run_time=3,\n        )\n        self.wait()\n        self.play(Transform(grid_title, grid_transform_title))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \"This is some \\LaTeX\" and the mathematical expression \\(\\sum_{n=1}^\\infty \\frac{1}{n^2} = \\frac{\\pi^2}{6}\\) arranged vertically. Write the text and fade in the expression from above. Transform the text to \"That was a transform\" and move it to the upper left corner while fading out the expression. Display a number plane with the text \"This is a grid\" on top. Fade out the previous text and fade in the new text while creating the grid. Apply a non-linear transformation to the grid and update the text to \"That was a non-linear function applied to the grid.\""}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass OpeningManim(Scene):\n    def construct(self):\n        title = Tex(r\"This is some \\LaTeX\")\n        basel = MathTex(r\"\\sum_{n=1}^\\infty \\frac{1}{n^2} = \\frac{\\pi^2}{6}\")\n        VGroup(title, basel).arrange(DOWN)\n        self.play(\n            Write(title),\n            FadeIn(basel, shift=DOWN),\n        )\n        self.wait()\n\n        transform_title = Tex(\"That was a transform\")\n        transform_title.to_corner(UP + LEFT)\n        self.play(\n            Transform(title, transform_title),\n            LaggedStart(*[FadeOut(obj, shift=DOWN) for obj in basel]),\n        )\n        self.wait()\n\n        grid = NumberPlane()\n        grid_title = Tex(\"This is a grid\", font_size=72)\n        grid_title.move_to(transform_title)\n\n        self.add(grid, grid_title)  # Make sure title is on top of grid\n        self.play(\n            FadeOut(title),\n            FadeIn(grid_title, shift=UP),\n            Create(grid, run_time=3, lag_ratio=0.1),\n        )\n        self.wait()\n\n        grid_transform_title = Tex(\n            r\"That was a non-linear function \\\\ applied to the grid\"\n        )\n        grid_transform_title.move_to(grid_title, UL)\n        grid.prepare_for_nonlinear_transform()\n        self.play(\n            grid.animate.apply_function(\n                lambda p: p\n                          + np.array(\n                    [\n                        np.sin(p[1]),\n                        np.sin(p[0]),\n                        0,\n                    ]\n                )\n            ),\n            run_time=3,\n        )\n        self.wait()\n        self.play(Transform(grid_title, grid_transform_title))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the text \"This is some \\LaTeX\" and the mathematical expression \\(\\sum_{n=1}^\\infty \\frac{1}{n^2} = \\frac{\\pi^2}{6}\\) arranged vertically. Write the text and fade in the expression from above. Transform the text to \"That was a transform\" and move it to the upper left corner while fading out the expression. Display a number plane with the text \"This is a grid\" on top. Fade out the previous text and fade in the new text while creating the grid. Apply a non-linear transformation to the grid and update the text to \"That was a non-linear function applied to the grid.\""}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass OpeningManim(Scene):\n    def construct(self):\n        title = Tex(r\"This is some \\LaTeX\")\n        basel = MathTex(r\"\\sum_{n=1}^\\infty \\frac{1}{n^2} = \\frac{\\pi^2}{6}\")\n        VGroup(title, basel).arrange(DOWN)\n        self.play(\n            Write(title),\n            FadeIn(basel, shift=DOWN),\n        )\n        self.wait()\n\n        transform_title = Tex(\"That was a transform\")\n        transform_title.to_corner(UP + LEFT)\n        self.play(\n            Transform(title, transform_title),\n            LaggedStart(*[FadeOut(obj, shift=DOWN) for obj in basel]),\n        )\n        self.wait()\n\n        grid = NumberPlane()\n        grid_title = Tex(\"This is a grid\", font_size=72)\n        grid_title.move_to(transform_title)\n\n        self.add(grid, grid_title)  # Make sure title is on top of grid\n        self.play(\n            FadeOut(title),\n            FadeIn(grid_title, shift=UP),\n            Create(grid, run_time=3, lag_ratio=0.1),\n        )\n        self.wait()\n\n        grid_transform_title = Tex(\n            r\"That was a non-linear function \\\\ applied to the grid\"\n        )\n        grid_transform_title.move_to(grid_title, UL)\n        grid.prepare_for_nonlinear_transform()\n        self.play(\n            grid.animate.apply_function(\n                lambda p: p\n                          + np.array(\n                    [\n                        np.sin(p[1]),\n                        np.sin(p[0]),\n                        0,\n                    ]\n                )\n            ),\n            run_time=3,\n        )\n        self.wait()\n        self.play(Transform(grid_title, grid_transform_title))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the phrase \"the morse code\" at the center of the screen. After a brief pause, the letters animate and rearrange themselves along curved paths into the phrase \"here come dots,\" visually illustrating the anagram transformation with a smooth and dynamic motion."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Anagram(Scene):\n    def construct(self):\n        src = Text(\"the morse code\")\n        tar = Text(\"here come dots\")\n        self.play(Write(src))\n        self.wait(0.5)\n        self.play(TransformMatchingShapes(src, tar, path_arc=PI/2))\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the phrase \"the morse code\" at the center of the screen. After a brief pause, the letters animate and rearrange themselves along curved paths into the phrase \"here come dots,\" visually illustrating the anagram transformation with a smooth and dynamic motion."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Anagram(Scene):\n    def construct(self):\n        src = Text(\"the morse code\")\n        tar = Text(\"here come dots\")\n        self.play(Write(src))\n        self.wait(0.5)\n        self.play(TransformMatchingShapes(src, tar, path_arc=PI/2))\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \u201cAlice and Bob\u201d in large font on the screen, then animate it being erased in reverse, as if unwriting it."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UnwriteReverseTrue(Scene):\n    def construct(self):\n        text = Tex(\"Alice and Bob\").scale(3)\n        self.add(text)\n        self.play(Unwrite(text))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \u201cAlice and Bob\u201d in large font on the screen, then animate it being erased in reverse, as if unwriting it."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UnwriteReverseTrue(Scene):\n    def construct(self):\n        text = Tex(\"Alice and Bob\").scale(3)\n        self.add(text)\n        self.play(Unwrite(text))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the text \u201cAlice and Bob\u201d in large font on the screen, then animate it being erased in reverse, as if unwriting it."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UnwriteReverseTrue(Scene):\n    def construct(self):\n        text = Tex(\"Alice and Bob\").scale(3)\n        self.add(text)\n        self.play(Unwrite(text))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a pink circle with 50% transparency centered on the screen. Then, show a blue square with 50% transparency positioned to the right of the circle, with a small gap between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SquareAndCircle(Scene):\n    def construct(self):\n        circle = Circle()  # create a circle\n        circle.set_fill(PINK, opacity=0.5)  # set the color and transparency\n\n        square = Square()  # create a square\n        square.set_fill(BLUE, opacity=0.5)  # set the color and transparency\n\n        square.next_to(circle, RIGHT, buff=0.5)  # set the position\n        self.play(Create(circle), Create(square))  # show the shapes on screen\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a pink circle with 50% transparency centered on the screen. Then, show a blue square with 50% transparency positioned to the right of the circle, with a small gap between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SquareAndCircle(Scene):\n    def construct(self):\n        circle = Circle()  # create a circle\n        circle.set_fill(PINK, opacity=0.5)  # set the color and transparency\n\n        square = Square()  # create a square\n        square.set_fill(BLUE, opacity=0.5)  # set the color and transparency\n\n        square.next_to(circle, RIGHT, buff=0.5)  # set the position\n        self.play(Create(circle), Create(square))  # show the shapes on screen\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a pink circle with 50% transparency centered on the screen. Then, show a blue square with 50% transparency positioned to the right of the circle, with a small gap between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SquareAndCircle(Scene):\n    def construct(self):\n        circle = Circle()  # create a circle\n        circle.set_fill(PINK, opacity=0.5)  # set the color and transparency\n\n        square = Square()  # create a square\n        square.set_fill(BLUE, opacity=0.5)  # set the color and transparency\n\n        square.next_to(circle, RIGHT, buff=0.5)  # set the position\n        self.play(Create(circle), Create(square))  # show the shapes on screen\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 table with row and column labels. Each label\u2014both row and column\u2014is colored differently using blue, green, yellow, and red, making them visually distinct from the table entries."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        lab = table.get_labels()\n        colors = [BLUE, GREEN, YELLOW, RED]\n        for k in range(len(colors)):\n            lab[k].set_color(colors[k])\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 table with row and column labels. Each label\u2014both row and column\u2014is colored differently using blue, green, yellow, and red, making them visually distinct from the table entries."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        lab = table.get_labels()\n        colors = [BLUE, GREEN, YELLOW, RED]\n        for k in range(len(colors)):\n            lab[k].set_color(colors[k])\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 2\u00d72 table with row and column labels. Each label\u2014both row and column\u2014is colored differently using blue, green, yellow, and red, making them visually distinct from the table entries."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        lab = table.get_labels()\n        colors = [BLUE, GREEN, YELLOW, RED]\n        for k in range(len(colors)):\n            lab[k].set_color(colors[k])\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a vector field where each arrow points away from a vertical line on the left, with direction determined by subtracting a fixed leftward vector. The arrows are color-coded based on their magnitude, transitioning through red, yellow, blue, and dark gray. Two reference circles are shown on the left: a small red circle representing the minimum magnitude and a large dark gray circle representing the maximum magnitude used for the color scheme."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Coloring(Scene):\n    def construct(self):\n        func = lambda pos: pos - LEFT * 5\n        colors = [RED, YELLOW, BLUE, DARK_GRAY]\n        min_radius = Circle(radius=2, color=colors[0]).shift(LEFT * 5)\n        max_radius = Circle(radius=10, color=colors[-1]).shift(LEFT * 5)\n        vf = ArrowVectorField(\n            func, min_color_scheme_value=2, max_color_scheme_value=10, colors=colors\n        )\n        self.add(vf, min_radius, max_radius)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a vector field where each arrow points away from a vertical line on the left, with direction determined by subtracting a fixed leftward vector. The arrows are color-coded based on their magnitude, transitioning through red, yellow, blue, and dark gray. Two reference circles are shown on the left: a small red circle representing the minimum magnitude and a large dark gray circle representing the maximum magnitude used for the color scheme."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Coloring(Scene):\n    def construct(self):\n        func = lambda pos: pos - LEFT * 5\n        colors = [RED, YELLOW, BLUE, DARK_GRAY]\n        min_radius = Circle(radius=2, color=colors[0]).shift(LEFT * 5)\n        max_radius = Circle(radius=10, color=colors[-1]).shift(LEFT * 5)\n        vf = ArrowVectorField(\n            func, min_color_scheme_value=2, max_color_scheme_value=10, colors=colors\n        )\n        self.add(vf, min_radius, max_radius)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a vector field where each arrow points away from a vertical line on the left, with direction determined by subtracting a fixed leftward vector. The arrows are color-coded based on their magnitude, transitioning through red, yellow, blue, and dark gray. Two reference circles are shown on the left: a small red circle representing the minimum magnitude and a large dark gray circle representing the maximum magnitude used for the color scheme."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Coloring(Scene):\n    def construct(self):\n        func = lambda pos: pos - LEFT * 5\n        colors = [RED, YELLOW, BLUE, DARK_GRAY]\n        min_radius = Circle(radius=2, color=colors[0]).shift(LEFT * 5)\n        max_radius = Circle(radius=10, color=colors[-1]).shift(LEFT * 5)\n        vf = ArrowVectorField(\n            func, min_color_scheme_value=2, max_color_scheme_value=10, colors=colors\n        )\n        self.add(vf, min_radius, max_radius)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a square, a circle, a triangle, an arrow, and a star arranged in two rows. Animate the square growing from the center of the screen, the circle expanding outward from its center, the triangle growing upward from its bottom edge, the arrow extending from left to right, and the star spinning into view from nothing."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Growing(Scene):\n    def construct(self):\n        square = Square()\n        circle = Circle()\n        triangle = Triangle()\n        arrow = Arrow(LEFT, RIGHT)\n        star = Star()\n\n        VGroup(square, circle, triangle).set_x(0).arrange(buff=1.5).set_y(2)\n        VGroup(arrow, star).move_to(DOWN).set_x(0).arrange(buff=1.5).set_y(-2)\n\n        self.play(GrowFromPoint(square, ORIGIN))\n        self.play(GrowFromCenter(circle))\n        self.play(GrowFromEdge(triangle, DOWN))\n        self.play(GrowArrow(arrow))\n        self.play(SpinInFromNothing(star))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a square, a circle, a triangle, an arrow, and a star arranged in two rows. Animate the square growing from the center of the screen, the circle expanding outward from its center, the triangle growing upward from its bottom edge, the arrow extending from left to right, and the star spinning into view from nothing."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Growing(Scene):\n    def construct(self):\n        square = Square()\n        circle = Circle()\n        triangle = Triangle()\n        arrow = Arrow(LEFT, RIGHT)\n        star = Star()\n\n        VGroup(square, circle, triangle).set_x(0).arrange(buff=1.5).set_y(2)\n        VGroup(arrow, star).move_to(DOWN).set_x(0).arrange(buff=1.5).set_y(-2)\n\n        self.play(GrowFromPoint(square, ORIGIN))\n        self.play(GrowFromCenter(circle))\n        self.play(GrowFromEdge(triangle, DOWN))\n        self.play(GrowArrow(arrow))\n        self.play(SpinInFromNothing(star))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three circles arranged horizontally across the screen: a plain black circle on the left, a larger green-outlined circle in the center, and a fully filled blue circle on the right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CircleExample(Scene):\n    def construct(self):\n        circle_1 = Circle(radius=1.0)\n        circle_2 = Circle(radius=1.5, color=GREEN)\n        circle_3 = Circle(radius=1.0, color=BLUE_B, fill_opacity=1)\n\n        circle_group = Group(circle_1, circle_2, circle_3).arrange(buff=1)\n        self.add(circle_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three circles arranged horizontally across the screen: a plain black circle on the left, a larger green-outlined circle in the center, and a fully filled blue circle on the right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CircleExample(Scene):\n    def construct(self):\n        circle_1 = Circle(radius=1.0)\n        circle_2 = Circle(radius=1.5, color=GREEN)\n        circle_3 = Circle(radius=1.0, color=BLUE_B, fill_opacity=1)\n\n        circle_group = Group(circle_1, circle_2, circle_3).arrange(buff=1)\n        self.add(circle_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of axes and plot the sine curve in blue. Show an orange dot at the start of the curve and two additional dots at the start and end of the curve. Zoom in the camera to follow the orange dot as it moves along the sine curve. At the end of the video restore the camera to its original state. "}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FollowingGraphCamera(MovingCameraScene):\n    def construct(self):\n        self.camera.frame.save_state()\n\n        # create the axes and the curve\n        ax = Axes(x_range=[-1, 10], y_range=[-1, 10])\n        graph = ax.plot(lambda x: np.sin(x), color=BLUE, x_range=[0, 3 * PI])\n\n        # create dots based on the graph\n        moving_dot = Dot(ax.i2gp(graph.t_min, graph), color=ORANGE)\n        dot_1 = Dot(ax.i2gp(graph.t_min, graph))\n        dot_2 = Dot(ax.i2gp(graph.t_max, graph))\n\n        self.add(ax, graph, dot_1, dot_2, moving_dot)\n        self.play(self.camera.frame.animate.scale(0.5).move_to(moving_dot))\n\n        def update_curve(mob):\n            mob.move_to(moving_dot.get_center())\n\n        self.camera.frame.add_updater(update_curve)\n        self.play(MoveAlongPath(moving_dot, graph, rate_func=linear))\n        self.camera.frame.remove_updater(update_curve)\n\n        self.play(Restore(self.camera.frame))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of axes and plot the sine curve in blue. Show an orange dot at the start of the curve and two additional dots at the start and end of the curve. Zoom in the camera to follow the orange dot as it moves along the sine curve. At the end of the video restore the camera to its original state. "}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FollowingGraphCamera(MovingCameraScene):\n    def construct(self):\n        self.camera.frame.save_state()\n\n        # create the axes and the curve\n        ax = Axes(x_range=[-1, 10], y_range=[-1, 10])\n        graph = ax.plot(lambda x: np.sin(x), color=BLUE, x_range=[0, 3 * PI])\n\n        # create dots based on the graph\n        moving_dot = Dot(ax.i2gp(graph.t_min, graph), color=ORANGE)\n        dot_1 = Dot(ax.i2gp(graph.t_min, graph))\n        dot_2 = Dot(ax.i2gp(graph.t_max, graph))\n\n        self.add(ax, graph, dot_1, dot_2, moving_dot)\n        self.play(self.camera.frame.animate.scale(0.5).move_to(moving_dot))\n\n        def update_curve(mob):\n            mob.move_to(moving_dot.get_center())\n\n        self.camera.frame.add_updater(update_curve)\n        self.play(MoveAlongPath(moving_dot, graph, rate_func=linear))\n        self.camera.frame.remove_updater(update_curve)\n\n        self.play(Restore(self.camera.frame))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a set of axes and plot the sine curve in blue. Show an orange dot at the start of the curve and two additional dots at the start and end of the curve. Zoom in the camera to follow the orange dot as it moves along the sine curve. At the end of the video restore the camera to its original state. "}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FollowingGraphCamera(MovingCameraScene):\n    def construct(self):\n        self.camera.frame.save_state()\n\n        # create the axes and the curve\n        ax = Axes(x_range=[-1, 10], y_range=[-1, 10])\n        graph = ax.plot(lambda x: np.sin(x), color=BLUE, x_range=[0, 3 * PI])\n\n        # create dots based on the graph\n        moving_dot = Dot(ax.i2gp(graph.t_min, graph), color=ORANGE)\n        dot_1 = Dot(ax.i2gp(graph.t_min, graph))\n        dot_2 = Dot(ax.i2gp(graph.t_max, graph))\n\n        self.add(ax, graph, dot_1, dot_2, moving_dot)\n        self.play(self.camera.frame.animate.scale(0.5).move_to(moving_dot))\n\n        def update_curve(mob):\n            mob.move_to(moving_dot.get_center())\n\n        self.camera.frame.add_updater(update_curve)\n        self.play(MoveAlongPath(moving_dot, graph, rate_func=linear))\n        self.camera.frame.remove_updater(update_curve)\n\n        self.play(Restore(self.camera.frame))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a graph with six labeled nodes arranged using the Kamada-Kawai layout algorithm, which positions nodes based on specified ideal distances between them. The nodes are connected in a loop, and the layout reflects the varying desired distances between connected pairs\u2014ranging from short to long\u2014resulting in a non-uniform, organically spaced circular structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass KamadaKawaiLayout(Scene):\n    def construct(self):\n        from collections import defaultdict\n        distances: dict[int, dict[int, float]] = defaultdict(dict)\n\n        # set desired distances\n        distances[1][2] = 1  # distance between vertices 1 and 2 is 1\n        distances[2][3] = 1  # distance between vertices 2 and 3 is 1\n        distances[3][4] = 2  # etc\n        distances[4][5] = 3\n        distances[5][6] = 5\n        distances[6][1] = 8\n\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1)],\n            layout=\"kamada_kawai\",\n            layout_config={\"dist\": distances},\n            layout_scale=4,\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a graph with six labeled nodes arranged using the Kamada-Kawai layout algorithm, which positions nodes based on specified ideal distances between them. The nodes are connected in a loop, and the layout reflects the varying desired distances between connected pairs\u2014ranging from short to long\u2014resulting in a non-uniform, organically spaced circular structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass KamadaKawaiLayout(Scene):\n    def construct(self):\n        from collections import defaultdict\n        distances: dict[int, dict[int, float]] = defaultdict(dict)\n\n        # set desired distances\n        distances[1][2] = 1  # distance between vertices 1 and 2 is 1\n        distances[2][3] = 1  # distance between vertices 2 and 3 is 1\n        distances[3][4] = 2  # etc\n        distances[4][5] = 3\n        distances[5][6] = 5\n        distances[6][1] = 8\n\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1)],\n            layout=\"kamada_kawai\",\n            layout_config={\"dist\": distances},\n            layout_scale=4,\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D coordinate system using axes, with a 3D arrow originating from the origin (0, 0, 0) and pointing to the point (2, 2, 2). The arrow is rendered with a smooth resolution, and the camera is set at a 75\u00b0 vertical angle and a 30\u00b0 horizontal angle to provide a clear, tilted view of the arrow in 3D space."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleArrow3D(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        arrow = Arrow3D(\n            start=np.array([0, 0, 0]),\n            end=np.array([2, 2, 2]),\n            resolution=8\n        )\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(axes, arrow)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D coordinate system using axes, with a 3D arrow originating from the origin (0, 0, 0) and pointing to the point (2, 2, 2). The arrow is rendered with a smooth resolution, and the camera is set at a 75\u00b0 vertical angle and a 30\u00b0 horizontal angle to provide a clear, tilted view of the arrow in 3D space."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleArrow3D(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        arrow = Arrow3D(\n            start=np.array([0, 0, 0]),\n            end=np.array([2, 2, 2]),\n            resolution=8\n        )\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(axes, arrow)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 3D coordinate system using axes, with a 3D arrow originating from the origin (0, 0, 0) and pointing to the point (2, 2, 2). The arrow is rendered with a smooth resolution, and the camera is set at a 75\u00b0 vertical angle and a 30\u00b0 horizontal angle to provide a clear, tilted view of the arrow in 3D space."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleArrow3D(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        arrow = Arrow3D(\n            start=np.array([0, 0, 0]),\n            end=np.array([2, 2, 2]),\n            resolution=8\n        )\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(axes, arrow)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a randomly generated graph with 14 nodes and edges based on the Erd\u0151s\u2013R\u00e9nyi model, arranged using a spring layout. After the graph is created, each node animates to a new position along an elliptical path, forming a smooth arc across the screen. Finally, the entire graph is removed from view."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nimport networkx as nx\n\nnxgraph = nx.erdos_renyi_graph(14, 0.5)\n\nclass ImportNetworkxGraph(Scene):\n    def construct(self):\n        G = Graph.from_networkx(nxgraph, layout=\"spring\", layout_scale=3.5)\n        self.play(Create(G))\n        self.play(*[G[v].animate.move_to(5*RIGHT*np.cos(ind/7 * PI) +\n                                         3*UP*np.sin(ind/7 * PI))\n                    for ind, v in enumerate(G.vertices)])\n        self.play(Uncreate(G))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a randomly generated graph with 14 nodes and edges based on the Erd\u0151s\u2013R\u00e9nyi model, arranged using a spring layout. After the graph is created, each node animates to a new position along an elliptical path, forming a smooth arc across the screen. Finally, the entire graph is removed from view."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nimport networkx as nx\n\nnxgraph = nx.erdos_renyi_graph(14, 0.5)\n\nclass ImportNetworkxGraph(Scene):\n    def construct(self):\n        G = Graph.from_networkx(nxgraph, layout=\"spring\", layout_scale=3.5)\n        self.play(Create(G))\n        self.play(*[G[v].animate.move_to(5*RIGHT*np.cos(ind/7 * PI) +\n                                         3*UP*np.sin(ind/7 * PI))\n                    for ind, v in enumerate(G.vertices)])\n        self.play(Uncreate(G))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a red dot starting on the right side of the screen. As it moves left in two curved arcs, it leaves behind a fading trail. The trail gradually disappears over time, creating a dissipating path effect with a short persistence of 0.5 seconds."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DissipatingPathExample(Scene):\n    def construct(self):\n        a = Dot(RIGHT * 2)\n        b = TracedPath(a.get_center, dissipating_time=0.5, stroke_opacity=[0, 1])\n        self.add(a, b)\n        self.play(a.animate(path_arc=PI / 4).shift(LEFT * 2))\n        self.play(a.animate(path_arc=-PI / 4).shift(LEFT * 2))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a red dot starting on the right side of the screen. As it moves left in two curved arcs, it leaves behind a fading trail. The trail gradually disappears over time, creating a dissipating path effect with a short persistence of 0.5 seconds."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DissipatingPathExample(Scene):\n    def construct(self):\n        a = Dot(RIGHT * 2)\n        b = TracedPath(a.get_center, dissipating_time=0.5, stroke_opacity=[0, 1])\n        self.add(a, b)\n        self.play(a.animate(path_arc=PI / 4).shift(LEFT * 2))\n        self.play(a.animate(path_arc=-PI / 4).shift(LEFT * 2))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D coordinate system with three colored dots placed at specific positions:\n\n1. A red dot located at the point (0, 0, 1), one unit above the origin along the Z-axis.\n2. A blue dot with a smaller radius positioned at (2, 0, 0), two units along the X-axis.\n3. An orange dot, also with a smaller radius, placed at the origin (0, 0, 0).\n\nThe camera is angled at 75\u00b0 vertically and -45\u00b0 horizontally, providing a clear, tilted view of the 3D space and the relative positions of the dots."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Dot3DExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75*DEGREES, theta=-45*DEGREES)\n\n        axes = ThreeDAxes()\n        dot_1 = Dot3D(point=axes.coords_to_point(0, 0, 1), color=RED)\n        dot_2 = Dot3D(point=axes.coords_to_point(2, 0, 0), radius=0.1, color=BLUE)\n        dot_3 = Dot3D(point=[0, 0, 0], radius=0.1, color=ORANGE)\n        self.add(axes, dot_1, dot_2,dot_3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D coordinate system with three colored dots placed at specific positions:\n\n1. A red dot located at the point (0, 0, 1), one unit above the origin along the Z-axis.\n2. A blue dot with a smaller radius positioned at (2, 0, 0), two units along the X-axis.\n3. An orange dot, also with a smaller radius, placed at the origin (0, 0, 0).\n\nThe camera is angled at 75\u00b0 vertically and -45\u00b0 horizontally, providing a clear, tilted view of the 3D space and the relative positions of the dots."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Dot3DExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75*DEGREES, theta=-45*DEGREES)\n\n        axes = ThreeDAxes()\n        dot_1 = Dot3D(point=axes.coords_to_point(0, 0, 1), color=RED)\n        dot_2 = Dot3D(point=axes.coords_to_point(2, 0, 0), radius=0.1, color=BLUE)\n        dot_3 = Dot3D(point=[0, 0, 0], radius=0.1, color=ORANGE)\n        self.add(axes, dot_1, dot_2,dot_3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 3D coordinate system with three colored dots placed at specific positions:\n\n1. A red dot located at the point (0, 0, 1), one unit above the origin along the Z-axis.\n2. A blue dot with a smaller radius positioned at (2, 0, 0), two units along the X-axis.\n3. An orange dot, also with a smaller radius, placed at the origin (0, 0, 0).\n\nThe camera is angled at 75\u00b0 vertically and -45\u00b0 horizontally, providing a clear, tilted view of the 3D space and the relative positions of the dots."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Dot3DExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75*DEGREES, theta=-45*DEGREES)\n\n        axes = ThreeDAxes()\n        dot_1 = Dot3D(point=axes.coords_to_point(0, 0, 1), color=RED)\n        dot_2 = Dot3D(point=axes.coords_to_point(2, 0, 0), radius=0.1, color=BLUE)\n        dot_3 = Dot3D(point=[0, 0, 0], radius=0.1, color=ORANGE)\n        self.add(axes, dot_1, dot_2,dot_3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3\u00d73 grid of point cloud dots, each created with the same density and radius but progressively thinned out from left to right and top to bottom. As the scale factor increases, more points are removed from each dot, making them appear increasingly sparse across the grid."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PMobjectExample(Scene):\n    def construct(self):\n\n        pG = PGroup()  # This is just a collection of PMobject's\n\n        # As the scale factor increases, the number of points\n        # removed increases.\n        for sf in range(1, 9 + 1):\n            p = PointCloudDot(density=20, radius=1).thin_out(sf)\n            # PointCloudDot is a type of PMobject\n            # and can therefore be added to a PGroup\n            pG.add(p)\n\n        # This organizes all the shapes in a grid.\n        pG.arrange_in_grid()\n\n        self.add(pG)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3\u00d73 grid of point cloud dots, each created with the same density and radius but progressively thinned out from left to right and top to bottom. As the scale factor increases, more points are removed from each dot, making them appear increasingly sparse across the grid."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PMobjectExample(Scene):\n    def construct(self):\n\n        pG = PGroup()  # This is just a collection of PMobject's\n\n        # As the scale factor increases, the number of points\n        # removed increases.\n        for sf in range(1, 9 + 1):\n            p = PointCloudDot(density=20, radius=1).thin_out(sf)\n            # PointCloudDot is a type of PMobject\n            # and can therefore be added to a PGroup\n            pG.add(p)\n\n        # This organizes all the shapes in a grid.\n        pG.arrange_in_grid()\n\n        self.add(pG)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 3\u00d73 grid of point cloud dots, each created with the same density and radius but progressively thinned out from left to right and top to bottom. As the scale factor increases, more points are removed from each dot, making them appear increasingly sparse across the grid."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PMobjectExample(Scene):\n    def construct(self):\n\n        pG = PGroup()  # This is just a collection of PMobject's\n\n        # As the scale factor increases, the number of points\n        # removed increases.\n        for sf in range(1, 9 + 1):\n            p = PointCloudDot(density=20, radius=1).thin_out(sf)\n            # PointCloudDot is a type of PMobject\n            # and can therefore be added to a PGroup\n            pG.add(p)\n\n        # This organizes all the shapes in a grid.\n        pG.arrange_in_grid()\n\n        self.add(pG)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a vector field using arrows, where each arrow's direction is determined by a sine and cosine-based function. Initially, the arrows are evenly spaced along the x-axis from -7 to 7 with default lengths. Then, the arrows smoothly transform to new lengths based on a custom scaling function, making them shorter or longer depending on their original magnitude."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SizingAndSpacing(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[0] / 2) * UR + np.cos(pos[1] / 2) * LEFT\n        vf = ArrowVectorField(func, x_range=[-7, 7, 1])\n        self.add(vf)\n        self.wait()\n\n        length_func = lambda x: x / 3\n        vf2 = ArrowVectorField(func, x_range=[-7, 7, 1], length_func=length_func)\n        self.play(vf.animate.become(vf2))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a vector field using arrows, where each arrow's direction is determined by a sine and cosine-based function. Initially, the arrows are evenly spaced along the x-axis from -7 to 7 with default lengths. Then, the arrows smoothly transform to new lengths based on a custom scaling function, making them shorter or longer depending on their original magnitude."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SizingAndSpacing(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[0] / 2) * UR + np.cos(pos[1] / 2) * LEFT\n        vf = ArrowVectorField(func, x_range=[-7, 7, 1])\n        self.add(vf)\n        self.wait()\n\n        length_func = lambda x: x / 3\n        vf2 = ArrowVectorField(func, x_range=[-7, 7, 1], length_func=length_func)\n        self.play(vf.animate.become(vf2))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a vector field using arrows, where each arrow's direction is determined by a sine and cosine-based function. Initially, the arrows are evenly spaced along the x-axis from -7 to 7 with default lengths. Then, the arrows smoothly transform to new lengths based on a custom scaling function, making them shorter or longer depending on their original magnitude."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SizingAndSpacing(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[0] / 2) * UR + np.cos(pos[1] / 2) * LEFT\n        vf = ArrowVectorField(func, x_range=[-7, 7, 1])\n        self.add(vf)\n        self.wait()\n\n        length_func = lambda x: x / 3\n        vf2 = ArrowVectorField(func, x_range=[-7, 7, 1], length_func=length_func)\n        self.play(vf.animate.become(vf2))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a square at the center of the screen that continuously rotates clockwise at a rate of 90 degrees per second for two seconds."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DtUpdater(Scene):\n    def construct(self):\n        square = Square()\n\n        #Let the square rotate 90\u00b0 per second\n        square.add_updater(lambda mobject, dt: mobject.rotate(dt*90*DEGREES))\n        self.add(square)\n        self.wait(2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a square at the center of the screen that continuously rotates clockwise at a rate of 90 degrees per second for two seconds."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DtUpdater(Scene):\n    def construct(self):\n        square = Square()\n\n        #Let the square rotate 90\u00b0 per second\n        square.add_updater(lambda mobject, dt: mobject.rotate(dt*90*DEGREES))\n        self.add(square)\n        self.wait(2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a square at the center of the screen that continuously rotates clockwise at a rate of 90 degrees per second for two seconds."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DtUpdater(Scene):\n    def construct(self):\n        square = Square()\n\n        #Let the square rotate 90\u00b0 per second\n        square.add_updater(lambda mobject, dt: mobject.rotate(dt*90*DEGREES))\n        self.add(square)\n        self.wait(2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display four colored dots in the corners of a square: blue at top-left, maroon at bottom-left, green at bottom-right, and yellow at top-right. Then animate each dot moving in succession to the position of the next: blue moves to maroon\u2019s position, maroon to green\u2019s, green to yellow\u2019s, and yellow to blue\u2019s original position."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SuccessionExample(Scene):\n    def construct(self):\n        dot1 = Dot(point=LEFT * 2 + UP * 2, radius=0.16, color=BLUE)\n        dot2 = Dot(point=LEFT * 2 + DOWN * 2, radius=0.16, color=MAROON)\n        dot3 = Dot(point=RIGHT * 2 + DOWN * 2, radius=0.16, color=GREEN)\n        dot4 = Dot(point=RIGHT * 2 + UP * 2, radius=0.16, color=YELLOW)\n        self.add(dot1, dot2, dot3, dot4)\n\n        self.play(Succession(\n            dot1.animate.move_to(dot2),\n            dot2.animate.move_to(dot3),\n            dot3.animate.move_to(dot4),\n            dot4.animate.move_to(dot1)\n        ))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display four colored dots in the corners of a square: blue at top-left, maroon at bottom-left, green at bottom-right, and yellow at top-right. Then animate each dot moving in succession to the position of the next: blue moves to maroon\u2019s position, maroon to green\u2019s, green to yellow\u2019s, and yellow to blue\u2019s original position."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SuccessionExample(Scene):\n    def construct(self):\n        dot1 = Dot(point=LEFT * 2 + UP * 2, radius=0.16, color=BLUE)\n        dot2 = Dot(point=LEFT * 2 + DOWN * 2, radius=0.16, color=MAROON)\n        dot3 = Dot(point=RIGHT * 2 + DOWN * 2, radius=0.16, color=GREEN)\n        dot4 = Dot(point=RIGHT * 2 + UP * 2, radius=0.16, color=YELLOW)\n        self.add(dot1, dot2, dot3, dot4)\n\n        self.play(Succession(\n            dot1.animate.move_to(dot2),\n            dot2.animate.move_to(dot3),\n            dot3.animate.move_to(dot4),\n            dot4.animate.move_to(dot1)\n        ))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a solid red square on the left and a solid blue circle overlapping it from the top right. On the right side of the screen, show a green shape representing the union\u2014combining the full areas of both the square and the circle into a single merged shape."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UnionExample(Scene):\n    def construct(self):\n        sq = Square(color=RED, fill_opacity=1)\n        sq.move_to([-2, 0, 0])\n        cr = Circle(color=BLUE, fill_opacity=1)\n        cr.move_to([-1.3, 0.7, 0])\n        un = Union(sq, cr, color=GREEN, fill_opacity=1)\n        un.move_to([1.5, 0.3, 0])\n        self.add(sq, cr, un)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a solid red square on the left and a solid blue circle overlapping it from the top right. On the right side of the screen, show a green shape representing the union\u2014combining the full areas of both the square and the circle into a single merged shape."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UnionExample(Scene):\n    def construct(self):\n        sq = Square(color=RED, fill_opacity=1)\n        sq.move_to([-2, 0, 0])\n        cr = Circle(color=BLUE, fill_opacity=1)\n        cr.move_to([-1.3, 0.7, 0])\n        un = Union(sq, cr, color=GREEN, fill_opacity=1)\n        un.move_to([1.5, 0.3, 0])\n        self.add(sq, cr, un)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a solid red square on the left and a solid blue circle overlapping it from the top right. On the right side of the screen, show a green shape representing the union\u2014combining the full areas of both the square and the circle into a single merged shape."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UnionExample(Scene):\n    def construct(self):\n        sq = Square(color=RED, fill_opacity=1)\n        sq.move_to([-2, 0, 0])\n        cr = Circle(color=BLUE, fill_opacity=1)\n        cr.move_to([-1.3, 0.7, 0])\n        un = Union(sq, cr, color=GREEN, fill_opacity=1)\n        un.move_to([1.5, 0.3, 0])\n        self.add(sq, cr, un)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a red circle with partial transparency at the center of the screen. After a brief pause, the circle instantly changes into a blue square with lower opacity, without any animation or transition."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BecomeScene(Scene):\n    def construct(self):\n        circ = Circle(fill_color=RED, fill_opacity=0.8)\n        square = Square(fill_color=BLUE, fill_opacity=0.2)\n        self.add(circ)\n        self.wait(0.5)\n        circ.become(square)\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a red circle with partial transparency at the center of the screen. After a brief pause, the circle instantly changes into a blue square with lower opacity, without any animation or transition."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BecomeScene(Scene):\n    def construct(self):\n        circ = Circle(fill_color=RED, fill_opacity=0.8)\n        square = Square(fill_color=BLUE, fill_opacity=0.2)\n        self.add(circ)\n        self.wait(0.5)\n        circ.become(square)\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 table with row and column labels. All four cell entries are colored with randomly chosen bright colors, and the bottom-right cell is additionally rotated upside down."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetEntriesExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        ent = table.get_entries()\n        for item in ent:\n            item.set_color(random_bright_color())\n        table.get_entries((2,2)).rotate(PI)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 table with row and column labels. All four cell entries are colored with randomly chosen bright colors, and the bottom-right cell is additionally rotated upside down."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetEntriesExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        ent = table.get_entries()\n        for item in ent:\n            item.set_color(random_bright_color())\n        table.get_entries((2,2)).rotate(PI)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 2\u00d72 table with row and column labels. All four cell entries are colored with randomly chosen bright colors, and the bottom-right cell is additionally rotated upside down."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetEntriesExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        ent = table.get_entries()\n        for item in ent:\n            item.set_color(random_bright_color())\n        table.get_entries((2,2)).rotate(PI)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of green axes with labels. Plot the sine function in blue and the cosine function in red. Label the sine graph with \"\\sin(x)\" and the cosine graph with \"\\cos(x)\". Draw a yellow vertical line at \\( x = 2\\pi \\) and label it."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SinAndCosFunctionPlot(Scene):\n    def construct(self):\n        axes = Axes(\n            x_range=[-10, 10.3, 1],\n            y_range=[-1.5, 1.5, 1],\n            x_length=10,\n            axis_config={\"color\": GREEN},\n            x_axis_config={\n                \"numbers_to_include\": np.arange(-10, 10.01, 2),\n                \"numbers_with_elongated_ticks\": np.arange(-10, 10.01, 2),\n            },\n            tips=False,\n        )\n        axes_labels = axes.get_axis_labels()\n        sin_graph = axes.plot(lambda x: np.sin(x), color=BLUE)\n        cos_graph = axes.plot(lambda x: np.cos(x), color=RED)\n\n        sin_label = axes.get_graph_label(\n            sin_graph, \"\\\\sin(x)\", x_val=-10, direction=UP / 2\n        )\n        cos_label = axes.get_graph_label(cos_graph, label=\"\\\\cos(x)\")\n\n        vert_line = axes.get_vertical_line(\n            axes.i2gp(TAU, cos_graph), color=YELLOW, line_func=Line\n        )\n        line_label = axes.get_graph_label(\n            cos_graph, r\"x=2\\pi\", x_val=TAU, direction=UR, color=WHITE\n        )\n\n        plot = VGroup(axes, sin_graph, cos_graph, vert_line)\n        labels = VGroup(axes_labels, sin_label, cos_label, line_label)\n        self.add(plot, labels)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of green axes with labels. Plot the sine function in blue and the cosine function in red. Label the sine graph with \"\\sin(x)\" and the cosine graph with \"\\cos(x)\". Draw a yellow vertical line at \\( x = 2\\pi \\) and label it."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SinAndCosFunctionPlot(Scene):\n    def construct(self):\n        axes = Axes(\n            x_range=[-10, 10.3, 1],\n            y_range=[-1.5, 1.5, 1],\n            x_length=10,\n            axis_config={\"color\": GREEN},\n            x_axis_config={\n                \"numbers_to_include\": np.arange(-10, 10.01, 2),\n                \"numbers_with_elongated_ticks\": np.arange(-10, 10.01, 2),\n            },\n            tips=False,\n        )\n        axes_labels = axes.get_axis_labels()\n        sin_graph = axes.plot(lambda x: np.sin(x), color=BLUE)\n        cos_graph = axes.plot(lambda x: np.cos(x), color=RED)\n\n        sin_label = axes.get_graph_label(\n            sin_graph, \"\\\\sin(x)\", x_val=-10, direction=UP / 2\n        )\n        cos_label = axes.get_graph_label(cos_graph, label=\"\\\\cos(x)\")\n\n        vert_line = axes.get_vertical_line(\n            axes.i2gp(TAU, cos_graph), color=YELLOW, line_func=Line\n        )\n        line_label = axes.get_graph_label(\n            cos_graph, r\"x=2\\pi\", x_val=TAU, direction=UR, color=WHITE\n        )\n\n        plot = VGroup(axes, sin_graph, cos_graph, vert_line)\n        labels = VGroup(axes_labels, sin_label, cos_label, line_label)\n        self.add(plot, labels)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D octahedron\u2014a polyhedron with eight triangular faces\u2014centered in the scene. The camera is positioned at a 75\u00b0 vertical angle and a 30\u00b0 horizontal angle, giving a tilted view that clearly reveals the octahedron\u2019s symmetrical structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass OctahedronScene(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        obj = Octahedron()\n        self.add(obj)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D octahedron\u2014a polyhedron with eight triangular faces\u2014centered in the scene. The camera is positioned at a 75\u00b0 vertical angle and a 30\u00b0 horizontal angle, giving a tilted view that clearly reveals the octahedron\u2019s symmetrical structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass OctahedronScene(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        obj = Octahedron()\n        self.add(obj)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 3D octahedron\u2014a polyhedron with eight triangular faces\u2014centered in the scene. The camera is positioned at a 75\u00b0 vertical angle and a 30\u00b0 horizontal angle, giving a tilted view that clearly reveals the octahedron\u2019s symmetrical structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass OctahedronScene(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        obj = Octahedron()\n        self.add(obj)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a dot at the center of the screen. Then, draw a horizontal line along the bottom edge of the frame and label it with the screen's pixel width (default is 1920). Next, draw a vertical line along the left edge of the frame and label it with the screen's pixel height (default is 1080)."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShowScreenResolution(Scene):\n    def construct(self):\n        pixel_height = config[\"pixel_height\"]  #  1080 is default\n        pixel_width = config[\"pixel_width\"]  # 1920 is default\n        frame_width = config[\"frame_width\"]\n        frame_height = config[\"frame_height\"]\n        self.add(Dot())\n        d1 = Line(frame_width * LEFT / 2, frame_width * RIGHT / 2).to_edge(DOWN)\n        self.add(d1)\n        self.add(Text(str(pixel_width)).next_to(d1, UP))\n        d2 = Line(frame_height * UP / 2, frame_height * DOWN / 2).to_edge(LEFT)\n        self.add(d2)\n        self.add(Text(str(pixel_height)).next_to(d2, RIGHT))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a dot at the center of the screen. Then, draw a horizontal line along the bottom edge of the frame and label it with the screen's pixel width (default is 1920). Next, draw a vertical line along the left edge of the frame and label it with the screen's pixel height (default is 1080)."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShowScreenResolution(Scene):\n    def construct(self):\n        pixel_height = config[\"pixel_height\"]  #  1080 is default\n        pixel_width = config[\"pixel_width\"]  # 1920 is default\n        frame_width = config[\"frame_width\"]\n        frame_height = config[\"frame_height\"]\n        self.add(Dot())\n        d1 = Line(frame_width * LEFT / 2, frame_width * RIGHT / 2).to_edge(DOWN)\n        self.add(d1)\n        self.add(Text(str(pixel_width)).next_to(d1, UP))\n        d2 = Line(frame_height * UP / 2, frame_height * DOWN / 2).to_edge(LEFT)\n        self.add(d2)\n        self.add(Text(str(pixel_height)).next_to(d2, RIGHT))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a stationary line from left to right. Show a second line rotating around a point on the left, forming an angle with the stationary line. Label the angle with the Greek letter theta (\u03b8). Animate the rotating line to change its angle, updating the angle and its label dynamically. Change the color of the theta label to red briefly."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingAngle(Scene):\n    def construct(self):\n        rotation_center = LEFT\n\n        theta_tracker = ValueTracker(110)\n        line1 = Line(LEFT, RIGHT)\n        line_moving = Line(LEFT, RIGHT)\n        line_ref = line_moving.copy()\n        line_moving.rotate(\n            theta_tracker.get_value() * DEGREES, about_point=rotation_center\n        )\n        a = Angle(line1, line_moving, radius=0.5, other_angle=False)\n        tex = MathTex(r\"\\theta\").move_to(\n            Angle(\n                line1, line_moving, radius=0.5 + 3 * SMALL_BUFF, other_angle=False\n            ).point_from_proportion(0.5)\n        )\n\n        self.add(line1, line_moving, a, tex)\n        self.wait()\n\n        line_moving.add_updater(\n            lambda x: x.become(line_ref.copy()).rotate(\n                theta_tracker.get_value() * DEGREES, about_point=rotation_center\n            )\n        )\n\n        a.add_updater(\n            lambda x: x.become(Angle(line1, line_moving, radius=0.5, other_angle=False))\n        )\n        tex.add_updater(\n            lambda x: x.move_to(\n                Angle(\n                    line1, line_moving, radius=0.5 + 3 * SMALL_BUFF, other_angle=False\n                ).point_from_proportion(0.5)\n            )\n        )\n\n        self.play(theta_tracker.animate.set_value(40))\n        self.play(theta_tracker.animate.increment_value(140))\n        self.play(tex.animate.set_color(RED), run_time=0.5)\n        self.play(theta_tracker.animate.set_value(350))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a stationary line from left to right. Show a second line rotating around a point on the left, forming an angle with the stationary line. Label the angle with the Greek letter theta (\u03b8). Animate the rotating line to change its angle, updating the angle and its label dynamically. Change the color of the theta label to red briefly."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingAngle(Scene):\n    def construct(self):\n        rotation_center = LEFT\n\n        theta_tracker = ValueTracker(110)\n        line1 = Line(LEFT, RIGHT)\n        line_moving = Line(LEFT, RIGHT)\n        line_ref = line_moving.copy()\n        line_moving.rotate(\n            theta_tracker.get_value() * DEGREES, about_point=rotation_center\n        )\n        a = Angle(line1, line_moving, radius=0.5, other_angle=False)\n        tex = MathTex(r\"\\theta\").move_to(\n            Angle(\n                line1, line_moving, radius=0.5 + 3 * SMALL_BUFF, other_angle=False\n            ).point_from_proportion(0.5)\n        )\n\n        self.add(line1, line_moving, a, tex)\n        self.wait()\n\n        line_moving.add_updater(\n            lambda x: x.become(line_ref.copy()).rotate(\n                theta_tracker.get_value() * DEGREES, about_point=rotation_center\n            )\n        )\n\n        a.add_updater(\n            lambda x: x.become(Angle(line1, line_moving, radius=0.5, other_angle=False))\n        )\n        tex.add_updater(\n            lambda x: x.move_to(\n                Angle(\n                    line1, line_moving, radius=0.5 + 3 * SMALL_BUFF, other_angle=False\n                ).point_from_proportion(0.5)\n            )\n        )\n\n        self.play(theta_tracker.animate.set_value(40))\n        self.play(theta_tracker.animate.increment_value(140))\n        self.play(tex.animate.set_color(RED), run_time=0.5)\n        self.play(theta_tracker.animate.set_value(350))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a square at the center of the screen, then animate it being warped by a complex exponential transformation. The square stretches and curves dramatically, creating a visually striking distortion that maps each point of the square through the exponential function in the complex plane."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass WarpSquare(Scene):\n    def construct(self):\n        square = Square()\n        self.play(\n            ApplyPointwiseFunction(\n                lambda point: complex_to_R3(np.exp(R3_to_complex(point))), square\n            )\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a square at the center of the screen, then animate it being warped by a complex exponential transformation. The square stretches and curves dramatically, creating a visually striking distortion that maps each point of the square through the exponential function in the complex plane."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass WarpSquare(Scene):\n    def construct(self):\n        square = Square()\n        self.play(\n            ApplyPointwiseFunction(\n                lambda point: complex_to_R3(np.exp(R3_to_complex(point))), square\n            )\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a square at the center of the screen, then animate it being warped by a complex exponential transformation. The square stretches and curves dramatically, creating a visually striking distortion that maps each point of the square through the exponential function in the complex plane."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass WarpSquare(Scene):\n    def construct(self):\n        square = Square()\n        self.play(\n            ApplyPointwiseFunction(\n                lambda point: complex_to_R3(np.exp(R3_to_complex(point))), square\n            )\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a graph with six labeled nodes arranged in a circular layout. The nodes are connected by a combination of sequential and cross-linking edges, forming a loop with additional diagonal connections between non-adjacent nodes. This creates a visually dense and interconnected circular network."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CircularLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"circular\",\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a graph with six labeled nodes arranged in a circular layout. The nodes are connected by a combination of sequential and cross-linking edges, forming a loop with additional diagonal connections between non-adjacent nodes. This creates a visually dense and interconnected circular network."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CircularLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"circular\",\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a graph with six labeled nodes arranged in a circular layout. The nodes are connected by a combination of sequential and cross-linking edges, forming a loop with additional diagonal connections between non-adjacent nodes. This creates a visually dense and interconnected circular network."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CircularLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"circular\",\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a large LaTeX-styled expression consisting of a monospaced \"H\" followed by a looped right arrow, and then the LaTeX logo."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AMSLaTeX(Scene):\n    def construct(self):\n        tex = Tex(r'$\\mathtt{H} \\looparrowright$ \\LaTeX', font_size=144)\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a large LaTeX-styled expression consisting of a monospaced \"H\" followed by a looped right arrow, and then the LaTeX logo."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AMSLaTeX(Scene):\n    def construct(self):\n        tex = Tex(r'$\\mathtt{H} \\looparrowright$ \\LaTeX', font_size=144)\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a semicircular arc centered on screen, starting from the right and sweeping counterclockwise to the left."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArcExample(Scene):\n    def construct(self):\n        self.add(Arc(angle=PI))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a semicircular arc centered on screen, starting from the right and sweeping counterclockwise to the left."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArcExample(Scene):\n    def construct(self):\n        self.add(Arc(angle=PI))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a semicircular arc centered on screen, starting from the right and sweeping counterclockwise to the left."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArcExample(Scene):\n    def construct(self):\n        self.add(Arc(angle=PI))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a solid red square on the left and a solid blue circle overlapping it from the top right. On the right side of the screen, show a green shape representing the exclusion\u2014highlighting the non-overlapping regions of both the square and the circle, with the intersecting area removed."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass IntersectionExample(Scene):\n    def construct(self):\n        sq = Square(color=RED, fill_opacity=1)\n        sq.move_to([-2, 0, 0])\n        cr = Circle(color=BLUE, fill_opacity=1)\n        cr.move_to([-1.3, 0.7, 0])\n        un = Exclusion(sq, cr, color=GREEN, fill_opacity=1)\n        un.move_to([1.5, 0.4, 0])\n        self.add(sq, cr, un)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a solid red square on the left and a solid blue circle overlapping it from the top right. On the right side of the screen, show a green shape representing the exclusion\u2014highlighting the non-overlapping regions of both the square and the circle, with the intersecting area removed."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass IntersectionExample(Scene):\n    def construct(self):\n        sq = Square(color=RED, fill_opacity=1)\n        sq.move_to([-2, 0, 0])\n        cr = Circle(color=BLUE, fill_opacity=1)\n        cr.move_to([-1.3, 0.7, 0])\n        un = Exclusion(sq, cr, color=GREEN, fill_opacity=1)\n        un.move_to([1.5, 0.4, 0])\n        self.add(sq, cr, un)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a solid red square on the left and a solid blue circle overlapping it from the top right. On the right side of the screen, show a green shape representing the exclusion\u2014highlighting the non-overlapping regions of both the square and the circle, with the intersecting area removed."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass IntersectionExample(Scene):\n    def construct(self):\n        sq = Square(color=RED, fill_opacity=1)\n        sq.move_to([-2, 0, 0])\n        cr = Circle(color=BLUE, fill_opacity=1)\n        cr.move_to([-1.3, 0.7, 0])\n        un = Exclusion(sq, cr, color=GREEN, fill_opacity=1)\n        un.move_to([1.5, 0.4, 0])\n        self.add(sq, cr, un)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 table with row and column labels. A red rectangle is drawn around the second column, visually highlighting both cells in that column."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetColumnsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.add(SurroundingRectangle(table.get_columns()[1]))\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 table with row and column labels. A red rectangle is drawn around the second column, visually highlighting both cells in that column."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetColumnsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.add(SurroundingRectangle(table.get_columns()[1]))\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two vertically arranged groups side by side: on the left, a red label \"CounterclockwiseTransform\" with the numbers 3.141 and 1.618 stacked above it; on the right, a blue label \"Transform\" with the numbers 1.618 and 3.141 stacked above it. First, the top number in the left group transforms into the bottom number using a counterclockwise spinning motion. Then, the top number in the right group transforms into the bottom number with a direct, straight morphing animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CounterclockwiseTransform_vs_Transform(Scene):\n    def construct(self):\n        # set up the numbers\n        c_transform = VGroup(DecimalNumber(number=3.141, num_decimal_places=3), DecimalNumber(number=1.618, num_decimal_places=3))\n        text_1 = Text(\"CounterclockwiseTransform\", color=RED)\n        c_transform.add(text_1)\n\n        transform = VGroup(DecimalNumber(number=1.618, num_decimal_places=3), DecimalNumber(number=3.141, num_decimal_places=3))\n        text_2 = Text(\"Transform\", color=BLUE)\n        transform.add(text_2)\n\n        ints = VGroup(c_transform, transform)\n        texts = VGroup(text_1, text_2).scale(0.75)\n        c_transform.arrange(direction=UP, buff=1)\n        transform.arrange(direction=UP, buff=1)\n\n        ints.arrange(buff=2)\n        self.add(ints, texts)\n\n        # The mobs move in clockwise direction for ClockwiseTransform()\n        self.play(CounterclockwiseTransform(c_transform[0], c_transform[1]))\n\n        # The mobs move straight up for Transform()\n        self.play(Transform(transform[0], transform[1]))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two vertically arranged groups side by side: on the left, a red label \"CounterclockwiseTransform\" with the numbers 3.141 and 1.618 stacked above it; on the right, a blue label \"Transform\" with the numbers 1.618 and 3.141 stacked above it. First, the top number in the left group transforms into the bottom number using a counterclockwise spinning motion. Then, the top number in the right group transforms into the bottom number with a direct, straight morphing animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CounterclockwiseTransform_vs_Transform(Scene):\n    def construct(self):\n        # set up the numbers\n        c_transform = VGroup(DecimalNumber(number=3.141, num_decimal_places=3), DecimalNumber(number=1.618, num_decimal_places=3))\n        text_1 = Text(\"CounterclockwiseTransform\", color=RED)\n        c_transform.add(text_1)\n\n        transform = VGroup(DecimalNumber(number=1.618, num_decimal_places=3), DecimalNumber(number=3.141, num_decimal_places=3))\n        text_2 = Text(\"Transform\", color=BLUE)\n        transform.add(text_2)\n\n        ints = VGroup(c_transform, transform)\n        texts = VGroup(text_1, text_2).scale(0.75)\n        c_transform.arrange(direction=UP, buff=1)\n        transform.arrange(direction=UP, buff=1)\n\n        ints.arrange(buff=2)\n        self.add(ints, texts)\n\n        # The mobs move in clockwise direction for ClockwiseTransform()\n        self.play(CounterclockwiseTransform(c_transform[0], c_transform[1]))\n\n        # The mobs move straight up for Transform()\n        self.play(Transform(transform[0], transform[1]))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display two vertically arranged groups side by side: on the left, a red label \"CounterclockwiseTransform\" with the numbers 3.141 and 1.618 stacked above it; on the right, a blue label \"Transform\" with the numbers 1.618 and 3.141 stacked above it. First, the top number in the left group transforms into the bottom number using a counterclockwise spinning motion. Then, the top number in the right group transforms into the bottom number with a direct, straight morphing animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CounterclockwiseTransform_vs_Transform(Scene):\n    def construct(self):\n        # set up the numbers\n        c_transform = VGroup(DecimalNumber(number=3.141, num_decimal_places=3), DecimalNumber(number=1.618, num_decimal_places=3))\n        text_1 = Text(\"CounterclockwiseTransform\", color=RED)\n        c_transform.add(text_1)\n\n        transform = VGroup(DecimalNumber(number=1.618, num_decimal_places=3), DecimalNumber(number=3.141, num_decimal_places=3))\n        text_2 = Text(\"Transform\", color=BLUE)\n        transform.add(text_2)\n\n        ints = VGroup(c_transform, transform)\n        texts = VGroup(text_1, text_2).scale(0.75)\n        c_transform.arrange(direction=UP, buff=1)\n        transform.arrange(direction=UP, buff=1)\n\n        ints.arrange(buff=2)\n        self.add(ints, texts)\n\n        # The mobs move in clockwise direction for ClockwiseTransform()\n        self.play(CounterclockwiseTransform(c_transform[0], c_transform[1]))\n\n        # The mobs move straight up for Transform()\n        self.play(Transform(transform[0], transform[1]))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a blue rectangle at the center of the screen with a translucent gray copy behind it for reference. A number is shown at the top edge of the screen, dynamically updating to reflect the rectangle\u2019s width. The rectangle then smoothly expands horizontally until its width reaches 7 units, while the number updates in real time."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass WidthExample(Scene):\n    def construct(self):\n        decimal = DecimalNumber().to_edge(UP)\n        rect = Rectangle(color=BLUE)\n        rect_copy = rect.copy().set_stroke(GRAY, opacity=0.5)\n\n        decimal.add_updater(lambda d: d.set_value(rect.width))\n\n        self.add(rect_copy, rect, decimal)\n        self.play(rect.animate.set(width=7))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a blue rectangle at the center of the screen with a translucent gray copy behind it for reference. A number is shown at the top edge of the screen, dynamically updating to reflect the rectangle\u2019s width. The rectangle then smoothly expands horizontally until its width reaches 7 units, while the number updates in real time."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass WidthExample(Scene):\n    def construct(self):\n        decimal = DecimalNumber().to_edge(UP)\n        rect = Rectangle(color=BLUE)\n        rect_copy = rect.copy().set_stroke(GRAY, opacity=0.5)\n\n        decimal.add_updater(lambda d: d.set_value(rect.width))\n\n        self.add(rect_copy, rect, decimal)\n        self.play(rect.animate.set(width=7))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a blue rectangle at the center of the screen with a translucent gray copy behind it for reference. A number is shown at the top edge of the screen, dynamically updating to reflect the rectangle\u2019s width. The rectangle then smoothly expands horizontally until its width reaches 7 units, while the number updates in real time."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass WidthExample(Scene):\n    def construct(self):\n        decimal = DecimalNumber().to_edge(UP)\n        rect = Rectangle(color=BLUE)\n        rect_copy = rect.copy().set_stroke(GRAY, opacity=0.5)\n\n        decimal.add_updater(lambda d: d.set_value(rect.width))\n\n        self.add(rect_copy, rect, decimal)\n        self.play(rect.animate.set(width=7))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a number line with a downward-pointing arrow (vector) and a label \"x\" above it. The arrow dynamically follows a value tracked by a `ValueTracker`. Initially, the tracker is set to 0, then:\n\n1. Instantly increases to 1.5,\n2. Instantly decreases by 4 (to -2.5),\n3. Animates smoothly to 5,\n4. Animates to 3,\n5. Animates to 1 by decrementing 2.\n\nThroughout, the arrow and label move along the number line to reflect the current tracked value."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ValueTrackerExample(Scene):\n    def construct(self):\n        number_line = NumberLine()\n        pointer = Vector(DOWN)\n        label = MathTex(\"x\").add_updater(lambda m: m.next_to(pointer, UP))\n\n        tracker = ValueTracker(0)\n        pointer.add_updater(\n            lambda m: m.next_to(\n                        number_line.n2p(tracker.get_value()),\n                        UP\n                    )\n        )\n        self.add(number_line, pointer,label)\n        tracker += 1.5\n        self.wait(1)\n        tracker -= 4\n        self.wait(0.5)\n        self.play(tracker.animate.set_value(5))\n        self.wait(0.5)\n        self.play(tracker.animate.set_value(3))\n        self.play(tracker.animate.increment_value(-2))\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a number line with a downward-pointing arrow (vector) and a label \"x\" above it. The arrow dynamically follows a value tracked by a `ValueTracker`. Initially, the tracker is set to 0, then:\n\n1. Instantly increases to 1.5,\n2. Instantly decreases by 4 (to -2.5),\n3. Animates smoothly to 5,\n4. Animates to 3,\n5. Animates to 1 by decrementing 2.\n\nThroughout, the arrow and label move along the number line to reflect the current tracked value."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ValueTrackerExample(Scene):\n    def construct(self):\n        number_line = NumberLine()\n        pointer = Vector(DOWN)\n        label = MathTex(\"x\").add_updater(lambda m: m.next_to(pointer, UP))\n\n        tracker = ValueTracker(0)\n        pointer.add_updater(\n            lambda m: m.next_to(\n                        number_line.n2p(tracker.get_value()),\n                        UP\n                    )\n        )\n        self.add(number_line, pointer,label)\n        tracker += 1.5\n        self.wait(1)\n        tracker -= 4\n        self.wait(0.5)\n        self.play(tracker.animate.set_value(5))\n        self.wait(0.5)\n        self.play(tracker.animate.set_value(3))\n        self.play(tracker.animate.increment_value(-2))\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a number line with a downward-pointing arrow (vector) and a label \"x\" above it. The arrow dynamically follows a value tracked by a `ValueTracker`. Initially, the tracker is set to 0, then:\n\n1. Instantly increases to 1.5,\n2. Instantly decreases by 4 (to -2.5),\n3. Animates smoothly to 5,\n4. Animates to 3,\n5. Animates to 1 by decrementing 2.\n\nThroughout, the arrow and label move along the number line to reflect the current tracked value."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ValueTrackerExample(Scene):\n    def construct(self):\n        number_line = NumberLine()\n        pointer = Vector(DOWN)\n        label = MathTex(\"x\").add_updater(lambda m: m.next_to(pointer, UP))\n\n        tracker = ValueTracker(0)\n        pointer.add_updater(\n            lambda m: m.next_to(\n                        number_line.n2p(tracker.get_value()),\n                        UP\n                    )\n        )\n        self.add(number_line, pointer,label)\n        tracker += 1.5\n        self.wait(1)\n        tracker -= 4\n        self.wait(0.5)\n        self.play(tracker.animate.set_value(5))\n        self.wait(0.5)\n        self.play(tracker.animate.set_value(3))\n        self.play(tracker.animate.increment_value(-2))\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a row of six shapes arranged horizontally: a square, a circle, a triangle, and three dots. These shapes are added to a `VGroup` using a mix of individual objects, a list, and a generator expression, demonstrating that various iterable types can be combined into a single group."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AddIterableToVGroupExample(Scene):\n    def construct(self):\n        v = VGroup(\n            Square(),               # Singular VMobject instance\n            [Circle(), Triangle()], # List of VMobject instances\n            Dot(),\n            (Dot() for _ in range(2)), # Iterable that generates VMobjects\n        )\n        v.arrange()\n        self.add(v)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a row of six shapes arranged horizontally: a square, a circle, a triangle, and three dots. These shapes are added to a `VGroup` using a mix of individual objects, a list, and a generator expression, demonstrating that various iterable types can be combined into a single group."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AddIterableToVGroupExample(Scene):\n    def construct(self):\n        v = VGroup(\n            Square(),               # Singular VMobject instance\n            [Circle(), Triangle()], # List of VMobject instances\n            Dot(),\n            (Dot() for _ in range(2)), # Iterable that generates VMobjects\n        )\n        v.arrange()\n        self.add(v)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a row of six shapes arranged horizontally: a square, a circle, a triangle, and three dots. These shapes are added to a `VGroup` using a mix of individual objects, a list, and a generator expression, demonstrating that various iterable types can be combined into a single group."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AddIterableToVGroupExample(Scene):\n    def construct(self):\n        v = VGroup(\n            Square(),               # Singular VMobject instance\n            [Circle(), Triangle()], # List of VMobject instances\n            Dot(),\n            (Dot() for _ in range(2)), # Iterable that generates VMobjects\n        )\n        v.arrange()\n        self.add(v)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display four arc polygons arranged horizontally across the screen, each formed by three points: the origin, a point to the right, and a point above. The first uses default arcs with a large radius, the second uses arcs with a fixed angle, the third uses uniformly styled red arcs with a specific radius, and the fourth is fully filled in red with each arc segment customized in radius, angle, and color."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SeveralArcPolygons(Scene):\n    def construct(self):\n        a = [0, 0, 0]\n        b = [2, 0, 0]\n        c = [0, 2, 0]\n        ap1 = ArcPolygon(a, b, c, radius=2)\n        ap2 = ArcPolygon(a, b, c, angle=45*DEGREES)\n        ap3 = ArcPolygon(a, b, c, arc_config={'radius': 1.7, 'color': RED})\n        ap4 = ArcPolygon(a, b, c, color=RED, fill_opacity=1,\n                                    arc_config=[{'radius': 1.7, 'color': RED},\n                                    {'angle': 20*DEGREES, 'color': BLUE},\n                                    {'radius': 1}])\n        ap_group = VGroup(ap1, ap2, ap3, ap4).arrange()\n        self.play(*[Create(ap) for ap in [ap1, ap2, ap3, ap4]])\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display four arc polygons arranged horizontally across the screen, each formed by three points: the origin, a point to the right, and a point above. The first uses default arcs with a large radius, the second uses arcs with a fixed angle, the third uses uniformly styled red arcs with a specific radius, and the fourth is fully filled in red with each arc segment customized in radius, angle, and color."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SeveralArcPolygons(Scene):\n    def construct(self):\n        a = [0, 0, 0]\n        b = [2, 0, 0]\n        c = [0, 2, 0]\n        ap1 = ArcPolygon(a, b, c, radius=2)\n        ap2 = ArcPolygon(a, b, c, angle=45*DEGREES)\n        ap3 = ArcPolygon(a, b, c, arc_config={'radius': 1.7, 'color': RED})\n        ap4 = ArcPolygon(a, b, c, color=RED, fill_opacity=1,\n                                    arc_config=[{'radius': 1.7, 'color': RED},\n                                    {'angle': 20*DEGREES, 'color': BLUE},\n                                    {'radius': 1}])\n        ap_group = VGroup(ap1, ap2, ap3, ap4).arrange()\n        self.play(*[Create(ap) for ap in [ap1, ap2, ap3, ap4]])\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display four arc polygons arranged horizontally across the screen, each formed by three points: the origin, a point to the right, and a point above. The first uses default arcs with a large radius, the second uses arcs with a fixed angle, the third uses uniformly styled red arcs with a specific radius, and the fourth is fully filled in red with each arc segment customized in radius, angle, and color."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SeveralArcPolygons(Scene):\n    def construct(self):\n        a = [0, 0, 0]\n        b = [2, 0, 0]\n        c = [0, 2, 0]\n        ap1 = ArcPolygon(a, b, c, radius=2)\n        ap2 = ArcPolygon(a, b, c, angle=45*DEGREES)\n        ap3 = ArcPolygon(a, b, c, arc_config={'radius': 1.7, 'color': RED})\n        ap4 = ArcPolygon(a, b, c, color=RED, fill_opacity=1,\n                                    arc_config=[{'radius': 1.7, 'color': RED},\n                                    {'angle': 20*DEGREES, 'color': BLUE},\n                                    {'radius': 1}])\n        ap_group = VGroup(ap1, ap2, ap3, ap4).arrange()\n        self.play(*[Create(ap) for ap in [ap1, ap2, ap3, ap4]])\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two dots: a white one shifted to the left and a dark grey one shifted to the right. A third dot appears between them, positioned 30% of the way from the left dot to the right dot, representing an interpolated position along the line connecting the two."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DotInterpolation(Scene):\n    def construct(self):\n        dotR = Dot(color=DARK_GREY)\n        dotR.shift(2 * RIGHT)\n        dotL = Dot(color=WHITE)\n        dotL.shift(2 * LEFT)\n\n        dotMiddle = VMobject().interpolate(dotL, dotR, alpha=0.3)\n\n        self.add(dotL, dotR, dotMiddle)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two dots: a white one shifted to the left and a dark grey one shifted to the right. A third dot appears between them, positioned 30% of the way from the left dot to the right dot, representing an interpolated position along the line connecting the two."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DotInterpolation(Scene):\n    def construct(self):\n        dotR = Dot(color=DARK_GREY)\n        dotR.shift(2 * RIGHT)\n        dotL = Dot(color=WHITE)\n        dotL.shift(2 * LEFT)\n\n        dotMiddle = VMobject().interpolate(dotL, dotR, alpha=0.3)\n\n        self.add(dotL, dotR, dotMiddle)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display two dots: a white one shifted to the left and a dark grey one shifted to the right. A third dot appears between them, positioned 30% of the way from the left dot to the right dot, representing an interpolated position along the line connecting the two."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DotInterpolation(Scene):\n    def construct(self):\n        dotR = Dot(color=DARK_GREY)\n        dotR.shift(2 * RIGHT)\n        dotL = Dot(color=WHITE)\n        dotL.shift(2 * LEFT)\n\n        dotMiddle = VMobject().interpolate(dotL, dotR, alpha=0.3)\n\n        self.add(dotL, dotR, dotMiddle)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two small squares rotating simultaneously in place: one starts above the center and rotates in a full circle around the origin, while the other rotates in place at the center of the screen. Both rotations are smooth and complete one full turn."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UsingRotate(Scene):\n    def construct(self):\n        self.play(\n            Rotate(\n                Square(side_length=0.5).shift(UP * 2),\n                angle=2*PI,\n                about_point=ORIGIN,\n                rate_func=linear,\n            ),\n            Rotate(Square(side_length=0.5), angle=2*PI, rate_func=linear),\n            )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two small squares rotating simultaneously in place: one starts above the center and rotates in a full circle around the origin, while the other rotates in place at the center of the screen. Both rotations are smooth and complete one full turn."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UsingRotate(Scene):\n    def construct(self):\n        self.play(\n            Rotate(\n                Square(side_length=0.5).shift(UP * 2),\n                angle=2*PI,\n                about_point=ORIGIN,\n                rate_func=linear,\n            ),\n            Rotate(Square(side_length=0.5), angle=2*PI, rate_func=linear),\n            )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \"RED COLOR\" in red at the center of the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SimpleColor(Scene):\n    def construct(self):\n        col = Text(\"RED COLOR\", color=RED)\n        self.add(col)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \"RED COLOR\" in red at the center of the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SimpleColor(Scene):\n    def construct(self):\n        col = Text(\"RED COLOR\", color=RED)\n        self.add(col)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a coordinate grid with default x- and y-axes, but with both axes using the \"StealthTip\" style for their arrow tips. The axes appear clean and minimal, with no numerical labels or tick marks by default."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AxesWithDifferentTips(Scene):\n    def construct(self):\n        ax = Axes(axis_config={'tip_shape': StealthTip})\n        self.add(ax)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a coordinate grid with default x- and y-axes, but with both axes using the \"StealthTip\" style for their arrow tips. The axes appear clean and minimal, with no numerical labels or tick marks by default."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AxesWithDifferentTips(Scene):\n    def construct(self):\n        ax = Axes(axis_config={'tip_shape': StealthTip})\n        self.add(ax)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a coordinate grid with default x- and y-axes, but with both axes using the \"StealthTip\" style for their arrow tips. The axes appear clean and minimal, with no numerical labels or tick marks by default."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AxesWithDifferentTips(Scene):\n    def construct(self):\n        ax = Axes(axis_config={'tip_shape': StealthTip})\n        self.add(ax)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a row of evenly spaced dots extending horizontally across the screen. Below it, a second row appears, which is a shuffled version of the first\u2014containing the same dots but in a random order. Both rows are written onto the screen simultaneously."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShuffleSubmobjectsExample(Scene):\n    def construct(self):\n        s= VGroup(*[Dot().shift(i*0.1*RIGHT) for i in range(-20,20)])\n        s2= s.copy()\n        s2.shuffle_submobjects()\n        s2.shift(DOWN)\n        self.play(Write(s), Write(s2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a row of evenly spaced dots extending horizontally across the screen. Below it, a second row appears, which is a shuffled version of the first\u2014containing the same dots but in a random order. Both rows are written onto the screen simultaneously."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShuffleSubmobjectsExample(Scene):\n    def construct(self):\n        s= VGroup(*[Dot().shift(i*0.1*RIGHT) for i in range(-20,20)])\n        s2= s.copy()\n        s2.shuffle_submobjects()\n        s2.shift(DOWN)\n        self.play(Write(s), Write(s2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a row of evenly spaced dots extending horizontally across the screen. Below it, a second row appears, which is a shuffled version of the first\u2014containing the same dots but in a random order. Both rows are written onto the screen simultaneously."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShuffleSubmobjectsExample(Scene):\n    def construct(self):\n        s= VGroup(*[Dot().shift(i*0.1*RIGHT) for i in range(-20,20)])\n        s2= s.copy()\n        s2.shuffle_submobjects()\n        s2.shift(DOWN)\n        self.play(Write(s), Write(s2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a solid red square on the left and a solid blue circle overlapping it from the top right. On the right side of the screen, show a green shape representing the intersection\u2014only the overlapping area shared by both the square and the circle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass IntersectionExample(Scene):\n    def construct(self):\n        sq = Square(color=RED, fill_opacity=1)\n        sq.move_to([-2, 0, 0])\n        cr = Circle(color=BLUE, fill_opacity=1)\n        cr.move_to([-1.3, 0.7, 0])\n        un = Intersection(sq, cr, color=GREEN, fill_opacity=1)\n        un.move_to([1.5, 0, 0])\n        self.add(sq, cr, un)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a solid red square on the left and a solid blue circle overlapping it from the top right. On the right side of the screen, show a green shape representing the intersection\u2014only the overlapping area shared by both the square and the circle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass IntersectionExample(Scene):\n    def construct(self):\n        sq = Square(color=RED, fill_opacity=1)\n        sq.move_to([-2, 0, 0])\n        cr = Circle(color=BLUE, fill_opacity=1)\n        cr.move_to([-1.3, 0.7, 0])\n        un = Intersection(sq, cr, color=GREEN, fill_opacity=1)\n        un.move_to([1.5, 0, 0])\n        self.add(sq, cr, un)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a graph with six labeled nodes arranged in a spiral layout, where each node is positioned along a gradually expanding curve. The nodes are connected in a loop with additional cross-links between non-adjacent nodes, forming a dense and interconnected structure that visually spirals outward from the center."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpiralLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"spiral\",\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a graph with six labeled nodes arranged in a spiral layout, where each node is positioned along a gradually expanding curve. The nodes are connected in a loop with additional cross-links between non-adjacent nodes, forming a dense and interconnected structure that visually spirals outward from the center."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpiralLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"spiral\",\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a graph with six labeled nodes arranged in a spiral layout, where each node is positioned along a gradually expanding curve. The nodes are connected in a loop with additional cross-links between non-adjacent nodes, forming a dense and interconnected structure that visually spirals outward from the center."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpiralLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"spiral\",\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a square and a circle side by side with space between them. The square rotates 90 degrees counterclockwise over two seconds, while at the same time, the circle shifts to the right and then returns to its original position in a smooth back-and-forth motion."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnimateWithArgsExample(Scene):\n    def construct(self):\n        s = Square()\n        c = Circle()\n\n        VGroup(s, c).arrange(RIGHT, buff=2)\n        self.add(s, c)\n\n        self.play(\n            s.animate(run_time=2).rotate(PI / 2),\n            c.animate(rate_func=there_and_back).shift(RIGHT),\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a square and a circle side by side with space between them. The square rotates 90 degrees counterclockwise over two seconds, while at the same time, the circle shifts to the right and then returns to its original position in a smooth back-and-forth motion."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnimateWithArgsExample(Scene):\n    def construct(self):\n        s = Square()\n        c = Circle()\n\n        VGroup(s, c).arrange(RIGHT, buff=2)\n        self.add(s, c)\n\n        self.play(\n            s.animate(run_time=2).rotate(PI / 2),\n            c.animate(rate_func=there_and_back).shift(RIGHT),\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a square and a circle side by side with space between them. The square rotates 90 degrees counterclockwise over two seconds, while at the same time, the circle shifts to the right and then returns to its original position in a smooth back-and-forth motion."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnimateWithArgsExample(Scene):\n    def construct(self):\n        s = Square()\n        c = Circle()\n\n        VGroup(s, c).arrange(RIGHT, buff=2)\n        self.add(s, c)\n\n        self.play(\n            s.animate(run_time=2).rotate(PI / 2),\n            c.animate(rate_func=there_and_back).shift(RIGHT),\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the mathematical expression for the product rule of differentiation. Draw a rectangle around the term \\( f(x) \\frac{d}{dx} g(x) \\). Replace the rectangle with one around the term \\( g(x) \\frac{d}{dx} f(x) \\)."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingFrameBox(Scene):\n    def construct(self):\n        text=MathTex(\n            \"\\\\frac{d}{dx}f(x)g(x)=\",\"f(x)\\\\frac{d}{dx}g(x)\",\"+\",\n            \"g(x)\\\\frac{d}{dx}f(x)\"\n        )\n        self.play(Write(text))\n        framebox1 = SurroundingRectangle(text[1], buff = .1)\n        framebox2 = SurroundingRectangle(text[3], buff = .1)\n        self.play(\n            Create(framebox1),\n        )\n        self.wait()\n        self.play(\n            ReplacementTransform(framebox1,framebox2),\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the mathematical expression for the product rule of differentiation. Draw a rectangle around the term \\( f(x) \\frac{d}{dx} g(x) \\). Replace the rectangle with one around the term \\( g(x) \\frac{d}{dx} f(x) \\)."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingFrameBox(Scene):\n    def construct(self):\n        text=MathTex(\n            \"\\\\frac{d}{dx}f(x)g(x)=\",\"f(x)\\\\frac{d}{dx}g(x)\",\"+\",\n            \"g(x)\\\\frac{d}{dx}f(x)\"\n        )\n        self.play(Write(text))\n        framebox1 = SurroundingRectangle(text[1], buff = .1)\n        framebox2 = SurroundingRectangle(text[3], buff = .1)\n        self.play(\n            Create(framebox1),\n        )\n        self.wait()\n        self.play(\n            ReplacementTransform(framebox1,framebox2),\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2x2 grid of four scenes, each containing a circle on the left and a label reading \"This is Scene 0\" through \"This is Scene 3\" on the right. The camera starts focused on the first scene, then smoothly slides to center on each of the remaining scenes one by one. After visiting all scenes, the camera zooms out to show the entire grid with extra margin around it."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SlidingMultipleScenes(MovingCameraScene):\n    def construct(self):\n        def create_scene(number):\n            frame = Rectangle(width=16,height=9)\n            circ = Circle().shift(LEFT)\n            text = Tex(f\"This is Scene {str(number)}\").next_to(circ, RIGHT)\n            frame.add(circ,text)\n            return frame\n\n        group = VGroup(*(create_scene(i) for i in range(4))).arrange_in_grid(buff=4)\n        self.add(group)\n        self.camera.auto_zoom(group[0], animate=False)\n        for scene in group:\n            self.play(self.camera.auto_zoom(scene))\n            self.wait()\n\n        self.play(self.camera.auto_zoom(group, margin=2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2x2 grid of four scenes, each containing a circle on the left and a label reading \"This is Scene 0\" through \"This is Scene 3\" on the right. The camera starts focused on the first scene, then smoothly slides to center on each of the remaining scenes one by one. After visiting all scenes, the camera zooms out to show the entire grid with extra margin around it."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SlidingMultipleScenes(MovingCameraScene):\n    def construct(self):\n        def create_scene(number):\n            frame = Rectangle(width=16,height=9)\n            circ = Circle().shift(LEFT)\n            text = Tex(f\"This is Scene {str(number)}\").next_to(circ, RIGHT)\n            frame.add(circ,text)\n            return frame\n\n        group = VGroup(*(create_scene(i) for i in range(4))).arrange_in_grid(buff=4)\n        self.add(group)\n        self.camera.auto_zoom(group[0], animate=False)\n        for scene in group:\n            self.play(self.camera.auto_zoom(scene))\n            self.wait()\n\n        self.play(self.camera.auto_zoom(group, margin=2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 2x2 grid of four scenes, each containing a circle on the left and a label reading \"This is Scene 0\" through \"This is Scene 3\" on the right. The camera starts focused on the first scene, then smoothly slides to center on each of the remaining scenes one by one. After visiting all scenes, the camera zooms out to show the entire grid with extra margin around it."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SlidingMultipleScenes(MovingCameraScene):\n    def construct(self):\n        def create_scene(number):\n            frame = Rectangle(width=16,height=9)\n            circ = Circle().shift(LEFT)\n            text = Tex(f\"This is Scene {str(number)}\").next_to(circ, RIGHT)\n            frame.add(circ,text)\n            return frame\n\n        group = VGroup(*(create_scene(i) for i in range(4))).arrange_in_grid(buff=4)\n        self.add(group)\n        self.camera.auto_zoom(group[0], animate=False)\n        for scene in group:\n            self.play(self.camera.auto_zoom(scene))\n            self.wait()\n\n        self.play(self.camera.auto_zoom(group, margin=2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a circle at the center of the screen with a square to its left, a dot to its right, and a triangle below it. All four geometric shapes are arranged around the circle and shown simultaneously."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GeometricShapes(Scene):\n    def construct(self):\n        d = Dot()\n        c = Circle()\n        s = Square()\n        t = Triangle()\n        d.next_to(c, RIGHT)\n        s.next_to(c, LEFT)\n        t.next_to(c, DOWN)\n        self.add(d, c, s, t)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a circle at the center of the screen with a square to its left, a dot to its right, and a triangle below it. All four geometric shapes are arranged around the circle and shown simultaneously."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GeometricShapes(Scene):\n    def construct(self):\n        d = Dot()\n        c = Circle()\n        s = Square()\n        t = Triangle()\n        d.next_to(c, RIGHT)\n        s.next_to(c, LEFT)\n        t.next_to(c, DOWN)\n        self.add(d, c, s, t)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a circle at the center of the screen with a square to its left, a dot to its right, and a triangle below it. All four geometric shapes are arranged around the circle and shown simultaneously."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GeometricShapes(Scene):\n    def construct(self):\n        d = Dot()\n        c = Circle()\n        s = Square()\n        t = Triangle()\n        d.next_to(c, RIGHT)\n        s.next_to(c, LEFT)\n        t.next_to(c, DOWN)\n        self.add(d, c, s, t)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the word \u201cItalic\u201d centered on the screen, styled with an italic slant."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SlantsExample(Scene):\n    def construct(self):\n        a = Text(\"Italic\", slant=ITALIC)\n        self.add(a)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the word \u201cItalic\u201d centered on the screen, styled with an italic slant."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SlantsExample(Scene):\n    def construct(self):\n        a = Text(\"Italic\", slant=ITALIC)\n        self.add(a)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a polar coordinate grid labeled in terms of \u03c0 radians. A vector is drawn from the origin to the point corresponding to the polar coordinates \\( (3, \\frac{\\pi}{4}) \\), visually illustrating the conversion from polar to Cartesian coordinates."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PolarToPointExample(Scene):\n    def construct(self):\n        polarplane_pi = PolarPlane(azimuth_units=\"PI radians\", size=6)\n        polartopoint_vector = Vector(polarplane_pi.polar_to_point(3, PI/4))\n        self.add(polarplane_pi)\n        self.add(polartopoint_vector)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a polar coordinate grid labeled in terms of \u03c0 radians. A vector is drawn from the origin to the point corresponding to the polar coordinates \\( (3, \\frac{\\pi}{4}) \\), visually illustrating the conversion from polar to Cartesian coordinates."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PolarToPointExample(Scene):\n    def construct(self):\n        polarplane_pi = PolarPlane(azimuth_units=\"PI radians\", size=6)\n        polartopoint_vector = Vector(polarplane_pi.polar_to_point(3, PI/4))\n        self.add(polarplane_pi)\n        self.add(polartopoint_vector)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a polar coordinate grid labeled in terms of \u03c0 radians. A vector is drawn from the origin to the point corresponding to the polar coordinates \\( (3, \\frac{\\pi}{4}) \\), visually illustrating the conversion from polar to Cartesian coordinates."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PolarToPointExample(Scene):\n    def construct(self):\n        polarplane_pi = PolarPlane(azimuth_units=\"PI radians\", size=6)\n        polartopoint_vector = Vector(polarplane_pi.polar_to_point(3, PI/4))\n        self.add(polarplane_pi)\n        self.add(polartopoint_vector)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a blue streamlines vector field where each line flows according to a sine and cosine-based function. The streamlines begin animating immediately with a smooth, continuous motion, simulating fluid flow at a moderate speed. After a brief moment, the animation gracefully stops, freezing the streamlines in place."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass EndAnimation(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[0] / 2) * UR + np.cos(pos[1] / 2) * LEFT\n        stream_lines = StreamLines(\n            func, stroke_width=3, max_anchors_per_line=5, virtual_time=1, color=BLUE\n        )\n        self.add(stream_lines)\n        stream_lines.start_animation(warm_up=False, flow_speed=1.5, time_width=0.5)\n        self.wait(1)\n        self.play(stream_lines.end_animation())\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a blue streamlines vector field where each line flows according to a sine and cosine-based function. The streamlines begin animating immediately with a smooth, continuous motion, simulating fluid flow at a moderate speed. After a brief moment, the animation gracefully stops, freezing the streamlines in place."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass EndAnimation(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[0] / 2) * UR + np.cos(pos[1] / 2) * LEFT\n        stream_lines = StreamLines(\n            func, stroke_width=3, max_anchors_per_line=5, virtual_time=1, color=BLUE\n        )\n        self.add(stream_lines)\n        stream_lines.start_animation(warm_up=False, flow_speed=1.5, time_width=0.5)\n        self.wait(1)\n        self.play(stream_lines.end_animation())\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a blue streamlines vector field where each line flows according to a sine and cosine-based function. The streamlines begin animating immediately with a smooth, continuous motion, simulating fluid flow at a moderate speed. After a brief moment, the animation gracefully stops, freezing the streamlines in place."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass EndAnimation(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[0] / 2) * UR + np.cos(pos[1] / 2) * LEFT\n        stream_lines = StreamLines(\n            func, stroke_width=3, max_anchors_per_line=5, virtual_time=1, color=BLUE\n        )\n        self.add(stream_lines)\n        stream_lines.start_animation(warm_up=False, flow_speed=1.5, time_width=0.5)\n        self.wait(1)\n        self.play(stream_lines.end_animation())\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 table with row and column labels. The bottom-right cell is highlighted in green to draw attention, while the rest of the table remains unhighlighted."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AddHighlightedCellExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.add_highlighted_cell((2,2), color=GREEN)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 table with row and column labels. The bottom-right cell is highlighted in green to draw attention, while the rest of the table remains unhighlighted."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AddHighlightedCellExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.add_highlighted_cell((2,2), color=GREEN)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 2\u00d72 table with row and column labels. The bottom-right cell is highlighted in green to draw attention, while the rest of the table remains unhighlighted."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AddHighlightedCellExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.add_highlighted_cell((2,2), color=GREEN)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of axes with a blue line representing the function \\( y = x \\). At the point where \\( x = 4 \\), a vertical dashed line and a horizontal dashed line intersect the graph, forming a \"T\" shape. A label reading \"x-value\" is placed near this intersection to indicate the corresponding point on the graph."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TLabelExample(Scene):\n    def construct(self):\n        # defines the axes and linear function\n        axes = Axes(x_range=[-1, 10], y_range=[-1, 10], x_length=9, y_length=6)\n        func = axes.plot(lambda x: x, color=BLUE)\n        # creates the T_label\n        t_label = axes.get_T_label(x_val=4, graph=func, label=Tex(\"x-value\"))\n        self.add(axes, func, t_label)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of axes with a blue line representing the function \\( y = x \\). At the point where \\( x = 4 \\), a vertical dashed line and a horizontal dashed line intersect the graph, forming a \"T\" shape. A label reading \"x-value\" is placed near this intersection to indicate the corresponding point on the graph."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TLabelExample(Scene):\n    def construct(self):\n        # defines the axes and linear function\n        axes = Axes(x_range=[-1, 10], y_range=[-1, 10], x_length=9, y_length=6)\n        func = axes.plot(lambda x: x, color=BLUE)\n        # creates the T_label\n        t_label = axes.get_T_label(x_val=4, graph=func, label=Tex(\"x-value\"))\n        self.add(axes, func, t_label)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a set of axes with a blue line representing the function \\( y = x \\). At the point where \\( x = 4 \\), a vertical dashed line and a horizontal dashed line intersect the graph, forming a \"T\" shape. A label reading \"x-value\" is placed near this intersection to indicate the corresponding point on the graph."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TLabelExample(Scene):\n    def construct(self):\n        # defines the axes and linear function\n        axes = Axes(x_range=[-1, 10], y_range=[-1, 10], x_length=9, y_length=6)\n        func = axes.plot(lambda x: x, color=BLUE)\n        # creates the T_label\n        t_label = axes.get_T_label(x_val=4, graph=func, label=Tex(\"x-value\"))\n        self.add(axes, func, t_label)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a coordinate plane with two vectors:\n\n1. A vector pointing to the coordinates (1, 2), labeled with its coordinate values.\n2. A vector pointing to the coordinates (\u22123, \u22122), also labeled, with the label colored yellow.\n\nBoth vectors originate from the origin and are shown on the grid."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass VectorCoordinateLabel(Scene):\n    def construct(self):\n        plane = NumberPlane()\n\n        vec_1 = Vector([1, 2])\n        vec_2 = Vector([-3, -2])\n        label_1 = vec_1.coordinate_label()\n        label_2 = vec_2.coordinate_label(color=YELLOW)\n\n        self.add(plane, vec_1, vec_2, label_1, label_2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a coordinate plane with two vectors:\n\n1. A vector pointing to the coordinates (1, 2), labeled with its coordinate values.\n2. A vector pointing to the coordinates (\u22123, \u22122), also labeled, with the label colored yellow.\n\nBoth vectors originate from the origin and are shown on the grid."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass VectorCoordinateLabel(Scene):\n    def construct(self):\n        plane = NumberPlane()\n\n        vec_1 = Vector([1, 2])\n        vec_2 = Vector([-3, -2])\n        label_1 = vec_1.coordinate_label()\n        label_2 = vec_2.coordinate_label(color=YELLOW)\n\n        self.add(plane, vec_1, vec_2, label_1, label_2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a coordinate plane with two vectors:\n\n1. A vector pointing to the coordinates (1, 2), labeled with its coordinate values.\n2. A vector pointing to the coordinates (\u22123, \u22122), also labeled, with the label colored yellow.\n\nBoth vectors originate from the origin and are shown on the grid."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass VectorCoordinateLabel(Scene):\n    def construct(self):\n        plane = NumberPlane()\n\n        vec_1 = Vector([1, 2])\n        vec_2 = Vector([-3, -2])\n        label_1 = vec_1.coordinate_label()\n        label_2 = vec_2.coordinate_label(color=YELLOW)\n\n        self.add(plane, vec_1, vec_2, label_1, label_2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a large white square in the center of the screen. Below it, three circles are arranged horizontally:\n\n- The first circle is green with 80% opacity.\n- The second circle is yellow with full opacity (default).\n- The third circle is a light red color (`#FF2135`) with 20% opacity.\n\nThis demonstrates different fill colors and opacities applied to shapes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SetFill(Scene):\n    def construct(self):\n        square = Square().scale(2).set_fill(WHITE,1)\n        circle1 = Circle().set_fill(GREEN,0.8)\n        circle2 = Circle().set_fill(YELLOW) # No fill_opacity\n        circle3 = Circle().set_fill(color = '#FF2135', opacity = 0.2)\n        group = Group(circle1,circle2,circle3).arrange()\n        self.add(square)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a large white square in the center of the screen. Below it, three circles are arranged horizontally:\n\n- The first circle is green with 80% opacity.\n- The second circle is yellow with full opacity (default).\n- The third circle is a light red color (`#FF2135`) with 20% opacity.\n\nThis demonstrates different fill colors and opacities applied to shapes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SetFill(Scene):\n    def construct(self):\n        square = Square().scale(2).set_fill(WHITE,1)\n        circle1 = Circle().set_fill(GREEN,0.8)\n        circle2 = Circle().set_fill(YELLOW) # No fill_opacity\n        circle3 = Circle().set_fill(color = '#FF2135', opacity = 0.2)\n        group = Group(circle1,circle2,circle3).arrange()\n        self.add(square)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the word \"Wiggle\" in large text at the center of the screen, then animate it with a playful wiggling motion before pausing briefly."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ApplyingWaves(Scene):\n    def construct(self):\n        tex = Tex(\"Wiggle\").scale(3)\n        self.play(Wiggle(tex))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the word \"Wiggle\" in large text at the center of the screen, then animate it with a playful wiggling motion before pausing briefly."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ApplyingWaves(Scene):\n    def construct(self):\n        tex = Tex(\"Wiggle\").scale(3)\n        self.play(Wiggle(tex))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the word \"Wiggle\" in large text at the center of the screen, then animate it with a playful wiggling motion before pausing briefly."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ApplyingWaves(Scene):\n    def construct(self):\n        tex = Tex(\"Wiggle\").scale(3)\n        self.play(Wiggle(tex))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a translucent green Reuleaux triangle with blue curved edges and one red arc, formed by three arcs connecting three points in an equilateral triangle layout. The shape fades into view at the center of the screen with partial fill and visible stroke outlines."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArcPolygonExample2(Scene):\n    def construct(self):\n        arc_conf = {\"stroke_width\": 3, \"stroke_color\": BLUE,\n            \"fill_opacity\": 0.5, \"color\": GREEN}\n        poly_conf = {\"color\": None}\n        a = [-1, 0, 0]\n        b = [1, 0, 0]\n        c = [0, np.sqrt(3), 0]\n        arc0 = ArcBetweenPoints(a, b, radius=2, **arc_conf)\n        arc1 = ArcBetweenPoints(b, c, radius=2, **arc_conf)\n        arc2 = ArcBetweenPoints(c, a, radius=2, stroke_color=RED)\n        reuleaux_tri = ArcPolygonFromArcs(arc0, arc1, arc2, **poly_conf)\n        self.play(FadeIn(reuleaux_tri))\n        self.wait(2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a translucent green Reuleaux triangle with blue curved edges and one red arc, formed by three arcs connecting three points in an equilateral triangle layout. The shape fades into view at the center of the screen with partial fill and visible stroke outlines."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArcPolygonExample2(Scene):\n    def construct(self):\n        arc_conf = {\"stroke_width\": 3, \"stroke_color\": BLUE,\n            \"fill_opacity\": 0.5, \"color\": GREEN}\n        poly_conf = {\"color\": None}\n        a = [-1, 0, 0]\n        b = [1, 0, 0]\n        c = [0, np.sqrt(3), 0]\n        arc0 = ArcBetweenPoints(a, b, radius=2, **arc_conf)\n        arc1 = ArcBetweenPoints(b, c, radius=2, **arc_conf)\n        arc2 = ArcBetweenPoints(c, a, radius=2, stroke_color=RED)\n        reuleaux_tri = ArcPolygonFromArcs(arc0, arc1, arc2, **poly_conf)\n        self.play(FadeIn(reuleaux_tri))\n        self.wait(2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a fully opaque circle with a sheen effect applied. The sheen has a subtle reflective highlight that appears to come from the down-right (bottom-right) direction, giving the circle a slightly glossy, three-dimensional appearance."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SetSheen(Scene):\n    def construct(self):\n        circle = Circle(fill_opacity=1).set_sheen(-0.3, DR)\n        self.add(circle)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a fully opaque circle with a sheen effect applied. The sheen has a subtle reflective highlight that appears to come from the down-right (bottom-right) direction, giving the circle a slightly glossy, three-dimensional appearance."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SetSheen(Scene):\n    def construct(self):\n        circle = Circle(fill_opacity=1).set_sheen(-0.3, DR)\n        self.add(circle)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display an orange dot at the left end of a horizontal line. As the dot moves smoothly along the line to the right, an orange line dynamically extends from the left endpoint to the moving dot, visually tracing its path in real time similar to a filling progress bar."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MoveAlongPathExample(Scene):\n    def construct(self):\n        d1 = Dot().set_color(ORANGE)\n        l1 = Line(LEFT, RIGHT)\n        l2 = VMobject()\n        self.add(d1, l1, l2)\n        l2.add_updater(lambda x: x.become(Line(LEFT, d1.get_center()).set_color(ORANGE)))\n        self.play(MoveAlongPath(d1, l1), rate_func=linear)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display an orange dot at the left end of a horizontal line. As the dot moves smoothly along the line to the right, an orange line dynamically extends from the left endpoint to the moving dot, visually tracing its path in real time similar to a filling progress bar."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MoveAlongPathExample(Scene):\n    def construct(self):\n        d1 = Dot().set_color(ORANGE)\n        l1 = Line(LEFT, RIGHT)\n        l2 = VMobject()\n        self.add(d1, l1, l2)\n        l2.add_updater(lambda x: x.become(Line(LEFT, d1.get_center()).set_color(ORANGE)))\n        self.play(MoveAlongPath(d1, l1), rate_func=linear)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display an orange dot at the left end of a horizontal line. As the dot moves smoothly along the line to the right, an orange line dynamically extends from the left endpoint to the moving dot, visually tracing its path in real time similar to a filling progress bar."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MoveAlongPathExample(Scene):\n    def construct(self):\n        d1 = Dot().set_color(ORANGE)\n        l1 = Line(LEFT, RIGHT)\n        l2 = VMobject()\n        self.add(d1, l1, l2)\n        l2.add_updater(lambda x: x.become(Line(LEFT, d1.get_center()).set_color(ORANGE)))\n        self.play(MoveAlongPath(d1, l1), rate_func=linear)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 5\u00d75 grid of circles. Each circle is added to the scene one at a time in quick succession, with a smooth animation and a short delay of 0.2 seconds between each addition."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AddWithRunTimeScene(Scene):\n    def construct(self):\n        # A 5x5 grid of circles\n        circles = VGroup(\n            *[Circle(radius=0.5) for _ in range(25)]\n        ).arrange_in_grid(5, 5)\n\n        self.play(\n            Succession(\n                # Add a run_time of 0.2 to wait for 0.2 seconds after\n                # adding the circle, instead of using Wait(0.2) after Add!\n                *[Add(circle, run_time=0.2) for circle in circles],\n                rate_func=smooth,\n            )\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 5\u00d75 grid of circles. Each circle is added to the scene one at a time in quick succession, with a smooth animation and a short delay of 0.2 seconds between each addition."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AddWithRunTimeScene(Scene):\n    def construct(self):\n        # A 5x5 grid of circles\n        circles = VGroup(\n            *[Circle(radius=0.5) for _ in range(25)]\n        ).arrange_in_grid(5, 5)\n\n        self.play(\n            Succession(\n                # Add a run_time of 0.2 to wait for 0.2 seconds after\n                # adding the circle, instead of using Wait(0.2) after Add!\n                *[Add(circle, run_time=0.2) for circle in circles],\n                rate_func=smooth,\n            )\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 5\u00d75 grid of circles. Each circle is added to the scene one at a time in quick succession, with a smooth animation and a short delay of 0.2 seconds between each addition."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AddWithRunTimeScene(Scene):\n    def construct(self):\n        # A 5x5 grid of circles\n        circles = VGroup(\n            *[Circle(radius=0.5) for _ in range(25)]\n        ).arrange_in_grid(5, 5)\n\n        self.play(\n            Succession(\n                # Add a run_time of 0.2 to wait for 0.2 seconds after\n                # adding the circle, instead of using Wait(0.2) after Add!\n                *[Add(circle, run_time=0.2) for circle in circles],\n                rate_func=smooth,\n            )\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the word \u201cBlinking\u201d in medium-large text on the screen, then animate it blinking three times by briefly disappearing and reappearing."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BlinkingExample(Scene):\n    def construct(self):\n        text = Text(\"Blinking\").scale(1.5)\n        self.add(text)\n        self.play(Blink(text, blinks=3))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the word \u201cBlinking\u201d in medium-large text on the screen, then animate it blinking three times by briefly disappearing and reappearing."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BlinkingExample(Scene):\n    def construct(self):\n        text = Text(\"Blinking\").scale(1.5)\n        self.add(text)\n        self.play(Blink(text, blinks=3))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a square on the screen, then animate it disappearing as if being undone or erased."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShowUncreate(Scene):\n    def construct(self):\n        self.play(Uncreate(Square()))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a square on the screen, then animate it disappearing as if being undone or erased."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShowUncreate(Scene):\n    def construct(self):\n        self.play(Uncreate(Square()))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the Manim logo banner animation on a light beige background:  \n- The banner is drawn on screen using the light theme style.  \n- It then expands in size.  \n- After a brief pause, the banner is smoothly removed with an unwrite animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LightThemeBanner(Scene):\n    def construct(self):\n        self.camera.background_color = \"#ece6e2\"\n        banner = ManimBanner(dark_theme=False)\n        self.play(banner.create())\n        self.play(banner.expand())\n        self.wait()\n        self.play(Unwrite(banner))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the Manim logo banner animation on a light beige background:  \n- The banner is drawn on screen using the light theme style.  \n- It then expands in size.  \n- After a brief pause, the banner is smoothly removed with an unwrite animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LightThemeBanner(Scene):\n    def construct(self):\n        self.camera.background_color = \"#ece6e2\"\n        banner = ManimBanner(dark_theme=False)\n        self.play(banner.create())\n        self.play(banner.expand())\n        self.wait()\n        self.play(Unwrite(banner))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the Manim logo banner animation on a light beige background:  \n- The banner is drawn on screen using the light theme style.  \n- It then expands in size.  \n- After a brief pause, the banner is smoothly removed with an unwrite animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LightThemeBanner(Scene):\n    def construct(self):\n        self.camera.background_color = \"#ece6e2\"\n        banner = ManimBanner(dark_theme=False)\n        self.play(banner.create())\n        self.play(banner.expand())\n        self.wait()\n        self.play(Unwrite(banner))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a large circle and a copy of it at the center of the screen. The copy is transformed using a complex exponential function, creating a warped version of the original. Then, over three seconds, the transformed circle continuously morphs as if it's being rotated and distorted by a dynamic complex function, gradually completing a full rotation while changing color to blue."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ApplyFuncExample(Scene):\n    def construct(self):\n        circ = Circle().scale(1.5)\n        circ_ref = circ.copy()\n        circ.apply_complex_function(\n            lambda x: np.exp(x*1j)\n        )\n        t = ValueTracker(0)\n        circ.add_updater(\n            lambda x: x.become(circ_ref.copy().apply_complex_function(\n                lambda x: np.exp(x+t.get_value()*1j)\n            )).set_color(BLUE)\n        )\n        self.add(circ_ref)\n        self.play(TransformFromCopy(circ_ref, circ))\n        self.play(t.animate.set_value(TAU), run_time=3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a large circle and a copy of it at the center of the screen. The copy is transformed using a complex exponential function, creating a warped version of the original. Then, over three seconds, the transformed circle continuously morphs as if it's being rotated and distorted by a dynamic complex function, gradually completing a full rotation while changing color to blue."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ApplyFuncExample(Scene):\n    def construct(self):\n        circ = Circle().scale(1.5)\n        circ_ref = circ.copy()\n        circ.apply_complex_function(\n            lambda x: np.exp(x*1j)\n        )\n        t = ValueTracker(0)\n        circ.add_updater(\n            lambda x: x.become(circ_ref.copy().apply_complex_function(\n                lambda x: np.exp(x+t.get_value()*1j)\n            )).set_color(BLUE)\n        )\n        self.add(circ_ref)\n        self.play(TransformFromCopy(circ_ref, circ))\n        self.play(t.animate.set_value(TAU), run_time=3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a bar chart with 11 bars representing values from -10 to 10 in increments of 2. After the chart appears, the bar values are updated to show the reversed sequence (from 10 down to -10). Each bar is labeled with its new value. The chart and updated labels appear without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ChangeBarValuesExample(Scene):\n    def construct(self):\n        values=[-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]\n\n        chart = BarChart(\n            values,\n            y_range=[-10, 10, 2],\n            y_axis_config={\"font_size\": 24},\n        )\n        self.add(chart)\n\n        chart.change_bar_values(list(reversed(values)))\n        self.add(chart.get_bar_labels(font_size=24))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a bar chart with 11 bars representing values from -10 to 10 in increments of 2. After the chart appears, the bar values are updated to show the reversed sequence (from 10 down to -10). Each bar is labeled with its new value. The chart and updated labels appear without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ChangeBarValuesExample(Scene):\n    def construct(self):\n        values=[-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]\n\n        chart = BarChart(\n            values,\n            y_range=[-10, 10, 2],\n            y_axis_config={\"font_size\": 24},\n        )\n        self.add(chart)\n\n        chart.change_bar_values(list(reversed(values)))\n        self.add(chart.get_bar_labels(font_size=24))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a layered neural network graph with four layers of nodes arranged in a partite layout. The layers contain 2, 3, 3, and 2 nodes respectively. Each node in one layer is connected to every node in the next layer, forming a fully connected feedforward structure. The nodes are evenly spaced and styled as small circles, visually representing a simple artificial neural network architecture."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LinearNN(Scene):\n    def construct(self):\n        edges = []\n        partitions = []\n        c = 0\n        layers = [2, 3, 3, 2]  # the number of neurons in each layer\n\n        for i in layers:\n            partitions.append(list(range(c + 1, c + i + 1)))\n            c += i\n        for i, v in enumerate(layers[1:]):\n                last = sum(layers[:i+1])\n                for j in range(v):\n                    for k in range(last - layers[i], last):\n                        edges.append((k + 1, j + last + 1))\n\n        vertices = np.arange(1, sum(layers) + 1)\n\n        graph = Graph(\n            vertices,\n            edges,\n            layout='partite',\n            partitions=partitions,\n            layout_scale=3,\n            vertex_config={'radius': 0.20},\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a layered neural network graph with four layers of nodes arranged in a partite layout. The layers contain 2, 3, 3, and 2 nodes respectively. Each node in one layer is connected to every node in the next layer, forming a fully connected feedforward structure. The nodes are evenly spaced and styled as small circles, visually representing a simple artificial neural network architecture."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LinearNN(Scene):\n    def construct(self):\n        edges = []\n        partitions = []\n        c = 0\n        layers = [2, 3, 3, 2]  # the number of neurons in each layer\n\n        for i in layers:\n            partitions.append(list(range(c + 1, c + i + 1)))\n            c += i\n        for i, v in enumerate(layers[1:]):\n                last = sum(layers[:i+1])\n                for j in range(v):\n                    for k in range(last - layers[i], last):\n                        edges.append((k + 1, j + last + 1))\n\n        vertices = np.arange(1, sum(layers) + 1)\n\n        graph = Graph(\n            vertices,\n            edges,\n            layout='partite',\n            partitions=partitions,\n            layout_scale=3,\n            vertex_config={'radius': 0.20},\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of coordinate axes with labeled ticks, then place a dot at the point \\((-4, 1.5)\\). A horizontal line extends from this point across the graph, visually marking the y-value of the dot."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetHorizontalLineExample(Scene):\n    def construct(self):\n        ax = Axes().add_coordinates()\n        point = ax @ (-4, 1.5)\n\n        dot = Dot(point)\n        line = ax.get_horizontal_line(point, line_func=Line)\n\n        self.add(ax, line, dot)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of coordinate axes with labeled ticks, then place a dot at the point \\((-4, 1.5)\\). A horizontal line extends from this point across the graph, visually marking the y-value of the dot."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetHorizontalLineExample(Scene):\n    def construct(self):\n        ax = Axes().add_coordinates()\n        point = ax @ (-4, 1.5)\n\n        dot = Dot(point)\n        line = ax.get_horizontal_line(point, line_func=Line)\n\n        self.add(ax, line, dot)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of coordinate axes with labeled ticks, then place a dot at the point \\((-3.5, 2)\\). A vertical dashed line extends from this point downward to the x-axis, visually marking the x-coordinate of the dot."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetVerticalLineExample(Scene):\n    def construct(self):\n        ax = Axes().add_coordinates()\n        point = ax.coords_to_point(-3.5, 2)\n\n        dot = Dot(point)\n        line = ax.get_vertical_line(point, line_config={\"dashed_ratio\": 0.85})\n\n        self.add(ax, line, dot)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of coordinate axes with labeled ticks, then place a dot at the point \\((-3.5, 2)\\). A vertical dashed line extends from this point downward to the x-axis, visually marking the x-coordinate of the dot."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetVerticalLineExample(Scene):\n    def construct(self):\n        ax = Axes().add_coordinates()\n        point = ax.coords_to_point(-3.5, 2)\n\n        dot = Dot(point)\n        line = ax.get_vertical_line(point, line_config={\"dashed_ratio\": 0.85})\n\n        self.add(ax, line, dot)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the LaTeX logo rendered using the LaTeX typesetting system in large font at the center of the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass HelloLaTeX(Scene):\n    def construct(self):\n        tex = Tex(r\"\\LaTeX\", font_size=144)\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the LaTeX logo rendered using the LaTeX typesetting system in large font at the center of the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass HelloLaTeX(Scene):\n    def construct(self):\n        tex = Tex(r\"\\LaTeX\", font_size=144)\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \u201cChanging default values is easy!\u201d in black on a white background. The text uses a modified default color setting for `Text` objects, which is temporarily changed to black for this scene and then reset to white afterward."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nconfig.background_color = WHITE\n\nclass ChangedDefaultTextcolor(Scene):\n    def construct(self):\n        Text.set_default(color=BLACK)\n        self.add(Text(\"Changing default values is easy!\"))\n\n        # we revert the colour back to the default to prevent a bug in the docs.\n        Text.set_default(color=WHITE)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \u201cChanging default values is easy!\u201d in black on a white background. The text uses a modified default color setting for `Text` objects, which is temporarily changed to black for this scene and then reset to white afterward."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nconfig.background_color = WHITE\n\nclass ChangedDefaultTextcolor(Scene):\n    def construct(self):\n        Text.set_default(color=BLACK)\n        self.add(Text(\"Changing default values is easy!\"))\n\n        # we revert the colour back to the default to prevent a bug in the docs.\n        Text.set_default(color=WHITE)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the text \u201cChanging default values is easy!\u201d in black on a white background. The text uses a modified default color setting for `Text` objects, which is temporarily changed to black for this scene and then reset to white afterward."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nconfig.background_color = WHITE\n\nclass ChangedDefaultTextcolor(Scene):\n    def construct(self):\n        Text.set_default(color=BLACK)\n        self.add(Text(\"Changing default values is easy!\"))\n\n        # we revert the colour back to the default to prevent a bug in the docs.\n        Text.set_default(color=WHITE)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 4\u00d74 math table with outer borders. The top row and leftmost column serve as headers, with the top-left cell containing a plus sign. The remaining cells show the sums of the corresponding row and column headers."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MathTableExample(Scene):\n    def construct(self):\n        t0 = MathTable(\n            [[\"+\", 0, 5, 10],\n            [0, 0, 5, 10],\n            [2, 2, 7, 12],\n            [4, 4, 9, 14]],\n            include_outer_lines=True)\n        self.add(t0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 4\u00d74 math table with outer borders. The top row and leftmost column serve as headers, with the top-left cell containing a plus sign. The remaining cells show the sums of the corresponding row and column headers."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MathTableExample(Scene):\n    def construct(self):\n        t0 = MathTable(\n            [[\"+\", 0, 5, 10],\n            [0, 0, 5, 10],\n            [2, 2, 7, 12],\n            [4, 4, 9, 14]],\n            include_outer_lines=True)\n        self.add(t0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a large, semi-transparent background rectangle filled with a gradient of teal, red, and yellow. In front of it, three matrices are arranged horizontally:\n\n- The first matrix has background rectangles behind each individual entry.\n- The second matrix has a single background rectangle behind the entire matrix.\n- The third matrix has no background rectangles.\n\nAll elements appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BackgroundRectanglesExample(Scene):\n    def construct(self):\n        background= Rectangle().scale(3.2)\n        background.set_fill(opacity=.5)\n        background.set_color([TEAL, RED, YELLOW])\n        self.add(background)\n        m0 = Matrix([[12, -30], [-1, 15]],\n            add_background_rectangles_to_entries=True)\n        m1 = Matrix([[2, 0], [-1, 1]],\n            include_background_rectangle=True)\n        m2 = Matrix([[12, -30], [-1, 15]])\n        g = Group(m0, m1, m2).arrange(buff=2)\n        self.add(g)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a large, semi-transparent background rectangle filled with a gradient of teal, red, and yellow. In front of it, three matrices are arranged horizontally:\n\n- The first matrix has background rectangles behind each individual entry.\n- The second matrix has a single background rectangle behind the entire matrix.\n- The third matrix has no background rectangles.\n\nAll elements appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BackgroundRectanglesExample(Scene):\n    def construct(self):\n        background= Rectangle().scale(3.2)\n        background.set_fill(opacity=.5)\n        background.set_color([TEAL, RED, YELLOW])\n        self.add(background)\n        m0 = Matrix([[12, -30], [-1, 15]],\n            add_background_rectangles_to_entries=True)\n        m1 = Matrix([[2, 0], [-1, 1]],\n            include_background_rectangle=True)\n        m2 = Matrix([[12, -30], [-1, 15]])\n        g = Group(m0, m1, m2).arrange(buff=2)\n        self.add(g)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a large, semi-transparent background rectangle filled with a gradient of teal, red, and yellow. In front of it, three matrices are arranged horizontally:\n\n- The first matrix has background rectangles behind each individual entry.\n- The second matrix has a single background rectangle behind the entire matrix.\n- The third matrix has no background rectangles.\n\nAll elements appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BackgroundRectanglesExample(Scene):\n    def construct(self):\n        background= Rectangle().scale(3.2)\n        background.set_fill(opacity=.5)\n        background.set_color([TEAL, RED, YELLOW])\n        self.add(background)\n        m0 = Matrix([[12, -30], [-1, 15]],\n            add_background_rectangles_to_entries=True)\n        m1 = Matrix([[2, 0], [-1, 1]],\n            include_background_rectangle=True)\n        m2 = Matrix([[12, -30], [-1, 15]])\n        g = Group(m0, m1, m2).arrange(buff=2)\n        self.add(g)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three regular polygons arranged horizontally and scaled up:\n\n1. A standard hexagon.\n2. A green hexagon rotated by 30 degrees.\n3. A red decagon (10-sided polygon).\n\nEach shape is evenly spaced from the others."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RegularPolygonExample(Scene):\n    def construct(self):\n        poly_1 = RegularPolygon(n=6)\n        poly_2 = RegularPolygon(n=6, start_angle=30*DEGREES, color=GREEN)\n        poly_3 = RegularPolygon(n=10, color=RED)\n\n        poly_group = Group(poly_1, poly_2, poly_3).scale(1.5).arrange(buff=1)\n        self.add(poly_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three regular polygons arranged horizontally and scaled up:\n\n1. A standard hexagon.\n2. A green hexagon rotated by 30 degrees.\n3. A red decagon (10-sided polygon).\n\nEach shape is evenly spaced from the others."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RegularPolygonExample(Scene):\n    def construct(self):\n        poly_1 = RegularPolygon(n=6)\n        poly_2 = RegularPolygon(n=6, start_angle=30*DEGREES, color=GREEN)\n        poly_3 = RegularPolygon(n=10, color=RED)\n\n        poly_group = Group(poly_1, poly_2, poly_3).scale(1.5).arrange(buff=1)\n        self.add(poly_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display three regular polygons arranged horizontally and scaled up:\n\n1. A standard hexagon.\n2. A green hexagon rotated by 30 degrees.\n3. A red decagon (10-sided polygon).\n\nEach shape is evenly spaced from the others."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RegularPolygonExample(Scene):\n    def construct(self):\n        poly_1 = RegularPolygon(n=6)\n        poly_2 = RegularPolygon(n=6, start_angle=30*DEGREES, color=GREEN)\n        poly_3 = RegularPolygon(n=10, color=RED)\n\n        poly_group = Group(poly_1, poly_2, poly_3).scale(1.5).arrange(buff=1)\n        self.add(poly_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 matrix  \n\\[\n\\begin{bmatrix}\n\\pi & 3 \\\\\n1 & 5\n\\end{bmatrix}\n\\]  \nwith a surrounding rectangle highlighting the second column (containing the numbers 3 and 5). The matrix and highlight appear on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetColumnsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[r\"\\pi\", 3], [1, 5]])\n        m0.add(SurroundingRectangle(m0.get_columns()[1]))\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 matrix  \n\\[\n\\begin{bmatrix}\n\\pi & 3 \\\\\n1 & 5\n\\end{bmatrix}\n\\]  \nwith a surrounding rectangle highlighting the second column (containing the numbers 3 and 5). The matrix and highlight appear on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetColumnsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[r\"\\pi\", 3], [1, 5]])\n        m0.add(SurroundingRectangle(m0.get_columns()[1]))\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \"Hello World!\" at the center of the screen, then animate its color gradually fading into red, creating a smooth transition effect."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FadeToColorExample(Scene):\n    def construct(self):\n        self.play(FadeToColor(Text(\"Hello World!\"), color=RED))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \"Hello World!\" at the center of the screen, then animate its color gradually fading into red, creating a smooth transition effect."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FadeToColorExample(Scene):\n    def construct(self):\n        self.play(FadeToColor(Text(\"Hello World!\"), color=RED))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the text \"Hello World!\" at the center of the screen, then animate its color gradually fading into red, creating a smooth transition effect."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FadeToColorExample(Scene):\n    def construct(self):\n        self.play(FadeToColor(Text(\"Hello World!\"), color=RED))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a red circle with partial transparency at the center of the screen. After a brief pause, the circle smoothly morphs into the shape of a blue square with lower opacity, matching the square\u2019s points as closely as possible during the transformation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MatchPointsScene(Scene):\n    def construct(self):\n        circ = Circle(fill_color=RED, fill_opacity=0.8)\n        square = Square(fill_color=BLUE, fill_opacity=0.2)\n        self.add(circ)\n        self.wait(0.5)\n        self.play(circ.animate.match_points(square))\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a red circle with partial transparency at the center of the screen. After a brief pause, the circle smoothly morphs into the shape of a blue square with lower opacity, matching the square\u2019s points as closely as possible during the transformation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MatchPointsScene(Scene):\n    def construct(self):\n        circ = Circle(fill_color=RED, fill_opacity=0.8)\n        square = Square(fill_color=BLUE, fill_opacity=0.2)\n        self.add(circ)\n        self.wait(0.5)\n        self.play(circ.animate.match_points(square))\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a red circle with partial transparency at the center of the screen. After a brief pause, the circle smoothly morphs into the shape of a blue square with lower opacity, matching the square\u2019s points as closely as possible during the transformation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MatchPointsScene(Scene):\n    def construct(self):\n        circ = Circle(fill_color=RED, fill_opacity=0.8)\n        square = Square(fill_color=BLUE, fill_opacity=0.2)\n        self.add(circ)\n        self.wait(0.5)\n        self.play(circ.animate.match_points(square))\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two angles formed at the origin: one standard angle between the upward and leftward directions, and a larger red angle with a thicker stroke between the diagonal upper-left and rightward directions, drawn in the opposite (reflex) direction."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AngleFromThreePointsExample(Scene):\n    def construct(self):\n        sample_angle = Angle.from_three_points(UP, ORIGIN, LEFT)\n        red_angle = Angle.from_three_points(LEFT + UP, ORIGIN, RIGHT, radius=.8, quadrant=(-1,-1), color=RED, stroke_width=8, other_angle=True)\n        self.add(red_angle, sample_angle)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two angles formed at the origin: one standard angle between the upward and leftward directions, and a larger red angle with a thicker stroke between the diagonal upper-left and rightward directions, drawn in the opposite (reflex) direction."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AngleFromThreePointsExample(Scene):\n    def construct(self):\n        sample_angle = Angle.from_three_points(UP, ORIGIN, LEFT)\n        red_angle = Angle.from_three_points(LEFT + UP, ORIGIN, RIGHT, radius=.8, quadrant=(-1,-1), color=RED, stroke_width=8, other_angle=True)\n        self.add(red_angle, sample_angle)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display two angles formed at the origin: one standard angle between the upward and leftward directions, and a larger red angle with a thicker stroke between the diagonal upper-left and rightward directions, drawn in the opposite (reflex) direction."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AngleFromThreePointsExample(Scene):\n    def construct(self):\n        sample_angle = Angle.from_three_points(UP, ORIGIN, LEFT)\n        red_angle = Angle.from_three_points(LEFT + UP, ORIGIN, RIGHT, radius=.8, quadrant=(-1,-1), color=RED, stroke_width=8, other_angle=True)\n        self.add(red_angle, sample_angle)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the phrase \"Hello \\LaTeX\" in large blue text, with the LaTeX logo rendered using LaTeX typesetting."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaTeXAttributes(Scene):\n    def construct(self):\n        tex = Tex(r'Hello \\LaTeX', color=BLUE, font_size=144)\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the phrase \"Hello \\LaTeX\" in large blue text, with the LaTeX logo rendered using LaTeX typesetting."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaTeXAttributes(Scene):\n    def construct(self):\n        tex = Tex(r'Hello \\LaTeX', color=BLUE, font_size=144)\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a streamlines vector field where each line flows according to a custom function combining sine, cosine, and position-based scaling. Two rectangles are overlaid: a smaller one labeled \"Spawning Area\" indicating where streamlines originate, and a larger one labeled \"Flowing Area\" showing the full region where the streamlines move. Both labels have semi-transparent background rectangles for readability."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpawningAndFlowingArea(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[0]) * UR + np.cos(pos[1]) * LEFT + pos / 5\n        stream_lines = StreamLines(\n            func, x_range=[-3, 3, 0.2], y_range=[-2, 2, 0.2], padding=1\n        )\n\n        spawning_area = Rectangle(width=6, height=4)\n        flowing_area = Rectangle(width=8, height=6)\n        labels = [Tex(\"Spawning Area\"), Tex(\"Flowing Area\").shift(DOWN * 2.5)]\n        for lbl in labels:\n            lbl.add_background_rectangle(opacity=0.6, buff=0.05)\n\n        self.add(stream_lines, spawning_area, flowing_area, *labels)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a streamlines vector field where each line flows according to a custom function combining sine, cosine, and position-based scaling. Two rectangles are overlaid: a smaller one labeled \"Spawning Area\" indicating where streamlines originate, and a larger one labeled \"Flowing Area\" showing the full region where the streamlines move. Both labels have semi-transparent background rectangles for readability."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpawningAndFlowingArea(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[0]) * UR + np.cos(pos[1]) * LEFT + pos / 5\n        stream_lines = StreamLines(\n            func, x_range=[-3, 3, 0.2], y_range=[-2, 2, 0.2], padding=1\n        )\n\n        spawning_area = Rectangle(width=6, height=4)\n        flowing_area = Rectangle(width=8, height=6)\n        labels = [Tex(\"Spawning Area\"), Tex(\"Flowing Area\").shift(DOWN * 2.5)]\n        for lbl in labels:\n            lbl.add_background_rectangle(opacity=0.6, buff=0.05)\n\n        self.add(stream_lines, spawning_area, flowing_area, *labels)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a complex plane with a dot initially positioned at the complex number \\(-2 + 1i\\). As the animation progresses, the dot moves smoothly to new positions based on updates to a complex value tracker:\n\n1. Moves to \\(3 + 2i\\),\n2. Rotates 90\u00b0 counterclockwise by multiplying the value by \\(i\\),\n3. Moves downward by subtracting \\(2i\\),\n4. Finally, shifts again by dividing the current value by \\(-2 + 3i\\).\n\nEach movement reflects the corresponding complex arithmetic operation visually on the plane."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ComplexValueTrackerExample(Scene):\n    def construct(self):\n        tracker = ComplexValueTracker(-2+1j)\n        dot = Dot().add_updater(\n            lambda x: x.move_to(tracker.points)\n        )\n\n        self.add(NumberPlane(), dot)\n\n        self.play(tracker.animate.set_value(3+2j))\n        self.play(tracker.animate.set_value(tracker.get_value() * 1j))\n        self.play(tracker.animate.set_value(tracker.get_value() - 2j))\n        self.play(tracker.animate.set_value(tracker.get_value() / (-2 + 3j)))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a complex plane with a dot initially positioned at the complex number \\(-2 + 1i\\). As the animation progresses, the dot moves smoothly to new positions based on updates to a complex value tracker:\n\n1. Moves to \\(3 + 2i\\),\n2. Rotates 90\u00b0 counterclockwise by multiplying the value by \\(i\\),\n3. Moves downward by subtracting \\(2i\\),\n4. Finally, shifts again by dividing the current value by \\(-2 + 3i\\).\n\nEach movement reflects the corresponding complex arithmetic operation visually on the plane."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ComplexValueTrackerExample(Scene):\n    def construct(self):\n        tracker = ComplexValueTracker(-2+1j)\n        dot = Dot().add_updater(\n            lambda x: x.move_to(tracker.points)\n        )\n\n        self.add(NumberPlane(), dot)\n\n        self.play(tracker.animate.set_value(3+2j))\n        self.play(tracker.animate.set_value(tracker.get_value() * 1j))\n        self.play(tracker.animate.set_value(tracker.get_value() - 2j))\n        self.play(tracker.animate.set_value(tracker.get_value() / (-2 + 3j)))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \u201cHello world\u201d in large font (size 144) centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass HelloWorld(Scene):\n    def construct(self):\n        text = Text(\"Hello world\", font_size=144)\n        self.add(text)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \u201cHello world\u201d in large font (size 144) centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass HelloWorld(Scene):\n    def construct(self):\n        text = Text(\"Hello world\", font_size=144)\n        self.add(text)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D coordinate system with labeled axes. The y-axis is labeled with the text \u201c\\( y \\)-label\u201d using LaTeX formatting. The camera is set at an angled perspective to clearly show the 3D structure and the position of the y-axis label in space."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetYAxisLabelExample(ThreeDScene):\n    def construct(self):\n        ax = ThreeDAxes()\n        lab = ax.get_y_axis_label(Tex(\"$y$-label\"))\n        self.set_camera_orientation(phi=2*PI/5, theta=PI/5)\n        self.add(ax, lab)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D coordinate system with labeled axes. The y-axis is labeled with the text \u201c\\( y \\)-label\u201d using LaTeX formatting. The camera is set at an angled perspective to clearly show the 3D structure and the position of the y-axis label in space."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetYAxisLabelExample(ThreeDScene):\n    def construct(self):\n        ax = ThreeDAxes()\n        lab = ax.get_y_axis_label(Tex(\"$y$-label\"))\n        self.set_camera_orientation(phi=2*PI/5, theta=PI/5)\n        self.add(ax, lab)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 3D coordinate system with labeled axes. The y-axis is labeled with the text \u201c\\( y \\)-label\u201d using LaTeX formatting. The camera is set at an angled perspective to clearly show the 3D structure and the position of the y-axis label in space."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetYAxisLabelExample(ThreeDScene):\n    def construct(self):\n        ax = ThreeDAxes()\n        lab = ax.get_y_axis_label(Tex(\"$y$-label\"))\n        self.set_camera_orientation(phi=2*PI/5, theta=PI/5)\n        self.add(ax, lab)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a filled triangle at the center of the screen and a square positioned on the left edge. As the animation begins, the triangle continuously spins around the center of the screen, while the square smoothly moves from the left edge to the right edge. The triangle keeps rotating throughout the square\u2019s movement. This gives an illusion that the triangle is moving to the left while in actuality it is the square at the back moving to the right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpinningTriangle(Scene):\n    def construct(self):\n        tri = Triangle().set_fill(opacity=1).set_z_index(2)\n        sq = Square().to_edge(LEFT)\n\n        # will keep spinning while there is an animation going on\n        always_rotate(tri, rate=2*PI, about_point=ORIGIN)\n\n        self.add(tri, sq)\n        self.play(sq.animate.to_edge(RIGHT), rate_func=linear, run_time=1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a filled triangle at the center of the screen and a square positioned on the left edge. As the animation begins, the triangle continuously spins around the center of the screen, while the square smoothly moves from the left edge to the right edge. The triangle keeps rotating throughout the square\u2019s movement. This gives an illusion that the triangle is moving to the left while in actuality it is the square at the back moving to the right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpinningTriangle(Scene):\n    def construct(self):\n        tri = Triangle().set_fill(opacity=1).set_z_index(2)\n        sq = Square().to_edge(LEFT)\n\n        # will keep spinning while there is an animation going on\n        always_rotate(tri, rate=2*PI, about_point=ORIGIN)\n\n        self.add(tri, sq)\n        self.play(sq.animate.to_edge(RIGHT), rate_func=linear, run_time=1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two groups of shapes: on the upper left, a square and a circle shifted diagonally; on the upper right, a circle and a triangle also shifted diagonally. Below each group is a copy of the same arrangement.\n\nFirst, both upper groups fade in. Then:\n\n- The upper left group transforms into the upper right group using a smooth fade transition.\n- The lower left group transforms into the lower right group using a piecewise fade, where each individual shape fades and morphs into its corresponding target.\n\nFinally, all shapes fade out together."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FadeTransformSubmobjects(Scene):\n    def construct(self):\n        src = VGroup(Square(), Circle().shift(LEFT + UP))\n        src.shift(3*LEFT + 2*UP)\n        src_copy = src.copy().shift(4*DOWN)\n\n        target = VGroup(Circle(), Triangle().shift(RIGHT + DOWN))\n        target.shift(3*RIGHT + 2*UP)\n        target_copy = target.copy().shift(4*DOWN)\n\n        self.play(FadeIn(src), FadeIn(src_copy))\n        self.play(\n            FadeTransform(src, target),\n            FadeTransformPieces(src_copy, target_copy)\n        )\n        self.play(*[FadeOut(mobj) for mobj in self.mobjects])\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two groups of shapes: on the upper left, a square and a circle shifted diagonally; on the upper right, a circle and a triangle also shifted diagonally. Below each group is a copy of the same arrangement.\n\nFirst, both upper groups fade in. Then:\n\n- The upper left group transforms into the upper right group using a smooth fade transition.\n- The lower left group transforms into the lower right group using a piecewise fade, where each individual shape fades and morphs into its corresponding target.\n\nFinally, all shapes fade out together."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FadeTransformSubmobjects(Scene):\n    def construct(self):\n        src = VGroup(Square(), Circle().shift(LEFT + UP))\n        src.shift(3*LEFT + 2*UP)\n        src_copy = src.copy().shift(4*DOWN)\n\n        target = VGroup(Circle(), Triangle().shift(RIGHT + DOWN))\n        target.shift(3*RIGHT + 2*UP)\n        target_copy = target.copy().shift(4*DOWN)\n\n        self.play(FadeIn(src), FadeIn(src_copy))\n        self.play(\n            FadeTransform(src, target),\n            FadeTransformPieces(src_copy, target_copy)\n        )\n        self.play(*[FadeOut(mobj) for mobj in self.mobjects])\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two colored sectors on screen: a red sector with a full 360-degree angle centered on the right, and a pink sector with a 60-degree angle positioned to the left."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleSector(Scene):\n    def construct(self):\n        sector = Sector(radius=2)\n        sector2 = Sector(radius=2.5, angle=60*DEGREES).move_to([-3, 0, 0])\n        sector.set_color(RED)\n        sector2.set_color(PINK)\n        self.add(sector, sector2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two colored sectors on screen: a red sector with a full 360-degree angle centered on the right, and a pink sector with a 60-degree angle positioned to the left."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleSector(Scene):\n    def construct(self):\n        sector = Sector(radius=2)\n        sector2 = Sector(radius=2.5, angle=60*DEGREES).move_to([-3, 0, 0])\n        sector.set_color(RED)\n        sector2.set_color(PINK)\n        self.add(sector, sector2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display two colored sectors on screen: a red sector with a full 360-degree angle centered on the right, and a pink sector with a 60-degree angle positioned to the left."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleSector(Scene):\n    def construct(self):\n        sector = Sector(radius=2)\n        sector2 = Sector(radius=2.5, angle=60*DEGREES).move_to([-3, 0, 0])\n        sector.set_color(RED)\n        sector2.set_color(PINK)\n        self.add(sector, sector2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two rounded rectangles arranged horizontally:\n\n1. A standard-sized rectangle with mildly rounded corners.\n2. A larger square-shaped rectangle with more prominently rounded corners, giving it a softer, more circular appearance."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RoundedRectangleExample(Scene):\n    def construct(self):\n        rect_1 = RoundedRectangle(corner_radius=0.5)\n        rect_2 = RoundedRectangle(corner_radius=1.5, height=4.0, width=4.0)\n\n        rect_group = Group(rect_1, rect_2).arrange(buff=1)\n        self.add(rect_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two rounded rectangles arranged horizontally:\n\n1. A standard-sized rectangle with mildly rounded corners.\n2. A larger square-shaped rectangle with more prominently rounded corners, giving it a softer, more circular appearance."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RoundedRectangleExample(Scene):\n    def construct(self):\n        rect_1 = RoundedRectangle(corner_radius=0.5)\n        rect_2 = RoundedRectangle(corner_radius=1.5, height=4.0, width=4.0)\n\n        rect_group = Group(rect_1, rect_2).arrange(buff=1)\n        self.add(rect_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display four different number lines arranged vertically with varied styles:\n\n- The top line is blue, spans from -10 to 10 with tick marks every 2 units, includes numbers labeled above the line.\n- The second line has a smaller unit size, includes numbers with elongated ticks at -2 and 4, and the number 6 is highlighted in red.\n- The third line spans from -2.5 to 2.5 with 0.5 unit intervals, is 12 units long, and displays numbers with two decimal places.\n- The bottom line spans from -5 to 5 with unit intervals, includes an arrow tip at the end, and is slightly rotated by 10 degrees.\n\nAll number lines appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass NumberLineExample(Scene):\n    def construct(self):\n        l0 = NumberLine(\n            x_range=[-10, 10, 2],\n            length=10,\n            color=BLUE,\n            include_numbers=True,\n            label_direction=UP,\n        )\n\n        l1 = NumberLine(\n            x_range=[-10, 10, 2],\n            unit_size=0.5,\n            numbers_with_elongated_ticks=[-2, 4],\n            include_numbers=True,\n            font_size=24,\n        )\n        num6 = l1.numbers[8]\n        num6.set_color(RED)\n\n        l2 = NumberLine(\n            x_range=[-2.5, 2.5 + 0.5, 0.5],\n            length=12,\n            decimal_number_config={\"num_decimal_places\": 2},\n            include_numbers=True,\n        )\n\n        l3 = NumberLine(\n            x_range=[-5, 5 + 1, 1],\n            length=6,\n            include_tip=True,\n            include_numbers=True,\n            rotation=10 * DEGREES,\n        )\n\n        line_group = VGroup(l0, l1, l2, l3).arrange(DOWN, buff=1)\n        self.add(line_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display four different number lines arranged vertically with varied styles:\n\n- The top line is blue, spans from -10 to 10 with tick marks every 2 units, includes numbers labeled above the line.\n- The second line has a smaller unit size, includes numbers with elongated ticks at -2 and 4, and the number 6 is highlighted in red.\n- The third line spans from -2.5 to 2.5 with 0.5 unit intervals, is 12 units long, and displays numbers with two decimal places.\n- The bottom line spans from -5 to 5 with unit intervals, includes an arrow tip at the end, and is slightly rotated by 10 degrees.\n\nAll number lines appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass NumberLineExample(Scene):\n    def construct(self):\n        l0 = NumberLine(\n            x_range=[-10, 10, 2],\n            length=10,\n            color=BLUE,\n            include_numbers=True,\n            label_direction=UP,\n        )\n\n        l1 = NumberLine(\n            x_range=[-10, 10, 2],\n            unit_size=0.5,\n            numbers_with_elongated_ticks=[-2, 4],\n            include_numbers=True,\n            font_size=24,\n        )\n        num6 = l1.numbers[8]\n        num6.set_color(RED)\n\n        l2 = NumberLine(\n            x_range=[-2.5, 2.5 + 0.5, 0.5],\n            length=12,\n            decimal_number_config={\"num_decimal_places\": 2},\n            include_numbers=True,\n        )\n\n        l3 = NumberLine(\n            x_range=[-5, 5 + 1, 1],\n            length=6,\n            include_tip=True,\n            include_numbers=True,\n            rotation=10 * DEGREES,\n        )\n\n        line_group = VGroup(l0, l1, l2, l3).arrange(DOWN, buff=1)\n        self.add(line_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \u201cNoto Sans\u201d centered on the screen using the \u201cNoto Sans\u201d font."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FontsExample(Scene):\n    def construct(self):\n        ft = Text(\"Noto Sans\", font=\"Noto Sans\")\n        self.add(ft)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \u201cNoto Sans\u201d centered on the screen using the \u201cNoto Sans\u201d font."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FontsExample(Scene):\n    def construct(self):\n        ft = Text(\"Noto Sans\", font=\"Noto Sans\")\n        self.add(ft)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a coordinate grid ranging from 0 to 1 on both axes, with tick marks every 0.05 units and labeled every 0.1 units. The x- and y-axes are labeled \"x\" and \"y\" respectively. A series of white graphs are plotted: one set for \\( y = x^n \\) and another for \\( y = x^{1/n} \\), where \\( n \\) ranges from 1 to 20 in steps of 0.5. At the point (1, 1), a yellow dot is placed, with blue horizontal and vertical lines intersecting at that point, and a label \"(1,1)\" appears nearby. A title above the scene describes the plotted functions."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CoordSysExample(Scene):\n    def construct(self):\n        # the location of the ticks depends on the x_range and y_range.\n        grid = Axes(\n            x_range=[0, 1, 0.05],  # step size determines num_decimal_places.\n            y_range=[0, 1, 0.05],\n            x_length=9,\n            y_length=5.5,\n            axis_config={\n                \"numbers_to_include\": np.arange(0, 1 + 0.1, 0.1),\n                \"font_size\": 24,\n            },\n            tips=False,\n        )\n\n        # Labels for the x-axis and y-axis.\n        y_label = grid.get_y_axis_label(\"y\", edge=LEFT, direction=LEFT, buff=0.4)\n        x_label = grid.get_x_axis_label(\"x\")\n        grid_labels = VGroup(x_label, y_label)\n\n        graphs = VGroup()\n        for n in np.arange(1, 20 + 0.5, 0.5):\n            graphs += grid.plot(lambda x: x ** n, color=WHITE)\n            graphs += grid.plot(\n                lambda x: x ** (1 / n), color=WHITE, use_smoothing=False\n            )\n\n        # Extra lines and labels for point (1,1)\n        graphs += grid.get_horizontal_line(grid @ (1, 1, 0), color=BLUE)\n        graphs += grid.get_vertical_line(grid @ (1, 1, 0), color=BLUE)\n        graphs += Dot(point=grid @ (1, 1, 0), color=YELLOW)\n        graphs += Tex(\"(1,1)\").scale(0.75).next_to(grid @ (1, 1, 0))\n        title = Title(\n            # spaces between braces to prevent SyntaxError\n            r\"Graphs of $y=x^{ {1}\\over{n} }$ and $y=x^n (n=1,2,3,...,20)$\",\n            include_underline=False,\n            font_size=40,\n        )\n\n        self.add(title, graphs, grid, grid_labels)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a coordinate grid ranging from 0 to 1 on both axes, with tick marks every 0.05 units and labeled every 0.1 units. The x- and y-axes are labeled \"x\" and \"y\" respectively. A series of white graphs are plotted: one set for \\( y = x^n \\) and another for \\( y = x^{1/n} \\), where \\( n \\) ranges from 1 to 20 in steps of 0.5. At the point (1, 1), a yellow dot is placed, with blue horizontal and vertical lines intersecting at that point, and a label \"(1,1)\" appears nearby. A title above the scene describes the plotted functions."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CoordSysExample(Scene):\n    def construct(self):\n        # the location of the ticks depends on the x_range and y_range.\n        grid = Axes(\n            x_range=[0, 1, 0.05],  # step size determines num_decimal_places.\n            y_range=[0, 1, 0.05],\n            x_length=9,\n            y_length=5.5,\n            axis_config={\n                \"numbers_to_include\": np.arange(0, 1 + 0.1, 0.1),\n                \"font_size\": 24,\n            },\n            tips=False,\n        )\n\n        # Labels for the x-axis and y-axis.\n        y_label = grid.get_y_axis_label(\"y\", edge=LEFT, direction=LEFT, buff=0.4)\n        x_label = grid.get_x_axis_label(\"x\")\n        grid_labels = VGroup(x_label, y_label)\n\n        graphs = VGroup()\n        for n in np.arange(1, 20 + 0.5, 0.5):\n            graphs += grid.plot(lambda x: x ** n, color=WHITE)\n            graphs += grid.plot(\n                lambda x: x ** (1 / n), color=WHITE, use_smoothing=False\n            )\n\n        # Extra lines and labels for point (1,1)\n        graphs += grid.get_horizontal_line(grid @ (1, 1, 0), color=BLUE)\n        graphs += grid.get_vertical_line(grid @ (1, 1, 0), color=BLUE)\n        graphs += Dot(point=grid @ (1, 1, 0), color=YELLOW)\n        graphs += Tex(\"(1,1)\").scale(0.75).next_to(grid @ (1, 1, 0))\n        title = Title(\n            # spaces between braces to prevent SyntaxError\n            r\"Graphs of $y=x^{ {1}\\over{n} }$ and $y=x^n (n=1,2,3,...,20)$\",\n            include_underline=False,\n            font_size=40,\n        )\n\n        self.add(title, graphs, grid, grid_labels)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a coordinate grid ranging from 0 to 1 on both axes, with tick marks every 0.05 units and labeled every 0.1 units. The x- and y-axes are labeled \"x\" and \"y\" respectively. A series of white graphs are plotted: one set for \\( y = x^n \\) and another for \\( y = x^{1/n} \\), where \\( n \\) ranges from 1 to 20 in steps of 0.5. At the point (1, 1), a yellow dot is placed, with blue horizontal and vertical lines intersecting at that point, and a label \"(1,1)\" appears nearby. A title above the scene describes the plotted functions."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CoordSysExample(Scene):\n    def construct(self):\n        # the location of the ticks depends on the x_range and y_range.\n        grid = Axes(\n            x_range=[0, 1, 0.05],  # step size determines num_decimal_places.\n            y_range=[0, 1, 0.05],\n            x_length=9,\n            y_length=5.5,\n            axis_config={\n                \"numbers_to_include\": np.arange(0, 1 + 0.1, 0.1),\n                \"font_size\": 24,\n            },\n            tips=False,\n        )\n\n        # Labels for the x-axis and y-axis.\n        y_label = grid.get_y_axis_label(\"y\", edge=LEFT, direction=LEFT, buff=0.4)\n        x_label = grid.get_x_axis_label(\"x\")\n        grid_labels = VGroup(x_label, y_label)\n\n        graphs = VGroup()\n        for n in np.arange(1, 20 + 0.5, 0.5):\n            graphs += grid.plot(lambda x: x ** n, color=WHITE)\n            graphs += grid.plot(\n                lambda x: x ** (1 / n), color=WHITE, use_smoothing=False\n            )\n\n        # Extra lines and labels for point (1,1)\n        graphs += grid.get_horizontal_line(grid @ (1, 1, 0), color=BLUE)\n        graphs += grid.get_vertical_line(grid @ (1, 1, 0), color=BLUE)\n        graphs += Dot(point=grid @ (1, 1, 0), color=YELLOW)\n        graphs += Tex(\"(1,1)\").scale(0.75).next_to(grid @ (1, 1, 0))\n        title = Title(\n            # spaces between braces to prevent SyntaxError\n            r\"Graphs of $y=x^{ {1}\\over{n} }$ and $y=x^n (n=1,2,3,...,20)$\",\n            include_underline=False,\n            font_size=40,\n        )\n\n        self.add(title, graphs, grid, grid_labels)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \u201call in red except this\u201d centered on the screen, where the entire sentence is red except for the phrase \u201cexcept this,\u201d which is colored yellow."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SingleLineColor(Scene):\n    def construct(self):\n        text = MarkupText(\n            f'all in red <span fgcolor=\"{YELLOW}\">except this</span>', color=RED\n        )\n        self.add(text)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \u201call in red except this\u201d centered on the screen, where the entire sentence is red except for the phrase \u201cexcept this,\u201d which is colored yellow."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SingleLineColor(Scene):\n    def construct(self):\n        text = MarkupText(\n            f'all in red <span fgcolor=\"{YELLOW}\">except this</span>', color=RED\n        )\n        self.add(text)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display 3D axes. Show a scaled-up 3D Gaussian surface with a green stroke and a checkerboard fill pattern in orange and blue. Set the camera orientation to a specific angle that shows the 3D view."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ThreeDSurfacePlot(ThreeDScene):\n    def construct(self):\n        resolution_fa = 24\n        self.set_camera_orientation(phi=75 * DEGREES, theta=-30 * DEGREES)\n\n        def param_gauss(u, v):\n            x = u\n            y = v\n            sigma, mu = 0.4, [0.0, 0.0]\n            d = np.linalg.norm(np.array([x - mu[0], y - mu[1]]))\n            z = np.exp(-(d ** 2 / (2.0 * sigma ** 2)))\n            return np.array([x, y, z])\n\n        gauss_plane = Surface(\n            param_gauss,\n            resolution=(resolution_fa, resolution_fa),\n            v_range=[-2, +2],\n            u_range=[-2, +2]\n        )\n\n        gauss_plane.scale(2, about_point=ORIGIN)\n        gauss_plane.set_style(fill_opacity=1,stroke_color=GREEN)\n        gauss_plane.set_fill_by_checkerboard(ORANGE, BLUE, opacity=0.5)\n        axes = ThreeDAxes()\n        self.add(axes,gauss_plane)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display 3D axes. Show a scaled-up 3D Gaussian surface with a green stroke and a checkerboard fill pattern in orange and blue. Set the camera orientation to a specific angle that shows the 3D view."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ThreeDSurfacePlot(ThreeDScene):\n    def construct(self):\n        resolution_fa = 24\n        self.set_camera_orientation(phi=75 * DEGREES, theta=-30 * DEGREES)\n\n        def param_gauss(u, v):\n            x = u\n            y = v\n            sigma, mu = 0.4, [0.0, 0.0]\n            d = np.linalg.norm(np.array([x - mu[0], y - mu[1]]))\n            z = np.exp(-(d ** 2 / (2.0 * sigma ** 2)))\n            return np.array([x, y, z])\n\n        gauss_plane = Surface(\n            param_gauss,\n            resolution=(resolution_fa, resolution_fa),\n            v_range=[-2, +2],\n            u_range=[-2, +2]\n        )\n\n        gauss_plane.scale(2, about_point=ORIGIN)\n        gauss_plane.set_style(fill_opacity=1,stroke_color=GREEN)\n        gauss_plane.set_fill_by_checkerboard(ORANGE, BLUE, opacity=0.5)\n        axes = ThreeDAxes()\n        self.add(axes,gauss_plane)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display 3D axes. Show a scaled-up 3D Gaussian surface with a green stroke and a checkerboard fill pattern in orange and blue. Set the camera orientation to a specific angle that shows the 3D view."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ThreeDSurfacePlot(ThreeDScene):\n    def construct(self):\n        resolution_fa = 24\n        self.set_camera_orientation(phi=75 * DEGREES, theta=-30 * DEGREES)\n\n        def param_gauss(u, v):\n            x = u\n            y = v\n            sigma, mu = 0.4, [0.0, 0.0]\n            d = np.linalg.norm(np.array([x - mu[0], y - mu[1]]))\n            z = np.exp(-(d ** 2 / (2.0 * sigma ** 2)))\n            return np.array([x, y, z])\n\n        gauss_plane = Surface(\n            param_gauss,\n            resolution=(resolution_fa, resolution_fa),\n            v_range=[-2, +2],\n            u_range=[-2, +2]\n        )\n\n        gauss_plane.scale(2, about_point=ORIGIN)\n        gauss_plane.set_style(fill_opacity=1,stroke_color=GREEN)\n        gauss_plane.set_fill_by_checkerboard(ORANGE, BLUE, opacity=0.5)\n        axes = ThreeDAxes()\n        self.add(axes,gauss_plane)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two pairs of dots and squares: one pair on the left side of the screen and the other on the right. After a brief pause, the left dot transforms into a square with a clockwise spinning motion, while the right dot transforms into a square with a standard morphing animation. Both transformations occur simultaneously."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ClockwiseExample(Scene):\n    def construct(self):\n        dl, dr = Dot(), Dot()\n        sl, sr = Square(), Square()\n\n        VGroup(dl, sl).arrange(DOWN).shift(2*LEFT)\n        VGroup(dr, sr).arrange(DOWN).shift(2*RIGHT)\n\n        self.add(dl, dr)\n        self.wait()\n        self.play(\n            ClockwiseTransform(dl, sl),\n            Transform(dr, sr)\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two pairs of dots and squares: one pair on the left side of the screen and the other on the right. After a brief pause, the left dot transforms into a square with a clockwise spinning motion, while the right dot transforms into a square with a standard morphing animation. Both transformations occur simultaneously."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ClockwiseExample(Scene):\n    def construct(self):\n        dl, dr = Dot(), Dot()\n        sl, sr = Square(), Square()\n\n        VGroup(dl, sl).arrange(DOWN).shift(2*LEFT)\n        VGroup(dr, sr).arrange(DOWN).shift(2*RIGHT)\n\n        self.add(dl, dr)\n        self.wait()\n        self.play(\n            ClockwiseTransform(dl, sl),\n            Transform(dr, sr)\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display two pairs of dots and squares: one pair on the left side of the screen and the other on the right. After a brief pause, the left dot transforms into a square with a clockwise spinning motion, while the right dot transforms into a square with a standard morphing animation. Both transformations occur simultaneously."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ClockwiseExample(Scene):\n    def construct(self):\n        dl, dr = Dot(), Dot()\n        sl, sr = Square(), Square()\n\n        VGroup(dl, sl).arrange(DOWN).shift(2*LEFT)\n        VGroup(dr, sr).arrange(DOWN).shift(2*RIGHT)\n\n        self.add(dl, dr)\n        self.wait()\n        self.play(\n            ClockwiseTransform(dl, sl),\n            Transform(dr, sr)\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a vector field using arrows, where each arrow's direction and magnitude are determined by a custom function that subtly rotates and scales the position vectors. The field is shown on a neutral background without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BasicUsage(Scene):\n    def construct(self):\n        func = lambda pos: ((pos[0] * UR + pos[1] * LEFT) - pos) / 3\n        self.add(ArrowVectorField(func))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a vector field using arrows, where each arrow's direction and magnitude are determined by a custom function that subtly rotates and scales the position vectors. The field is shown on a neutral background without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BasicUsage(Scene):\n    def construct(self):\n        func = lambda pos: ((pos[0] * UR + pos[1] * LEFT) - pos) / 3\n        self.add(ArrowVectorField(func))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a vector field using arrows, where each arrow's direction and magnitude are determined by a custom function that subtly rotates and scales the position vectors. The field is shown on a neutral background without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BasicUsage(Scene):\n    def construct(self):\n        func = lambda pos: ((pos[0] * UR + pos[1] * LEFT) - pos) / 3\n        self.add(ArrowVectorField(func))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D tetrahedron\u2014a four-faced polyhedron with triangular faces\u2014centered in the scene. The camera is set at a 75\u00b0 vertical angle and a 30\u00b0 horizontal angle, providing a tilted perspective that clearly reveals the tetrahedron\u2019s geometric form."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TetrahedronScene(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        obj = Tetrahedron()\n        self.add(obj)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D tetrahedron\u2014a four-faced polyhedron with triangular faces\u2014centered in the scene. The camera is set at a 75\u00b0 vertical angle and a 30\u00b0 horizontal angle, providing a tilted perspective that clearly reveals the tetrahedron\u2019s geometric form."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TetrahedronScene(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        obj = Tetrahedron()\n        self.add(obj)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 3D tetrahedron\u2014a four-faced polyhedron with triangular faces\u2014centered in the scene. The camera is set at a 75\u00b0 vertical angle and a 30\u00b0 horizontal angle, providing a tilted perspective that clearly reveals the tetrahedron\u2019s geometric form."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TetrahedronScene(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        obj = Tetrahedron()\n        self.add(obj)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a blue rectangle at the center of the screen with a translucent gray copy behind it for reference. A number is shown at the top edge of the screen, dynamically updating to reflect the rectangle\u2019s height. The rectangle then smoothly grows taller until its height reaches 5 units, while the number updates in real time."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass HeightExample(Scene):\n    def construct(self):\n        decimal = DecimalNumber().to_edge(UP)\n        rect = Rectangle(color=BLUE)\n        rect_copy = rect.copy().set_stroke(GRAY, opacity=0.5)\n\n        decimal.add_updater(lambda d: d.set_value(rect.height))\n\n        self.add(rect_copy, rect, decimal)\n        self.play(rect.animate.set(height=5))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a blue rectangle at the center of the screen with a translucent gray copy behind it for reference. A number is shown at the top edge of the screen, dynamically updating to reflect the rectangle\u2019s height. The rectangle then smoothly grows taller until its height reaches 5 units, while the number updates in real time."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass HeightExample(Scene):\n    def construct(self):\n        decimal = DecimalNumber().to_edge(UP)\n        rect = Rectangle(color=BLUE)\n        rect_copy = rect.copy().set_stroke(GRAY, opacity=0.5)\n\n        decimal.add_updater(lambda d: d.set_value(rect.height))\n\n        self.add(rect_copy, rect, decimal)\n        self.play(rect.animate.set(height=5))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a blue rectangle at the center of the screen with a translucent gray copy behind it for reference. A number is shown at the top edge of the screen, dynamically updating to reflect the rectangle\u2019s height. The rectangle then smoothly grows taller until its height reaches 5 units, while the number updates in real time."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass HeightExample(Scene):\n    def construct(self):\n        decimal = DecimalNumber().to_edge(UP)\n        rect = Rectangle(color=BLUE)\n        rect_copy = rect.copy().set_stroke(GRAY, opacity=0.5)\n\n        decimal.add_updater(lambda d: d.set_value(rect.height))\n\n        self.add(rect_copy, rect, decimal)\n        self.play(rect.animate.set(height=5))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a circle positioned in the upper-right corner of the screen. A LaTeX-style text reading \u201cTo the corner!\u201d is placed in the lower-left corner with no buffer space, and a mathematical expression \u201c\\(x^3\\)\u201d is positioned in the upper-left corner with extra spacing from the edges. All three elements appear simultaneously."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ToCornerExample(Scene):\n    def construct(self):\n        c = Circle()\n        c.to_corner(UR)\n        t = Tex(\"To the corner!\")\n        t2 = MathTex(\"x^3\").shift(DOWN)\n        self.add(c,t,t2)\n        t.to_corner(DL, buff=0)\n        t2.to_corner(UL, buff=1.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a circle positioned in the upper-right corner of the screen. A LaTeX-style text reading \u201cTo the corner!\u201d is placed in the lower-left corner with no buffer space, and a mathematical expression \u201c\\(x^3\\)\u201d is positioned in the upper-left corner with extra spacing from the edges. All three elements appear simultaneously."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ToCornerExample(Scene):\n    def construct(self):\n        c = Circle()\n        c.to_corner(UR)\n        t = Tex(\"To the corner!\")\n        t2 = MathTex(\"x^3\").shift(DOWN)\n        self.add(c,t,t2)\n        t.to_corner(DL, buff=0)\n        t2.to_corner(UL, buff=1.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Set the background color to a light beige. Display a large black double-struck \"M\" shifted to the left and up. Show a green circle shifted to the left, a blue square shifted up, and a red triangle shifted to the right. Group these shapes and the \"M\" together, centering the group on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ManimCELogo(Scene):\n    def construct(self):\n        self.camera.background_color = \"#ece6e2\"\n        logo_green = \"#87c2a5\"\n        logo_blue = \"#525893\"\n        logo_red = \"#e07a5f\"\n        logo_black = \"#343434\"\n        ds_m = MathTex(r\"\\mathbb{M}\", fill_color=logo_black).scale(7)\n        ds_m.shift(2.25 * LEFT + 1.5 * UP)\n        circle = Circle(color=logo_green, fill_opacity=1).shift(LEFT)\n        square = Square(color=logo_blue, fill_opacity=1).shift(UP)\n        triangle = Triangle(color=logo_red, fill_opacity=1).shift(RIGHT)\n        logo = VGroup(triangle, square, circle, ds_m)  # order matters\n        logo.move_to(ORIGIN)\n        self.add(logo)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that set the background color to a light beige. Display a large black double-struck \"M\" shifted to the left and up. Show a green circle shifted to the left, a blue square shifted up, and a red triangle shifted to the right. Group these shapes and the \"M\" together, centering the group on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ManimCELogo(Scene):\n    def construct(self):\n        self.camera.background_color = \"#ece6e2\"\n        logo_green = \"#87c2a5\"\n        logo_blue = \"#525893\"\n        logo_red = \"#e07a5f\"\n        logo_black = \"#343434\"\n        ds_m = MathTex(r\"\\mathbb{M}\", fill_color=logo_black).scale(7)\n        ds_m.shift(2.25 * LEFT + 1.5 * UP)\n        circle = Circle(color=logo_green, fill_opacity=1).shift(LEFT)\n        square = Square(color=logo_blue, fill_opacity=1).shift(UP)\n        triangle = Triangle(color=logo_red, fill_opacity=1).shift(RIGHT)\n        logo = VGroup(triangle, square, circle, ds_m)  # order matters\n        logo.move_to(ORIGIN)\n        self.add(logo)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to set the background color to a light beige. Display a large black double-struck \"M\" shifted to the left and up. Show a green circle shifted to the left, a blue square shifted up, and a red triangle shifted to the right. Group these shapes and the \"M\" together, centering the group on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ManimCELogo(Scene):\n    def construct(self):\n        self.camera.background_color = \"#ece6e2\"\n        logo_green = \"#87c2a5\"\n        logo_blue = \"#525893\"\n        logo_red = \"#e07a5f\"\n        logo_black = \"#343434\"\n        ds_m = MathTex(r\"\\mathbb{M}\", fill_color=logo_black).scale(7)\n        ds_m.shift(2.25 * LEFT + 1.5 * UP)\n        circle = Circle(color=logo_green, fill_opacity=1).shift(LEFT)\n        square = Square(color=logo_blue, fill_opacity=1).shift(UP)\n        triangle = Triangle(color=logo_red, fill_opacity=1).shift(RIGHT)\n        logo = VGroup(triangle, square, circle, ds_m)  # order matters\n        logo.move_to(ORIGIN)\n        self.add(logo)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three groups of arrows demonstrating different arrow properties:\n\n1. The first group shows two gold arrows pointing left\u2014one with a default triangular tip and one with a square tip\u2014stacked vertically.\n2. The second group shows two right-pointing arrows near a maroon square\u2014one with default spacing from the square and one with no spacing (buff), placed just above the first group.\n3. The third group shows two vertical arrows on the left side\u2014one long arrow extending from the center to the top of the screen, and one shorter arrow with a smaller tip and thinner stroke, both aligned vertically.\n\nAll three groups are arranged horizontally with space between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nfrom manim.mobject.geometry.tips import ArrowSquareTip\nclass ArrowExample(Scene):\n    def construct(self):\n        arrow_1 = Arrow(start=RIGHT, end=LEFT, color=GOLD)\n        arrow_2 = Arrow(start=RIGHT, end=LEFT, color=GOLD, tip_shape=ArrowSquareTip).shift(DOWN)\n        g1 = Group(arrow_1, arrow_2)\n\n        # the effect of buff\n        square = Square(color=MAROON_A)\n        arrow_3 = Arrow(start=LEFT, end=RIGHT)\n        arrow_4 = Arrow(start=LEFT, end=RIGHT, buff=0).next_to(arrow_1, UP)\n        g2 = Group(arrow_3, arrow_4, square)\n\n        # a shorter arrow has a shorter tip and smaller stroke width\n        arrow_5 = Arrow(start=ORIGIN, end=config.top).shift(LEFT * 4)\n        arrow_6 = Arrow(start=config.top + DOWN, end=config.top).shift(LEFT * 3)\n        g3 = Group(arrow_5, arrow_6)\n\n        self.add(Group(g1, g2, g3).arrange(buff=2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three groups of arrows demonstrating different arrow properties:\n\n1. The first group shows two gold arrows pointing left\u2014one with a default triangular tip and one with a square tip\u2014stacked vertically.\n2. The second group shows two right-pointing arrows near a maroon square\u2014one with default spacing from the square and one with no spacing (buff), placed just above the first group.\n3. The third group shows two vertical arrows on the left side\u2014one long arrow extending from the center to the top of the screen, and one shorter arrow with a smaller tip and thinner stroke, both aligned vertically.\n\nAll three groups are arranged horizontally with space between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nfrom manim.mobject.geometry.tips import ArrowSquareTip\nclass ArrowExample(Scene):\n    def construct(self):\n        arrow_1 = Arrow(start=RIGHT, end=LEFT, color=GOLD)\n        arrow_2 = Arrow(start=RIGHT, end=LEFT, color=GOLD, tip_shape=ArrowSquareTip).shift(DOWN)\n        g1 = Group(arrow_1, arrow_2)\n\n        # the effect of buff\n        square = Square(color=MAROON_A)\n        arrow_3 = Arrow(start=LEFT, end=RIGHT)\n        arrow_4 = Arrow(start=LEFT, end=RIGHT, buff=0).next_to(arrow_1, UP)\n        g2 = Group(arrow_3, arrow_4, square)\n\n        # a shorter arrow has a shorter tip and smaller stroke width\n        arrow_5 = Arrow(start=ORIGIN, end=config.top).shift(LEFT * 4)\n        arrow_6 = Arrow(start=config.top + DOWN, end=config.top).shift(LEFT * 3)\n        g3 = Group(arrow_5, arrow_6)\n\n        self.add(Group(g1, g2, g3).arrange(buff=2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display three groups of arrows demonstrating different arrow properties:\n\n1. The first group shows two gold arrows pointing left\u2014one with a default triangular tip and one with a square tip\u2014stacked vertically.\n2. The second group shows two right-pointing arrows near a maroon square\u2014one with default spacing from the square and one with no spacing (buff), placed just above the first group.\n3. The third group shows two vertical arrows on the left side\u2014one long arrow extending from the center to the top of the screen, and one shorter arrow with a smaller tip and thinner stroke, both aligned vertically.\n\nAll three groups are arranged horizontally with space between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nfrom manim.mobject.geometry.tips import ArrowSquareTip\nclass ArrowExample(Scene):\n    def construct(self):\n        arrow_1 = Arrow(start=RIGHT, end=LEFT, color=GOLD)\n        arrow_2 = Arrow(start=RIGHT, end=LEFT, color=GOLD, tip_shape=ArrowSquareTip).shift(DOWN)\n        g1 = Group(arrow_1, arrow_2)\n\n        # the effect of buff\n        square = Square(color=MAROON_A)\n        arrow_3 = Arrow(start=LEFT, end=RIGHT)\n        arrow_4 = Arrow(start=LEFT, end=RIGHT, buff=0).next_to(arrow_1, UP)\n        g2 = Group(arrow_3, arrow_4, square)\n\n        # a shorter arrow has a shorter tip and smaller stroke width\n        arrow_5 = Arrow(start=ORIGIN, end=config.top).shift(LEFT * 4)\n        arrow_6 = Arrow(start=config.top + DOWN, end=config.top).shift(LEFT * 3)\n        g3 = Group(arrow_5, arrow_6)\n\n        self.add(Group(g1, g2, g3).arrange(buff=2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a large circle with two tangent lines:\n\n1. A blue tangent line touching the circle on the right side.\n2. A green tangent line touching the circle at an upper-left point.\n\nBoth lines extend outward from their points of contact, illustrating tangents at different positions on the circle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass VectorExample(Scene):\n    def construct(self):\n        plane = NumberPlane()\n        vector_1 = Vector([1,2])\n        vector_2 = Vector([-5,-2])\n        self.add(plane, vector_1, vector_2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a large circle with two tangent lines:\n\n1. A blue tangent line touching the circle on the right side.\n2. A green tangent line touching the circle at an upper-left point.\n\nBoth lines extend outward from their points of contact, illustrating tangents at different positions on the circle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass VectorExample(Scene):\n    def construct(self):\n        plane = NumberPlane()\n        vector_1 = Vector([1,2])\n        vector_2 = Vector([-5,-2])\n        self.add(plane, vector_1, vector_2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a large circle with two tangent lines:\n\n1. A blue tangent line touching the circle on the right side.\n2. A green tangent line touching the circle at an upper-left point.\n\nBoth lines extend outward from their points of contact, illustrating tangents at different positions on the circle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass VectorExample(Scene):\n    def construct(self):\n        plane = NumberPlane()\n        vector_1 = Vector([1,2])\n        vector_2 = Vector([-5,-2])\n        self.add(plane, vector_1, vector_2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three on-screen variables with animated updates:\n\n1. A decimal variable labeled \u201cvar\u201d starts at 0.5, with the label in red and the value in green. It animates to 10.5.\n2. An integer variable labeled \u201cint_var\u201d appears below, also with red and green styling, and animates from 0 to 10.\n3. A third variable labeled with a subscripted math expression \u201c\\( a_i \\)\u201d appears below the others, displaying a static value of 10.\n\nEach variable is introduced with a writing animation and spaced vertically."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass VariablesWithValueTracker(Scene):\n    def construct(self):\n        var = 0.5\n        on_screen_var = Variable(var, Text(\"var\"), num_decimal_places=3)\n\n        # You can also change the colours for the label and value\n        on_screen_var.label.set_color(RED)\n        on_screen_var.value.set_color(GREEN)\n\n        self.play(Write(on_screen_var))\n        # The above line will just display the variable with\n        # its initial value on the screen. If you also wish to\n        # update it, you can do so by accessing the `tracker` attribute\n        self.wait()\n        var_tracker = on_screen_var.tracker\n        var = 10.5\n        self.play(var_tracker.animate.set_value(var))\n        self.wait()\n\n        int_var = 0\n        on_screen_int_var = Variable(\n            int_var, Text(\"int_var\"), var_type=Integer\n        ).next_to(on_screen_var, DOWN)\n        on_screen_int_var.label.set_color(RED)\n        on_screen_int_var.value.set_color(GREEN)\n\n        self.play(Write(on_screen_int_var))\n        self.wait()\n        var_tracker = on_screen_int_var.tracker\n        var = 10.5\n        self.play(var_tracker.animate.set_value(var))\n        self.wait()\n\n        # If you wish to have a somewhat more complicated label for your\n        # variable with subscripts, superscripts, etc. the default class\n        # for the label is MathTex\n        subscript_label_var = 10\n        on_screen_subscript_var = Variable(subscript_label_var, \"{a}_{i}\").next_to(\n            on_screen_int_var, DOWN\n        )\n        self.play(Write(on_screen_subscript_var))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three on-screen variables with animated updates:\n\n1. A decimal variable labeled \u201cvar\u201d starts at 0.5, with the label in red and the value in green. It animates to 10.5.\n2. An integer variable labeled \u201cint_var\u201d appears below, also with red and green styling, and animates from 0 to 10.\n3. A third variable labeled with a subscripted math expression \u201c\\( a_i \\)\u201d appears below the others, displaying a static value of 10.\n\nEach variable is introduced with a writing animation and spaced vertically."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass VariablesWithValueTracker(Scene):\n    def construct(self):\n        var = 0.5\n        on_screen_var = Variable(var, Text(\"var\"), num_decimal_places=3)\n\n        # You can also change the colours for the label and value\n        on_screen_var.label.set_color(RED)\n        on_screen_var.value.set_color(GREEN)\n\n        self.play(Write(on_screen_var))\n        # The above line will just display the variable with\n        # its initial value on the screen. If you also wish to\n        # update it, you can do so by accessing the `tracker` attribute\n        self.wait()\n        var_tracker = on_screen_var.tracker\n        var = 10.5\n        self.play(var_tracker.animate.set_value(var))\n        self.wait()\n\n        int_var = 0\n        on_screen_int_var = Variable(\n            int_var, Text(\"int_var\"), var_type=Integer\n        ).next_to(on_screen_var, DOWN)\n        on_screen_int_var.label.set_color(RED)\n        on_screen_int_var.value.set_color(GREEN)\n\n        self.play(Write(on_screen_int_var))\n        self.wait()\n        var_tracker = on_screen_int_var.tracker\n        var = 10.5\n        self.play(var_tracker.animate.set_value(var))\n        self.wait()\n\n        # If you wish to have a somewhat more complicated label for your\n        # variable with subscripts, superscripts, etc. the default class\n        # for the label is MathTex\n        subscript_label_var = 10\n        on_screen_subscript_var = Variable(subscript_label_var, \"{a}_{i}\").next_to(\n            on_screen_int_var, DOWN\n        )\n        self.play(Write(on_screen_subscript_var))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \"Hello World!\" at the center of the screen, then animate it scaling up to twice its original size while remaining anchored in place."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ScaleInPlaceExample(Scene):\n    def construct(self):\n        self.play(ScaleInPlace(Text(\"Hello World!\"), 2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \"Hello World!\" at the center of the screen, then animate it scaling up to twice its original size while remaining anchored in place."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ScaleInPlaceExample(Scene):\n    def construct(self):\n        self.play(ScaleInPlace(Text(\"Hello World!\"), 2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the text \"Hello World!\" at the center of the screen, then animate it scaling up to twice its original size while remaining anchored in place."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ScaleInPlaceExample(Scene):\n    def construct(self):\n        self.play(ScaleInPlace(Text(\"Hello World!\"), 2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a thick parametric sine curve and a version of the same curve shifted upward, with its color smoothly transitioning from blue to red along its length. The gradient visually emphasizes the direction and flow of the curve."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LineGradientExample(Scene):\n    def construct(self):\n        curve = ParametricFunction(lambda t: [t, np.sin(t), 0], t_range=[-PI, PI, 0.01], stroke_width=10)\n        new_curve = CurvesAsSubmobjects(curve)\n        new_curve.set_color_by_gradient(BLUE, RED)\n        self.add(new_curve.shift(UP), curve)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a thick parametric sine curve and a version of the same curve shifted upward, with its color smoothly transitioning from blue to red along its length. The gradient visually emphasizes the direction and flow of the curve."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LineGradientExample(Scene):\n    def construct(self):\n        curve = ParametricFunction(lambda t: [t, np.sin(t), 0], t_range=[-PI, PI, 0.01], stroke_width=10)\n        new_curve = CurvesAsSubmobjects(curve)\n        new_curve.set_color_by_gradient(BLUE, RED)\n        self.add(new_curve.shift(UP), curve)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a thick parametric sine curve and a version of the same curve shifted upward, with its color smoothly transitioning from blue to red along its length. The gradient visually emphasizes the direction and flow of the curve."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LineGradientExample(Scene):\n    def construct(self):\n        curve = ParametricFunction(lambda t: [t, np.sin(t), 0], t_range=[-PI, PI, 0.01], stroke_width=10)\n        new_curve = CurvesAsSubmobjects(curve)\n        new_curve.set_color_by_gradient(BLUE, RED)\n        self.add(new_curve.shift(UP), curve)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D scene with a coordinate axis system and a torus (doughnut-shaped surface) centered in the scene. The camera is angled from above and slightly to the side to provide a clear view of the torus's circular structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleTorus(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        torus = Torus()\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(axes, torus)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D scene with a coordinate axis system and a torus (doughnut-shaped surface) centered in the scene. The camera is angled from above and slightly to the side to provide a clear view of the torus's circular structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleTorus(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        torus = Torus()\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(axes, torus)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a graph with six labeled nodes arranged using the spring layout, which simulates physical forces to position nodes in a way that minimizes edge crossings and evenly distributes them. The nodes are connected in a loop with additional cross-links between non-adjacent nodes, forming a dense and organically spaced network that balances visual clarity and connectivity."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpringLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"spring\",\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a graph with six labeled nodes arranged using the spring layout, which simulates physical forces to position nodes in a way that minimizes edge crossings and evenly distributes them. The nodes are connected in a loop with additional cross-links between non-adjacent nodes, forming a dense and organically spaced network that balances visual clarity and connectivity."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpringLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"spring\",\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a graph with six labeled nodes arranged using the spring layout, which simulates physical forces to position nodes in a way that minimizes edge crossings and evenly distributes them. The nodes are connected in a loop with additional cross-links between non-adjacent nodes, forming a dense and organically spaced network that balances visual clarity and connectivity."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpringLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"spring\",\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of coordinate axes, then show a small circle positioned at \\((-4, -1.5)\\). Two sets of dashed lines extend from the axes to specific points on the circle: one set in green connects to the circle\u2019s rightmost point, and another set in blue connects to its bottom-left corner, visually indicating their coordinates relative to the axes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetLinesToPointExample(Scene):\n    def construct(self):\n        ax = Axes()\n        circ = Circle(radius=0.5).move_to([-4, -1.5, 0])\n\n        lines_1 = ax.get_lines_to_point(circ.get_right(), color=GREEN_B)\n        lines_2 = ax.get_lines_to_point(circ.get_corner(DL), color=BLUE_B)\n        self.add(ax, lines_1, lines_2, circ)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of coordinate axes, then show a small circle positioned at \\((-4, -1.5)\\). Two sets of dashed lines extend from the axes to specific points on the circle: one set in green connects to the circle\u2019s rightmost point, and another set in blue connects to its bottom-left corner, visually indicating their coordinates relative to the axes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetLinesToPointExample(Scene):\n    def construct(self):\n        ax = Axes()\n        circ = Circle(radius=0.5).move_to([-4, -1.5, 0])\n\n        lines_1 = ax.get_lines_to_point(circ.get_right(), color=GREEN_B)\n        lines_2 = ax.get_lines_to_point(circ.get_corner(DL), color=BLUE_B)\n        self.add(ax, lines_1, lines_2, circ)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a set of coordinate axes, then show a small circle positioned at \\((-4, -1.5)\\). Two sets of dashed lines extend from the axes to specific points on the circle: one set in green connects to the circle\u2019s rightmost point, and another set in blue connects to its bottom-left corner, visually indicating their coordinates relative to the axes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetLinesToPointExample(Scene):\n    def construct(self):\n        ax = Axes()\n        circ = Circle(radius=0.5).move_to([-4, -1.5, 0])\n\n        lines_1 = ax.get_lines_to_point(circ.get_right(), color=GREEN_B)\n        lines_2 = ax.get_lines_to_point(circ.get_corner(DL), color=BLUE_B)\n        self.add(ax, lines_1, lines_2, circ)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three horizontal dashed lines across the screen, each demonstrating different dash styles:\n\n1. The top line has long dashes due to an increased dash length.\n2. The middle line is a standard dashed line with default settings.\n3. The bottom line has very short dashes and longer gaps, resulting from a decreased dashed ratio."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DashedLineExample(Scene):\n    def construct(self):\n        # dash_length increased\n        dashed_1 = DashedLine(config.left_side, config.right_side, dash_length=2.0).shift(UP*2)\n        # normal\n        dashed_2 = DashedLine(config.left_side, config.right_side)\n        # dashed_ratio decreased\n        dashed_3 = DashedLine(config.left_side, config.right_side, dashed_ratio=0.1).shift(DOWN*2)\n        self.add(dashed_1, dashed_2, dashed_3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three horizontal dashed lines across the screen, each demonstrating different dash styles:\n\n1. The top line has long dashes due to an increased dash length.\n2. The middle line is a standard dashed line with default settings.\n3. The bottom line has very short dashes and longer gaps, resulting from a decreased dashed ratio."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DashedLineExample(Scene):\n    def construct(self):\n        # dash_length increased\n        dashed_1 = DashedLine(config.left_side, config.right_side, dash_length=2.0).shift(UP*2)\n        # normal\n        dashed_2 = DashedLine(config.left_side, config.right_side)\n        # dashed_ratio decreased\n        dashed_3 = DashedLine(config.left_side, config.right_side, dashed_ratio=0.1).shift(DOWN*2)\n        self.add(dashed_1, dashed_2, dashed_3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a yellow curve representing the implicit function defined by the equation \\( x y^2 - x^2 y - 2 = 0 \\), overlaid on a coordinate grid. The graph and the number plane appear together without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ImplicitFunctionExample(Scene):\n    def construct(self):\n        graph = ImplicitFunction(\n            lambda x, y: x * y ** 2 - x ** 2 * y - 2,\n            color=YELLOW\n        )\n        self.add(NumberPlane(), graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a yellow curve representing the implicit function defined by the equation \\( x y^2 - x^2 y - 2 = 0 \\), overlaid on a coordinate grid. The graph and the number plane appear together without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ImplicitFunctionExample(Scene):\n    def construct(self):\n        graph = ImplicitFunction(\n            lambda x, y: x * y ** 2 - x ** 2 * y - 2,\n            color=YELLOW\n        )\n        self.add(NumberPlane(), graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a yellow curve representing the implicit function defined by the equation \\( x y^2 - x^2 y - 2 = 0 \\), overlaid on a coordinate grid. The graph and the number plane appear together without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ImplicitFunctionExample(Scene):\n    def construct(self):\n        graph = ImplicitFunction(\n            lambda x, y: x * y ** 2 - x ** 2 * y - 2,\n            color=YELLOW\n        )\n        self.add(NumberPlane(), graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display four colored arcs of varying sizes and angles, each paired with a brace that curves along its outer edge:\n\n- A red arc with a left-facing brace.\n- A yellow arc with a standard brace.\n- A blue arc with a semicircular shape and a brace.\n- A green arc forming three-quarters of a circle with a brace.\n\nAll arc-brace pairs are arranged in a grid layout with ample spacing and centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArcBraceExample(Scene):\n    def construct(self):\n        arc_1 = Arc(radius=1.5,start_angle=0,angle=2*PI/3).set_color(RED)\n        brace_1 = ArcBrace(arc_1,LEFT)\n        group_1 = VGroup(arc_1,brace_1)\n\n        arc_2 = Arc(radius=3,start_angle=0,angle=5*PI/6).set_color(YELLOW)\n        brace_2 = ArcBrace(arc_2)\n        group_2 = VGroup(arc_2,brace_2)\n\n        arc_3 = Arc(radius=0.5,start_angle=-0,angle=PI).set_color(BLUE)\n        brace_3 = ArcBrace(arc_3)\n        group_3 = VGroup(arc_3,brace_3)\n\n        arc_4 = Arc(radius=0.2,start_angle=0,angle=3*PI/2).set_color(GREEN)\n        brace_4 = ArcBrace(arc_4)\n        group_4 = VGroup(arc_4,brace_4)\n\n        arc_group = VGroup(group_1, group_2, group_3, group_4).arrange_in_grid(buff=1.5)\n        self.add(arc_group.center())\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display four colored arcs of varying sizes and angles, each paired with a brace that curves along its outer edge:\n\n- A red arc with a left-facing brace.\n- A yellow arc with a standard brace.\n- A blue arc with a semicircular shape and a brace.\n- A green arc forming three-quarters of a circle with a brace.\n\nAll arc-brace pairs are arranged in a grid layout with ample spacing and centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArcBraceExample(Scene):\n    def construct(self):\n        arc_1 = Arc(radius=1.5,start_angle=0,angle=2*PI/3).set_color(RED)\n        brace_1 = ArcBrace(arc_1,LEFT)\n        group_1 = VGroup(arc_1,brace_1)\n\n        arc_2 = Arc(radius=3,start_angle=0,angle=5*PI/6).set_color(YELLOW)\n        brace_2 = ArcBrace(arc_2)\n        group_2 = VGroup(arc_2,brace_2)\n\n        arc_3 = Arc(radius=0.5,start_angle=-0,angle=PI).set_color(BLUE)\n        brace_3 = ArcBrace(arc_3)\n        group_3 = VGroup(arc_3,brace_3)\n\n        arc_4 = Arc(radius=0.2,start_angle=0,angle=3*PI/2).set_color(GREEN)\n        brace_4 = ArcBrace(arc_4)\n        group_4 = VGroup(arc_4,brace_4)\n\n        arc_group = VGroup(group_1, group_2, group_3, group_4).arrange_in_grid(buff=1.5)\n        self.add(arc_group.center())\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display 24 small white rectangles, each labeled with a number from 1 to 24, arranged in a grid. The grid flows down each column before moving to the next (top to bottom, then left to right). The columns and rows have custom spacing and alignment: columns are aligned left, center, or right as specified, and rows are aligned upper, center, or down. The first and last columns and rows have fixed widths and heights, while the others adjust automatically."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArrangeInGrid(Scene):\n    def construct(self):\n        boxes = VGroup(*[\n            Rectangle(WHITE, 0.5, 0.5).add(Text(str(i+1)).scale(0.5))\n            for i in range(24)\n        ])\n        self.add(boxes)\n\n        boxes.arrange_in_grid(\n            buff=(0.25,0.5),\n            col_alignments=\"lccccr\",\n            row_alignments=\"uccd\",\n            col_widths=[1, *[None]*4, 1],\n            row_heights=[1, None, None, 1],\n            flow_order=\"dr\"\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display 24 small white rectangles, each labeled with a number from 1 to 24, arranged in a grid. The grid flows down each column before moving to the next (top to bottom, then left to right). The columns and rows have custom spacing and alignment: columns are aligned left, center, or right as specified, and rows are aligned upper, center, or down. The first and last columns and rows have fixed widths and heights, while the others adjust automatically."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArrangeInGrid(Scene):\n    def construct(self):\n        boxes = VGroup(*[\n            Rectangle(WHITE, 0.5, 0.5).add(Text(str(i+1)).scale(0.5))\n            for i in range(24)\n        ])\n        self.add(boxes)\n\n        boxes.arrange_in_grid(\n            buff=(0.25,0.5),\n            col_alignments=\"lccccr\",\n            row_alignments=\"uccd\",\n            col_widths=[1, *[None]*4, 1],\n            row_heights=[1, None, None, 1],\n            flow_order=\"dr\"\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display 24 small white rectangles, each labeled with a number from 1 to 24, arranged in a grid. The grid flows down each column before moving to the next (top to bottom, then left to right). The columns and rows have custom spacing and alignment: columns are aligned left, center, or right as specified, and rows are aligned upper, center, or down. The first and last columns and rows have fixed widths and heights, while the others adjust automatically."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArrangeInGrid(Scene):\n    def construct(self):\n        boxes = VGroup(*[\n            Rectangle(WHITE, 0.5, 0.5).add(Text(str(i+1)).scale(0.5))\n            for i in range(24)\n        ])\n        self.add(boxes)\n\n        boxes.arrange_in_grid(\n            buff=(0.25,0.5),\n            col_alignments=\"lccccr\",\n            row_alignments=\"uccd\",\n            col_widths=[1, *[None]*4, 1],\n            row_heights=[1, None, None, 1],\n            flow_order=\"dr\"\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a green dot at the center of the screen accompanied by a clicking sound. After a pause, another click is heard as the dot changes to blue. Following another pause and click, the dot changes to red. Each color change is synchronized with a sound effect.\n\nSound effect source: https://freesound.org/people/Druminfected/sounds/250551/"}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SoundExample(Scene):\n    # Source of sound under Creative Commons 0 License. https://freesound.org/people/Druminfected/sounds/250551/\n    def construct(self):\n        dot = Dot().set_color(GREEN)\n        self.add_sound(\"click.wav\")\n        self.add(dot)\n        self.wait()\n        self.add_sound(\"click.wav\")\n        dot.set_color(BLUE)\n        self.wait()\n        self.add_sound(\"click.wav\")\n        dot.set_color(RED)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a green dot at the center of the screen accompanied by a clicking sound. After a pause, another click is heard as the dot changes to blue. Following another pause and click, the dot changes to red. Each color change is synchronized with a sound effect.\n\nSound effect source: https://freesound.org/people/Druminfected/sounds/250551/"}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SoundExample(Scene):\n    # Source of sound under Creative Commons 0 License. https://freesound.org/people/Druminfected/sounds/250551/\n    def construct(self):\n        dot = Dot().set_color(GREEN)\n        self.add_sound(\"click.wav\")\n        self.add(dot)\n        self.wait()\n        self.add_sound(\"click.wav\")\n        dot.set_color(BLUE)\n        self.wait()\n        self.add_sound(\"click.wav\")\n        dot.set_color(RED)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a green dot at the center of the screen accompanied by a clicking sound. After a pause, another click is heard as the dot changes to blue. Following another pause and click, the dot changes to red. Each color change is synchronized with a sound effect.\n\nSound effect source: https://freesound.org/people/Druminfected/sounds/250551/"}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SoundExample(Scene):\n    # Source of sound under Creative Commons 0 License. https://freesound.org/people/Druminfected/sounds/250551/\n    def construct(self):\n        dot = Dot().set_color(GREEN)\n        self.add_sound(\"click.wav\")\n        self.add(dot)\n        self.wait()\n        self.add_sound(\"click.wav\")\n        dot.set_color(BLUE)\n        self.wait()\n        self.add_sound(\"click.wav\")\n        dot.set_color(RED)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three smaller Manim banners stacked vertically:\n\n- The bottom banner expands to the right.\n- The middle banner expands outward from the center.\n- The top banner expands to the left.\n\nAll three banners animate their expansion simultaneously."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExpandDirections(Scene):\n    def construct(self):\n        banners = [ManimBanner().scale(0.5).shift(UP*x) for x in [-2, 0, 2]]\n        self.play(\n            banners[0].expand(direction=\"right\"),\n            banners[1].expand(direction=\"center\"),\n            banners[2].expand(direction=\"left\"),\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three smaller Manim banners stacked vertically:\n\n- The bottom banner expands to the right.\n- The middle banner expands outward from the center.\n- The top banner expands to the left.\n\nAll three banners animate their expansion simultaneously."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExpandDirections(Scene):\n    def construct(self):\n        banners = [ManimBanner().scale(0.5).shift(UP*x) for x in [-2, 0, 2]]\n        self.play(\n            banners[0].expand(direction=\"right\"),\n            banners[1].expand(direction=\"center\"),\n            banners[2].expand(direction=\"left\"),\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display three smaller Manim banners stacked vertically:\n\n- The bottom banner expands to the right.\n- The middle banner expands outward from the center.\n- The top banner expands to the left.\n\nAll three banners animate their expansion simultaneously."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExpandDirections(Scene):\n    def construct(self):\n        banners = [ManimBanner().scale(0.5).shift(UP*x) for x in [-2, 0, 2]]\n        self.play(\n            banners[0].expand(direction=\"right\"),\n            banners[1].expand(direction=\"center\"),\n            banners[2].expand(direction=\"left\"),\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display six lines of styled text arranged vertically, each demonstrating different formatting effects:\n\n1. The first line shows \"Hello world\" entirely in italic.\n2. The second line shows \"Hello\" in normal style and \"world\" in italic.\n3. The third line displays \"Hello world\" entirely in bold.\n4. The fourth line shows \"Hello\" in normal weight and \"world\" in bold.\n5. The fifth line highlights all occurrences of the letter \"o\" in yellow, with ligatures disabled to ensure individual character styling.\n6. The sixth line reads \"Visit us at docs.manim.community\", with the URL highlighted in yellow and ligatures disabled for precise character rendering. This line is slightly larger and shifted downward.\n\nAll lines are centered and evenly spaced to fill the screen vertically."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TextItalicAndBoldExample(Scene):\n    def construct(self):\n        text1 = Text(\"Hello world\", slant=ITALIC)\n        text2 = Text(\"Hello world\", t2s={'world':ITALIC})\n        text3 = Text(\"Hello world\", weight=BOLD)\n        text4 = Text(\"Hello world\", t2w={'world':BOLD})\n        text5 = Text(\"Hello world\", t2c={'o':YELLOW}, disable_ligatures=True)\n        text6 = Text(\n            \"Visit us at docs.manim.community\",\n            t2c={\"docs.manim.community\": YELLOW},\n            disable_ligatures=True,\n       )\n        text6.scale(1.3).shift(DOWN)\n        self.add(text1, text2, text3, text4, text5 , text6)\n        Group(*self.mobjects).arrange(DOWN, buff=.8).set(height=config.frame_height-LARGE_BUFF)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display six lines of styled text arranged vertically, each demonstrating different formatting effects:\n\n1. The first line shows \"Hello world\" entirely in italic.\n2. The second line shows \"Hello\" in normal style and \"world\" in italic.\n3. The third line displays \"Hello world\" entirely in bold.\n4. The fourth line shows \"Hello\" in normal weight and \"world\" in bold.\n5. The fifth line highlights all occurrences of the letter \"o\" in yellow, with ligatures disabled to ensure individual character styling.\n6. The sixth line reads \"Visit us at docs.manim.community\", with the URL highlighted in yellow and ligatures disabled for precise character rendering. This line is slightly larger and shifted downward.\n\nAll lines are centered and evenly spaced to fill the screen vertically."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TextItalicAndBoldExample(Scene):\n    def construct(self):\n        text1 = Text(\"Hello world\", slant=ITALIC)\n        text2 = Text(\"Hello world\", t2s={'world':ITALIC})\n        text3 = Text(\"Hello world\", weight=BOLD)\n        text4 = Text(\"Hello world\", t2w={'world':BOLD})\n        text5 = Text(\"Hello world\", t2c={'o':YELLOW}, disable_ligatures=True)\n        text6 = Text(\n            \"Visit us at docs.manim.community\",\n            t2c={\"docs.manim.community\": YELLOW},\n            disable_ligatures=True,\n       )\n        text6.scale(1.3).shift(DOWN)\n        self.add(text1, text2, text3, text4, text5 , text6)\n        Group(*self.mobjects).arrange(DOWN, buff=.8).set(height=config.frame_height-LARGE_BUFF)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two dots on opposite sides of the screen\u2014one on the far left and one on the far right. They move toward each other simultaneously, crossing paths. During their motion, the speed of the animation dynamically changes: it starts at normal speed, slows down significantly in the middle portion, then returns to normal speed by the end, creating a noticeable slow-motion effect during the center of the movement."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpeedModifierExample(Scene):\n    def construct(self):\n        a = Dot().shift(LEFT * 4)\n        b = Dot().shift(RIGHT * 4)\n        self.add(a, b)\n        self.play(\n            ChangeSpeed(\n                AnimationGroup(\n                    a.animate(run_time=1).shift(RIGHT * 8),\n                    b.animate(run_time=1).shift(LEFT * 8),\n                ),\n                speedinfo={0.3: 1, 0.4: 0.1, 0.6: 0.1, 1: 1},\n                rate_func=linear,\n            )\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two dots on opposite sides of the screen\u2014one on the far left and one on the far right. They move toward each other simultaneously, crossing paths. During their motion, the speed of the animation dynamically changes: it starts at normal speed, slows down significantly in the middle portion, then returns to normal speed by the end, creating a noticeable slow-motion effect during the center of the movement."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpeedModifierExample(Scene):\n    def construct(self):\n        a = Dot().shift(LEFT * 4)\n        b = Dot().shift(RIGHT * 4)\n        self.add(a, b)\n        self.play(\n            ChangeSpeed(\n                AnimationGroup(\n                    a.animate(run_time=1).shift(RIGHT * 8),\n                    b.animate(run_time=1).shift(LEFT * 8),\n                ),\n                speedinfo={0.3: 1, 0.4: 0.1, 0.6: 0.1, 1: 1},\n                rate_func=linear,\n            )\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a vertical sequence of annotation elements centered on screen: \n\n- A plain dot\n- A dot with an annotation ring\n- A dot labeled \"ii\"\n- A dot labeled with an orange Greek letter alpha\n- A large left-to-right curved arrow bending downward\n- A left-to-right curved arrow bending upward\n- Lastly, a double-headed curved arrow pointing right.\n\nEach of the above element is evenly spaced vertically."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UsefulAnnotations(Scene):\n    def construct(self):\n        m0 = Dot()\n        m1 = AnnotationDot()\n        m2 = LabeledDot(\"ii\")\n        m3 = LabeledDot(MathTex(r\"\\alpha\").set_color(ORANGE))\n        m4 = CurvedArrow(2*LEFT, 2*RIGHT, radius= -5)\n        m5 = CurvedArrow(2*LEFT, 2*RIGHT, radius= 8)\n        m6 = CurvedDoubleArrow(ORIGIN, 2*RIGHT)\n\n        self.add(m0, m1, m2, m3, m4, m5, m6)\n        for i, mobj in enumerate(self.mobjects):\n            mobj.shift(DOWN * (i-3))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a vertical sequence of annotation elements centered on screen: \n\n- A plain dot\n- A dot with an annotation ring\n- A dot labeled \"ii\"\n- A dot labeled with an orange Greek letter alpha\n- A large left-to-right curved arrow bending downward\n- A left-to-right curved arrow bending upward\n- Lastly, a double-headed curved arrow pointing right.\n\nEach of the above element is evenly spaced vertically."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UsefulAnnotations(Scene):\n    def construct(self):\n        m0 = Dot()\n        m1 = AnnotationDot()\n        m2 = LabeledDot(\"ii\")\n        m3 = LabeledDot(MathTex(r\"\\alpha\").set_color(ORANGE))\n        m4 = CurvedArrow(2*LEFT, 2*RIGHT, radius= -5)\n        m5 = CurvedArrow(2*LEFT, 2*RIGHT, radius= 8)\n        m6 = CurvedDoubleArrow(ORIGIN, 2*RIGHT)\n\n        self.add(m0, m1, m2, m3, m4, m5, m6)\n        for i, mobj in enumerate(self.mobjects):\n            mobj.shift(DOWN * (i-3))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a filled purple Reuleaux triangle with thick blue edges, formed by three curved arcs connecting three points in an equilateral triangle layout. The arcs have no visible stroke, and the shape fades into view at the center of the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArcPolygonExample(Scene):\n    def construct(self):\n        arc_conf = {\"stroke_width\": 0}\n        poly_conf = {\"stroke_width\": 10, \"stroke_color\": BLUE,\n              \"fill_opacity\": 1, \"color\": PURPLE}\n        a = [-1, 0, 0]\n        b = [1, 0, 0]\n        c = [0, np.sqrt(3), 0]\n        arc0 = ArcBetweenPoints(a, b, radius=2, **arc_conf)\n        arc1 = ArcBetweenPoints(b, c, radius=2, **arc_conf)\n        arc2 = ArcBetweenPoints(c, a, radius=2, **arc_conf)\n        reuleaux_tri = ArcPolygonFromArcs(arc0, arc1, arc2, **poly_conf)\n        self.play(FadeIn(reuleaux_tri))\n        self.wait(2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a filled purple Reuleaux triangle with thick blue edges, formed by three curved arcs connecting three points in an equilateral triangle layout. The arcs have no visible stroke, and the shape fades into view at the center of the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArcPolygonExample(Scene):\n    def construct(self):\n        arc_conf = {\"stroke_width\": 0}\n        poly_conf = {\"stroke_width\": 10, \"stroke_color\": BLUE,\n              \"fill_opacity\": 1, \"color\": PURPLE}\n        a = [-1, 0, 0]\n        b = [1, 0, 0]\n        c = [0, np.sqrt(3), 0]\n        arc0 = ArcBetweenPoints(a, b, radius=2, **arc_conf)\n        arc1 = ArcBetweenPoints(b, c, radius=2, **arc_conf)\n        arc2 = ArcBetweenPoints(c, a, radius=2, **arc_conf)\n        reuleaux_tri = ArcPolygonFromArcs(arc0, arc1, arc2, **poly_conf)\n        self.play(FadeIn(reuleaux_tri))\n        self.wait(2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a multi-line mathematical derivation using the LaTeX align environment. The expression shows the function \\( f(x) \\) being simplified step by step: first as \\( 3 + 2 + 1 \\), then \\( 5 + 1 \\), and finally \\( 6 \\), with each step aligned at the equals sign."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaTeXAlignEnvironment(Scene):\n    def construct(self):\n        tex = MathTex(r'f(x) &= 3 + 2 + 1\\\\ &= 5 + 1 \\\\ &= 6', font_size=96)\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a multi-line mathematical derivation using the LaTeX align environment. The expression shows the function \\( f(x) \\) being simplified step by step: first as \\( 3 + 2 + 1 \\), then \\( 5 + 1 \\), and finally \\( 6 \\), with each step aligned at the equals sign."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaTeXAlignEnvironment(Scene):\n    def construct(self):\n        tex = MathTex(r'f(x) &= 3 + 2 + 1\\\\ &= 5 + 1 \\\\ &= 6', font_size=96)\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a multi-line mathematical derivation using the LaTeX align environment. The expression shows the function \\( f(x) \\) being simplified step by step: first as \\( 3 + 2 + 1 \\), then \\( 5 + 1 \\), and finally \\( 6 \\), with each step aligned at the equals sign."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaTeXAlignEnvironment(Scene):\n    def construct(self):\n        tex = MathTex(r'f(x) &= 3 + 2 + 1\\\\ &= 5 + 1 \\\\ &= 6', font_size=96)\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a dot, a square, and a triangle grouped together on screen. Then animate them appearing one by one in order, gradually revealing the full group."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShowIncreasingSubsetsScene(Scene):\n    def construct(self):\n        p = VGroup(Dot(), Square(), Triangle())\n        self.add(p)\n        self.play(ShowIncreasingSubsets(p))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a dot, a square, and a triangle grouped together on screen. Then animate them appearing one by one in order, gradually revealing the full group."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShowIncreasingSubsetsScene(Scene):\n    def construct(self):\n        p = VGroup(Dot(), Square(), Triangle())\n        self.add(p)\n        self.play(ShowIncreasingSubsets(p))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Set the background color to white. Display a red square, then animate it transforming into a slightly rotated red rectangle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleTransform(Scene):\n    def construct(self):\n        self.camera.background_color = WHITE\n        m1 = Square().set_color(RED)\n        m2 = Rectangle().set_color(RED).rotate(0.2)\n        self.play(Transform(m1,m2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that set the background color to white. Display a red square, then animate it transforming into a slightly rotated red rectangle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleTransform(Scene):\n    def construct(self):\n        self.camera.background_color = WHITE\n        m1 = Square().set_color(RED)\n        m2 = Rectangle().set_color(RED).rotate(0.2)\n        self.play(Transform(m1,m2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a complex plane with labeled coordinates, then show two yellow dots: one at the position representing \\(2 + i\\) and another at \\(-3 - 2i\\). Each dot is labeled with its corresponding complex number, placed just above and to the right of the dot."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ComplexPlaneExample(Scene):\n    def construct(self):\n        plane = ComplexPlane().add_coordinates()\n        self.add(plane)\n        d1 = Dot(plane.n2p(2 + 1j), color=YELLOW)\n        d2 = Dot(plane.n2p(-3 - 2j), color=YELLOW)\n        label1 = MathTex(\"2+i\").next_to(d1, UR, 0.1)\n        label2 = MathTex(\"-3-2i\").next_to(d2, UR, 0.1)\n        self.add(\n            d1,\n            label1,\n            d2,\n            label2,\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a complex plane with labeled coordinates, then show two yellow dots: one at the position representing \\(2 + i\\) and another at \\(-3 - 2i\\). Each dot is labeled with its corresponding complex number, placed just above and to the right of the dot."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ComplexPlaneExample(Scene):\n    def construct(self):\n        plane = ComplexPlane().add_coordinates()\n        self.add(plane)\n        d1 = Dot(plane.n2p(2 + 1j), color=YELLOW)\n        d2 = Dot(plane.n2p(-3 - 2j), color=YELLOW)\n        label1 = MathTex(\"2+i\").next_to(d1, UR, 0.1)\n        label2 = MathTex(\"-3-2i\").next_to(d2, UR, 0.1)\n        self.add(\n            d1,\n            label1,\n            d2,\n            label2,\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \u201cWelcome to\u201d at the center of the screen, followed by the Manim logo banner appearing below it. The text is written with a smooth animation that continues updating as it's being drawn, and after a short pause, the banner expands into view with a quick animation, completing the welcoming scene."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass WelcomeToManim(Scene):\n    def construct(self):\n        words = Text(\"Welcome to\")\n        banner = ManimBanner().scale(0.5)\n        VGroup(words, banner).arrange(DOWN)\n\n        turn_animation_into_updater(Write(words, run_time=0.9))\n        self.add(words)\n        self.wait(0.5)\n        self.play(banner.expand(), run_time=0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \u201cWelcome to\u201d at the center of the screen, followed by the Manim logo banner appearing below it. The text is written with a smooth animation that continues updating as it's being drawn, and after a short pause, the banner expands into view with a quick animation, completing the welcoming scene."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass WelcomeToManim(Scene):\n    def construct(self):\n        words = Text(\"Welcome to\")\n        banner = ManimBanner().scale(0.5)\n        VGroup(words, banner).arrange(DOWN)\n\n        turn_animation_into_updater(Write(words, run_time=0.9))\n        self.add(words)\n        self.wait(0.5)\n        self.play(banner.expand(), run_time=0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the text \u201cWelcome to\u201d at the center of the screen, followed by the Manim logo banner appearing below it. The text is written with a smooth animation that continues updating as it's being drawn, and after a short pause, the banner expands into view with a quick animation, completing the welcoming scene."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass WelcomeToManim(Scene):\n    def construct(self):\n        words = Text(\"Welcome to\")\n        banner = ManimBanner().scale(0.5)\n        VGroup(words, banner).arrange(DOWN)\n\n        turn_animation_into_updater(Write(words, run_time=0.9))\n        self.add(words)\n        self.wait(0.5)\n        self.play(banner.expand(), run_time=0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two vertical groups of numbers side by side: on the left, the numbers 1, 2, and 3 with a red label \"ReplacementTransform\"; on the right, the numbers 4, 5, and 6 with a blue label \"Transform\".\n\nIn the left group, each number transforms into the next using `ReplacementTransform`, meaning the previous number is completely replaced and disappears during the transition.\n\nIn the right group, each number transforms into the next using `Transform`, so the previous number remains visible during the transition, resulting in overlapping numbers as the animation progresses."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ReplacementTransformOrTransform(Scene):\n    def construct(self):\n        # set up the numbers\n        r_transform = VGroup(*[Integer(i) for i in range(1,4)])\n        text_1 = Text(\"ReplacementTransform\", color=RED)\n        r_transform.add(text_1)\n\n        transform = VGroup(*[Integer(i) for i in range(4,7)])\n        text_2 = Text(\"Transform\", color=BLUE)\n        transform.add(text_2)\n\n        ints = VGroup(r_transform, transform)\n        texts = VGroup(text_1, text_2).scale(0.75)\n        r_transform.arrange(direction=UP, buff=1)\n        transform.arrange(direction=UP, buff=1)\n\n        ints.arrange(buff=2)\n        self.add(ints, texts)\n\n        # The mobs replace each other and none are left behind\n        self.play(ReplacementTransform(r_transform[0], r_transform[1]))\n        self.play(ReplacementTransform(r_transform[1], r_transform[2]))\n\n        # The mobs linger after the Transform()\n        self.play(Transform(transform[0], transform[1]))\n        self.play(Transform(transform[1], transform[2]))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two vertical groups of numbers side by side: on the left, the numbers 1, 2, and 3 with a red label \"ReplacementTransform\"; on the right, the numbers 4, 5, and 6 with a blue label \"Transform\".\n\nIn the left group, each number transforms into the next using `ReplacementTransform`, meaning the previous number is completely replaced and disappears during the transition.\n\nIn the right group, each number transforms into the next using `Transform`, so the previous number remains visible during the transition, resulting in overlapping numbers as the animation progresses."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ReplacementTransformOrTransform(Scene):\n    def construct(self):\n        # set up the numbers\n        r_transform = VGroup(*[Integer(i) for i in range(1,4)])\n        text_1 = Text(\"ReplacementTransform\", color=RED)\n        r_transform.add(text_1)\n\n        transform = VGroup(*[Integer(i) for i in range(4,7)])\n        text_2 = Text(\"Transform\", color=BLUE)\n        transform.add(text_2)\n\n        ints = VGroup(r_transform, transform)\n        texts = VGroup(text_1, text_2).scale(0.75)\n        r_transform.arrange(direction=UP, buff=1)\n        transform.arrange(direction=UP, buff=1)\n\n        ints.arrange(buff=2)\n        self.add(ints, texts)\n\n        # The mobs replace each other and none are left behind\n        self.play(ReplacementTransform(r_transform[0], r_transform[1]))\n        self.play(ReplacementTransform(r_transform[1], r_transform[2]))\n\n        # The mobs linger after the Transform()\n        self.play(Transform(transform[0], transform[1]))\n        self.play(Transform(transform[1], transform[2]))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display two vertical groups of numbers side by side: on the left, the numbers 1, 2, and 3 with a red label \"ReplacementTransform\"; on the right, the numbers 4, 5, and 6 with a blue label \"Transform\".\n\nIn the left group, each number transforms into the next using `ReplacementTransform`, meaning the previous number is completely replaced and disappears during the transition.\n\nIn the right group, each number transforms into the next using `Transform`, so the previous number remains visible during the transition, resulting in overlapping numbers as the animation progresses."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ReplacementTransformOrTransform(Scene):\n    def construct(self):\n        # set up the numbers\n        r_transform = VGroup(*[Integer(i) for i in range(1,4)])\n        text_1 = Text(\"ReplacementTransform\", color=RED)\n        r_transform.add(text_1)\n\n        transform = VGroup(*[Integer(i) for i in range(4,7)])\n        text_2 = Text(\"Transform\", color=BLUE)\n        transform.add(text_2)\n\n        ints = VGroup(r_transform, transform)\n        texts = VGroup(text_1, text_2).scale(0.75)\n        r_transform.arrange(direction=UP, buff=1)\n        transform.arrange(direction=UP, buff=1)\n\n        ints.arrange(buff=2)\n        self.add(ints, texts)\n\n        # The mobs replace each other and none are left behind\n        self.play(ReplacementTransform(r_transform[0], r_transform[1]))\n        self.play(ReplacementTransform(r_transform[1], r_transform[2]))\n\n        # The mobs linger after the Transform()\n        self.play(Transform(transform[0], transform[1]))\n        self.play(Transform(transform[1], transform[2]))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display ten dots scattered across the screen, each representing a point in 2D space. A blue convex polygon (convex hull) is drawn around the outermost points, enclosing all the dots and illustrating the smallest convex shape that contains them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ConvexHullExample(Scene):\n    def construct(self):\n        points = [\n            [-2.35, -2.25, 0],\n            [1.65, -2.25, 0],\n            [2.65, -0.25, 0],\n            [1.65, 1.75, 0],\n            [-0.35, 2.75, 0],\n            [-2.35, 0.75, 0],\n            [-0.35, -1.25, 0],\n            [0.65, -0.25, 0],\n            [-1.35, 0.25, 0],\n            [0.15, 0.75, 0]\n        ]\n        hull = ConvexHull(*points, color=BLUE)\n        dots = VGroup(*[Dot(point) for point in points])\n        self.add(hull)\n        self.add(dots)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display ten dots scattered across the screen, each representing a point in 2D space. A blue convex polygon (convex hull) is drawn around the outermost points, enclosing all the dots and illustrating the smallest convex shape that contains them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ConvexHullExample(Scene):\n    def construct(self):\n        points = [\n            [-2.35, -2.25, 0],\n            [1.65, -2.25, 0],\n            [2.65, -0.25, 0],\n            [1.65, 1.75, 0],\n            [-0.35, 2.75, 0],\n            [-2.35, 0.75, 0],\n            [-0.35, -1.25, 0],\n            [0.65, -0.25, 0],\n            [-1.35, 0.25, 0],\n            [0.15, 0.75, 0]\n        ]\n        hull = ConvexHull(*points, color=BLUE)\n        dots = VGroup(*[Dot(point) for point in points])\n        self.add(hull)\n        self.add(dots)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display ten dots scattered across the screen, each representing a point in 2D space. A blue convex polygon (convex hull) is drawn around the outermost points, enclosing all the dots and illustrating the smallest convex shape that contains them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ConvexHullExample(Scene):\n    def construct(self):\n        points = [\n            [-2.35, -2.25, 0],\n            [1.65, -2.25, 0],\n            [2.65, -0.25, 0],\n            [1.65, 1.75, 0],\n            [-0.35, 2.75, 0],\n            [-2.35, 0.75, 0],\n            [-0.35, -1.25, 0],\n            [0.65, -0.25, 0],\n            [-1.35, 0.25, 0],\n            [0.15, 0.75, 0]\n        ]\n        hull = ConvexHull(*points, color=BLUE)\n        dots = VGroup(*[Dot(point) for point in points])\n        self.add(hull)\n        self.add(dots)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a dense scatter of 400 small colored points randomly distributed across the screen. The points are placed in two overlapping patterns, each using different scaling factors for their grid-like placement. Each point is randomly colored red, green, blue, or yellow, creating a vibrant, speckled visual effect."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExamplePoint(Scene):\n    def construct(self):\n        colorList = [RED, GREEN, BLUE, YELLOW]\n        for i in range(200):\n            point = Point(location=[0.63 * np.random.randint(-4, 4), 0.37 * np.random.randint(-4, 4), 0], color=np.random.choice(colorList))\n            self.add(point)\n        for i in range(200):\n            point = Point(location=[0.37 * np.random.randint(-4, 4), 0.63 * np.random.randint(-4, 4), 0], color=np.random.choice(colorList))\n            self.add(point)\n        self.add(point)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a dense scatter of 400 small colored points randomly distributed across the screen. The points are placed in two overlapping patterns, each using different scaling factors for their grid-like placement. Each point is randomly colored red, green, blue, or yellow, creating a vibrant, speckled visual effect."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExamplePoint(Scene):\n    def construct(self):\n        colorList = [RED, GREEN, BLUE, YELLOW]\n        for i in range(200):\n            point = Point(location=[0.63 * np.random.randint(-4, 4), 0.37 * np.random.randint(-4, 4), 0], color=np.random.choice(colorList))\n            self.add(point)\n        for i in range(200):\n            point = Point(location=[0.37 * np.random.randint(-4, 4), 0.63 * np.random.randint(-4, 4), 0], color=np.random.choice(colorList))\n            self.add(point)\n        self.add(point)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a dense scatter of 400 small colored points randomly distributed across the screen. The points are placed in two overlapping patterns, each using different scaling factors for their grid-like placement. Each point is randomly colored red, green, blue, or yellow, creating a vibrant, speckled visual effect."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExamplePoint(Scene):\n    def construct(self):\n        colorList = [RED, GREEN, BLUE, YELLOW]\n        for i in range(200):\n            point = Point(location=[0.63 * np.random.randint(-4, 4), 0.37 * np.random.randint(-4, 4), 0], color=np.random.choice(colorList))\n            self.add(point)\n        for i in range(200):\n            point = Point(location=[0.37 * np.random.randint(-4, 4), 0.63 * np.random.randint(-4, 4), 0], color=np.random.choice(colorList))\n            self.add(point)\n        self.add(point)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three sample space rectangles arranged horizontally:\n\n- The first is a large, fully opaque rectangle with thick borders.\n- The second is a medium-sized rectangle with thinner borders and semi-transparent fill.\n- The third is a small, nearly transparent square divided vertically into three segments with proportions 37%, 13%, and 50%, filled with black, white, and gray respectively.\n\nAll shapes appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleSampleSpace(Scene):\n    def construct(self):\n        poly1 = SampleSpace(stroke_width=15, fill_opacity=1)\n        poly2 = SampleSpace(width=5, height=3, stroke_width=5, fill_opacity=0.5)\n        poly3 = SampleSpace(width=2, height=2, stroke_width=5, fill_opacity=0.1)\n        poly3.divide_vertically(p_list=np.array([0.37, 0.13, 0.5]), colors=[BLACK, WHITE, GRAY], vect=RIGHT)\n        poly_group = VGroup(poly1, poly2, poly3).arrange()\n        self.add(poly_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three sample space rectangles arranged horizontally:\n\n- The first is a large, fully opaque rectangle with thick borders.\n- The second is a medium-sized rectangle with thinner borders and semi-transparent fill.\n- The third is a small, nearly transparent square divided vertically into three segments with proportions 37%, 13%, and 50%, filled with black, white, and gray respectively.\n\nAll shapes appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleSampleSpace(Scene):\n    def construct(self):\n        poly1 = SampleSpace(stroke_width=15, fill_opacity=1)\n        poly2 = SampleSpace(width=5, height=3, stroke_width=5, fill_opacity=0.5)\n        poly3 = SampleSpace(width=2, height=2, stroke_width=5, fill_opacity=0.1)\n        poly3.divide_vertically(p_list=np.array([0.37, 0.13, 0.5]), colors=[BLACK, WHITE, GRAY], vect=RIGHT)\n        poly_group = VGroup(poly1, poly2, poly3).arrange()\n        self.add(poly_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display three sample space rectangles arranged horizontally:\n\n- The first is a large, fully opaque rectangle with thick borders.\n- The second is a medium-sized rectangle with thinner borders and semi-transparent fill.\n- The third is a small, nearly transparent square divided vertically into three segments with proportions 37%, 13%, and 50%, filled with black, white, and gray respectively.\n\nAll shapes appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleSampleSpace(Scene):\n    def construct(self):\n        poly1 = SampleSpace(stroke_width=15, fill_opacity=1)\n        poly2 = SampleSpace(width=5, height=3, stroke_width=5, fill_opacity=0.5)\n        poly3 = SampleSpace(width=2, height=2, stroke_width=5, fill_opacity=0.1)\n        poly3.divide_vertically(p_list=np.array([0.37, 0.13, 0.5]), colors=[BLACK, WHITE, GRAY], vect=RIGHT)\n        poly_group = VGroup(poly1, poly2, poly3).arrange()\n        self.add(poly_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 table with row and column labels. A rectangle is drawn around the first row, visually highlighting both cells in that row, including the row heading."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetRowsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.add(SurroundingRectangle(table.get_rows()[1]))\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 table with row and column labels. A rectangle is drawn around the first row, visually highlighting both cells in that row, including the row heading."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetRowsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.add(SurroundingRectangle(table.get_rows()[1]))\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d75 grid of evenly spaced dots. A line is first drawn between the first and second dots. Then, the line dynamically shifts to connect the second and third dots, and finally moves again to connect the fifth and eighth dots, demonstrating how a line can be updated to connect different points."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LineExample(Scene):\n    def construct(self):\n        d = VGroup()\n        for i in range(0,10):\n            d.add(Dot())\n        d.arrange_in_grid(buff=1)\n        self.add(d)\n        l= Line(d[0], d[1])\n        self.add(l)\n        self.wait()\n        l.put_start_and_end_on(d[1].get_center(), d[2].get_center())\n        self.wait()\n        l.put_start_and_end_on(d[4].get_center(), d[7].get_center())\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d75 grid of evenly spaced dots. A line is first drawn between the first and second dots. Then, the line dynamically shifts to connect the second and third dots, and finally moves again to connect the fifth and eighth dots, demonstrating how a line can be updated to connect different points."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LineExample(Scene):\n    def construct(self):\n        d = VGroup()\n        for i in range(0,10):\n            d.add(Dot())\n        d.arrange_in_grid(buff=1)\n        self.add(d)\n        l= Line(d[0], d[1])\n        self.add(l)\n        self.wait()\n        l.put_start_and_end_on(d[1].get_center(), d[2].get_center())\n        self.wait()\n        l.put_start_and_end_on(d[4].get_center(), d[7].get_center())\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a complex labeled polygram composed of three nested polygonal rings:  \n- A large outer ring with 20 connected points forming an irregular shape,  \n- A medium inner ring forming a closed loop with 8 points,  \n- A small triangular ring with 3 points.  \n\nThe polygram is labeled \u201cPole\u201d in sans-serif font, and a white circle is drawn around it, centered at the polygram\u2019s pole. The outer polygon is semi-transparent, while the two inner shapes are filled solid black."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LabeledPolygramExample(Scene):\n    def construct(self):\n        # Define Rings\n        ring1 = [\n            [-3.8, -2.4, 0], [-2.4, -2.5, 0], [-1.3, -1.6, 0], [-0.2, -1.7, 0],\n            [1.7, -2.5, 0], [2.9, -2.6, 0], [3.5, -1.5, 0], [4.9, -1.4, 0],\n            [4.5, 0.2, 0], [4.7, 1.6, 0], [3.5, 2.4, 0], [1.1, 2.5, 0],\n            [-0.1, 0.9, 0], [-1.2, 0.5, 0], [-1.6, 0.7, 0], [-1.4, 1.9, 0],\n            [-2.6, 2.6, 0], [-4.4, 1.2, 0], [-4.9, -0.8, 0], [-3.8, -2.4, 0]\n        ]\n        ring2 = [\n            [0.2, -1.2, 0], [0.9, -1.2, 0], [1.4, -2.0, 0], [2.1, -1.6, 0],\n            [2.2, -0.5, 0], [1.4, 0.0, 0], [0.4, -0.2, 0], [0.2, -1.2, 0]\n        ]\n        ring3 = [[-2.7, 1.4, 0], [-2.3, 1.7, 0], [-2.8, 1.9, 0], [-2.7, 1.4, 0]]\n\n        # Create Polygons (for reference)\n        p1 = Polygon(*ring1, fill_opacity=0.75)\n        p2 = Polygon(*ring2, fill_color=BLACK, fill_opacity=1)\n        p3 = Polygon(*ring3, fill_color=BLACK, fill_opacity=1)\n\n        # Create Labeled Polygram\n        polygram = LabeledPolygram(\n            *[ring1, ring2, ring3],\n            label=Text('Pole', font='sans-serif'),\n            precision=0.01,\n        )\n\n        # Display Circle (for reference)\n        circle = Circle(radius=polygram.radius, color=WHITE).move_to(polygram.pole)\n\n        self.add(p1, p2, p3)\n        self.add(polygram)\n        self.add(circle)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a complex labeled polygram composed of three nested polygonal rings:  \n- A large outer ring with 20 connected points forming an irregular shape,  \n- A medium inner ring forming a closed loop with 8 points,  \n- A small triangular ring with 3 points.  \n\nThe polygram is labeled \u201cPole\u201d in sans-serif font, and a white circle is drawn around it, centered at the polygram\u2019s pole. The outer polygon is semi-transparent, while the two inner shapes are filled solid black."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LabeledPolygramExample(Scene):\n    def construct(self):\n        # Define Rings\n        ring1 = [\n            [-3.8, -2.4, 0], [-2.4, -2.5, 0], [-1.3, -1.6, 0], [-0.2, -1.7, 0],\n            [1.7, -2.5, 0], [2.9, -2.6, 0], [3.5, -1.5, 0], [4.9, -1.4, 0],\n            [4.5, 0.2, 0], [4.7, 1.6, 0], [3.5, 2.4, 0], [1.1, 2.5, 0],\n            [-0.1, 0.9, 0], [-1.2, 0.5, 0], [-1.6, 0.7, 0], [-1.4, 1.9, 0],\n            [-2.6, 2.6, 0], [-4.4, 1.2, 0], [-4.9, -0.8, 0], [-3.8, -2.4, 0]\n        ]\n        ring2 = [\n            [0.2, -1.2, 0], [0.9, -1.2, 0], [1.4, -2.0, 0], [2.1, -1.6, 0],\n            [2.2, -0.5, 0], [1.4, 0.0, 0], [0.4, -0.2, 0], [0.2, -1.2, 0]\n        ]\n        ring3 = [[-2.7, 1.4, 0], [-2.3, 1.7, 0], [-2.8, 1.9, 0], [-2.7, 1.4, 0]]\n\n        # Create Polygons (for reference)\n        p1 = Polygon(*ring1, fill_opacity=0.75)\n        p2 = Polygon(*ring2, fill_color=BLACK, fill_opacity=1)\n        p3 = Polygon(*ring3, fill_color=BLACK, fill_opacity=1)\n\n        # Create Labeled Polygram\n        polygram = LabeledPolygram(\n            *[ring1, ring2, ring3],\n            label=Text('Pole', font='sans-serif'),\n            precision=0.01,\n        )\n\n        # Display Circle (for reference)\n        circle = Circle(radius=polygram.radius, color=WHITE).move_to(polygram.pole)\n\n        self.add(p1, p2, p3)\n        self.add(polygram)\n        self.add(circle)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a complex labeled polygram composed of three nested polygonal rings:  \n- A large outer ring with 20 connected points forming an irregular shape,  \n- A medium inner ring forming a closed loop with 8 points,  \n- A small triangular ring with 3 points.  \n\nThe polygram is labeled \u201cPole\u201d in sans-serif font, and a white circle is drawn around it, centered at the polygram\u2019s pole. The outer polygon is semi-transparent, while the two inner shapes are filled solid black."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LabeledPolygramExample(Scene):\n    def construct(self):\n        # Define Rings\n        ring1 = [\n            [-3.8, -2.4, 0], [-2.4, -2.5, 0], [-1.3, -1.6, 0], [-0.2, -1.7, 0],\n            [1.7, -2.5, 0], [2.9, -2.6, 0], [3.5, -1.5, 0], [4.9, -1.4, 0],\n            [4.5, 0.2, 0], [4.7, 1.6, 0], [3.5, 2.4, 0], [1.1, 2.5, 0],\n            [-0.1, 0.9, 0], [-1.2, 0.5, 0], [-1.6, 0.7, 0], [-1.4, 1.9, 0],\n            [-2.6, 2.6, 0], [-4.4, 1.2, 0], [-4.9, -0.8, 0], [-3.8, -2.4, 0]\n        ]\n        ring2 = [\n            [0.2, -1.2, 0], [0.9, -1.2, 0], [1.4, -2.0, 0], [2.1, -1.6, 0],\n            [2.2, -0.5, 0], [1.4, 0.0, 0], [0.4, -0.2, 0], [0.2, -1.2, 0]\n        ]\n        ring3 = [[-2.7, 1.4, 0], [-2.3, 1.7, 0], [-2.8, 1.9, 0], [-2.7, 1.4, 0]]\n\n        # Create Polygons (for reference)\n        p1 = Polygon(*ring1, fill_opacity=0.75)\n        p2 = Polygon(*ring2, fill_color=BLACK, fill_opacity=1)\n        p3 = Polygon(*ring3, fill_color=BLACK, fill_opacity=1)\n\n        # Create Labeled Polygram\n        polygram = LabeledPolygram(\n            *[ring1, ring2, ring3],\n            label=Text('Pole', font='sans-serif'),\n            precision=0.01,\n        )\n\n        # Display Circle (for reference)\n        circle = Circle(radius=polygram.radius, color=WHITE).move_to(polygram.pole)\n\n        self.add(p1, p2, p3)\n        self.add(polygram)\n        self.add(circle)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three squares stacked vertically:\n\n1. A large square at the bottom.\n2. A medium-sized square placed directly above the large one.\n3. A small square positioned above the medium one.\n\nEach square is centered horizontally and aligned vertically with even spacing."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SquareExample(Scene):\n    def construct(self):\n        square_1 = Square(side_length=2.0).shift(DOWN)\n        square_2 = Square(side_length=1.0).next_to(square_1, direction=UP)\n        square_3 = Square(side_length=0.5).next_to(square_2, direction=UP)\n        self.add(square_1, square_2, square_3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three squares stacked vertically:\n\n1. A large square at the bottom.\n2. A medium-sized square placed directly above the large one.\n3. A small square positioned above the medium one.\n\nEach square is centered horizontally and aligned vertically with even spacing."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SquareExample(Scene):\n    def construct(self):\n        square_1 = Square(side_length=2.0).shift(DOWN)\n        square_2 = Square(side_length=1.0).next_to(square_1, direction=UP)\n        square_3 = Square(side_length=0.5).next_to(square_2, direction=UP)\n        self.add(square_1, square_2, square_3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display three squares stacked vertically:\n\n1. A large square at the bottom.\n2. A medium-sized square placed directly above the large one.\n3. A small square positioned above the medium one.\n\nEach square is centered horizontally and aligned vertically with even spacing."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SquareExample(Scene):\n    def construct(self):\n        square_1 = Square(side_length=2.0).shift(DOWN)\n        square_2 = Square(side_length=1.0).next_to(square_1, direction=UP)\n        square_3 = Square(side_length=0.5).next_to(square_2, direction=UP)\n        self.add(square_1, square_2, square_3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display an orange square being drawn with its border appearing first, followed by the fill."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShowDrawBorderThenFill(Scene):\n    def construct(self):\n        self.play(DrawBorderThenFill(Square(fill_opacity=1, fill_color=ORANGE)))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display an orange square being drawn with its border appearing first, followed by the fill."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShowDrawBorderThenFill(Scene):\n    def construct(self):\n        self.play(DrawBorderThenFill(Square(fill_opacity=1, fill_color=ORANGE)))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 table with row and column labels. Each of the four cell entries is colored differently\u2014blue, green, yellow, and red. The bottom-right cell is also rotated upside down, while the labels remain unchanged."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetEntriesWithoutLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        ent = table.get_entries_without_labels()\n        colors = [BLUE, GREEN, YELLOW, RED]\n        for k in range(len(colors)):\n            ent[k].set_color(colors[k])\n        table.get_entries_without_labels((2,2)).rotate(PI)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 table with row and column labels. Each of the four cell entries is colored differently\u2014blue, green, yellow, and red. The bottom-right cell is also rotated upside down, while the labels remain unchanged."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetEntriesWithoutLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        ent = table.get_entries_without_labels()\n        colors = [BLUE, GREEN, YELLOW, RED]\n        for k in range(len(colors)):\n            ent[k].set_color(colors[k])\n        table.get_entries_without_labels((2,2)).rotate(PI)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 2\u00d72 table with row and column labels. Each of the four cell entries is colored differently\u2014blue, green, yellow, and red. The bottom-right cell is also rotated upside down, while the labels remain unchanged."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetEntriesWithoutLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        ent = table.get_entries_without_labels()\n        colors = [BLUE, GREEN, YELLOW, RED]\n        for k in range(len(colors)):\n            ent[k].set_color(colors[k])\n        table.get_entries_without_labels((2,2)).rotate(PI)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a circle at the center of the screen. It then animates by changing its fill color to semi-transparent green, shrinking to half its size, and moving diagonally up and to the right, smoothly transitioning to its new appearance and position."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MoveToTargetExample(Scene):\n    def construct(self):\n        c = Circle()\n\n        c.generate_target()\n        c.target.set_fill(color=GREEN, opacity=0.5)\n        c.target.shift(2*RIGHT + UP).scale(0.5)\n\n        self.add(c)\n        self.play(MoveToTarget(c))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a circle at the center of the screen. It then animates by changing its fill color to semi-transparent green, shrinking to half its size, and moving diagonally up and to the right, smoothly transitioning to its new appearance and position."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MoveToTargetExample(Scene):\n    def construct(self):\n        c = Circle()\n\n        c.generate_target()\n        c.target.set_fill(color=GREEN, opacity=0.5)\n        c.target.shift(2*RIGHT + UP).scale(0.5)\n\n        self.add(c)\n        self.play(MoveToTarget(c))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a circle at the center of the screen. It then animates by changing its fill color to semi-transparent green, shrinking to half its size, and moving diagonally up and to the right, smoothly transitioning to its new appearance and position."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MoveToTargetExample(Scene):\n    def construct(self):\n        c = Circle()\n\n        c.generate_target()\n        c.target.set_fill(color=GREEN, opacity=0.5)\n        c.target.shift(2*RIGHT + UP).scale(0.5)\n\n        self.add(c)\n        self.play(MoveToTarget(c))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two on-screen variables: one labeled \u201cx\u201d and the other \u201cx\u00b2\u201d, both showing values with three decimal places. Initially, \u201cx\u201d is set to 2.0 and \u201cx\u00b2\u201d to 4.0. As \u201cx\u201d animates smoothly to 5.0 over two seconds, \u201cx\u00b2\u201d updates in real time to reflect the square of \u201cx\u201d, maintaining a dynamic link between the two values."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass VariableExample(Scene):\n    def construct(self):\n        start = 2.0\n\n        x_var = Variable(start, 'x', num_decimal_places=3)\n        sqr_var = Variable(start**2, 'x^2', num_decimal_places=3)\n        Group(x_var, sqr_var).arrange(DOWN)\n\n        sqr_var.add_updater(lambda v: v.tracker.set_value(x_var.tracker.get_value()**2))\n\n        self.add(x_var, sqr_var)\n        self.play(x_var.tracker.animate.set_value(5), run_time=2, rate_func=linear)\n        self.wait(0.1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two on-screen variables: one labeled \u201cx\u201d and the other \u201cx\u00b2\u201d, both showing values with three decimal places. Initially, \u201cx\u201d is set to 2.0 and \u201cx\u00b2\u201d to 4.0. As \u201cx\u201d animates smoothly to 5.0 over two seconds, \u201cx\u00b2\u201d updates in real time to reflect the square of \u201cx\u201d, maintaining a dynamic link between the two values."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass VariableExample(Scene):\n    def construct(self):\n        start = 2.0\n\n        x_var = Variable(start, 'x', num_decimal_places=3)\n        sqr_var = Variable(start**2, 'x^2', num_decimal_places=3)\n        Group(x_var, sqr_var).arrange(DOWN)\n\n        sqr_var.add_updater(lambda v: v.tracker.set_value(x_var.tracker.get_value()**2))\n\n        self.add(x_var, sqr_var)\n        self.play(x_var.tracker.animate.set_value(5), run_time=2, rate_func=linear)\n        self.wait(0.1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a grid of 35 dots arranged in 5 rows and 7 columns, with a title \"LaggedStartMap\" at the top. A yellow ripple effect animates across the dots and the title, where each element briefly changes to yellow and then returns to its original color. The effect is staggered with a lag ratio of 0.1, creating a wave-like motion."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaggedStartMapExample(Scene):\n    def construct(self):\n        title = Tex(\"LaggedStartMap\").to_edge(UP, buff=LARGE_BUFF)\n        dots = VGroup(\n            *[Dot(radius=0.16) for _ in range(35)]\n            ).arrange_in_grid(rows=5, cols=7, buff=MED_LARGE_BUFF)\n        self.add(dots, title)\n\n        # Animate yellow ripple effect\n        for mob in dots, title:\n            self.play(LaggedStartMap(\n                ApplyMethod, mob,\n                lambda m : (m.set_color, YELLOW),\n                lag_ratio = 0.1,\n                rate_func = there_and_back,\n                run_time = 2\n            ))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a grid of 35 dots arranged in 5 rows and 7 columns, with a title \"LaggedStartMap\" at the top. A yellow ripple effect animates across the dots and the title, where each element briefly changes to yellow and then returns to its original color. The effect is staggered with a lag ratio of 0.1, creating a wave-like motion."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaggedStartMapExample(Scene):\n    def construct(self):\n        title = Tex(\"LaggedStartMap\").to_edge(UP, buff=LARGE_BUFF)\n        dots = VGroup(\n            *[Dot(radius=0.16) for _ in range(35)]\n            ).arrange_in_grid(rows=5, cols=7, buff=MED_LARGE_BUFF)\n        self.add(dots, title)\n\n        # Animate yellow ripple effect\n        for mob in dots, title:\n            self.play(LaggedStartMap(\n                ApplyMethod, mob,\n                lambda m : (m.set_color, YELLOW),\n                lag_ratio = 0.1,\n                rate_func = there_and_back,\n                run_time = 2\n            ))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a grid of 35 dots arranged in 5 rows and 7 columns, with a title \"LaggedStartMap\" at the top. A yellow ripple effect animates across the dots and the title, where each element briefly changes to yellow and then returns to its original color. The effect is staggered with a lag ratio of 0.1, creating a wave-like motion."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaggedStartMapExample(Scene):\n    def construct(self):\n        title = Tex(\"LaggedStartMap\").to_edge(UP, buff=LARGE_BUFF)\n        dots = VGroup(\n            *[Dot(radius=0.16) for _ in range(35)]\n            ).arrange_in_grid(rows=5, cols=7, buff=MED_LARGE_BUFF)\n        self.add(dots, title)\n\n        # Animate yellow ripple effect\n        for mob in dots, title:\n            self.play(LaggedStartMap(\n                ApplyMethod, mob,\n                lambda m : (m.set_color, YELLOW),\n                lag_ratio = 0.1,\n                rate_func = there_and_back,\n                run_time = 2\n            ))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a dot on the far left side of the screen. It begins moving smoothly to the right, but its speed varies over time: it starts at normal speed, slows down significantly during the middle portion of the animation, then returns to normal speed. This speed variation is controlled by a modifier that affects the dot's motion continuously throughout the animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpeedModifierUpdaterExample(Scene):\n    def construct(self):\n        a = Dot().shift(LEFT * 4)\n        self.add(a)\n\n        ChangeSpeed.add_updater(a, lambda x, dt: x.shift(RIGHT * 4 * dt))\n        self.play(\n            ChangeSpeed(\n                Wait(2),\n                speedinfo={0.4: 1, 0.5: 0.2, 0.8: 0.2, 1: 1},\n                affects_speed_updaters=True,\n            )\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a dot on the far left side of the screen. It begins moving smoothly to the right, but its speed varies over time: it starts at normal speed, slows down significantly during the middle portion of the animation, then returns to normal speed. This speed variation is controlled by a modifier that affects the dot's motion continuously throughout the animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpeedModifierUpdaterExample(Scene):\n    def construct(self):\n        a = Dot().shift(LEFT * 4)\n        self.add(a)\n\n        ChangeSpeed.add_updater(a, lambda x, dt: x.shift(RIGHT * 4 * dt))\n        self.play(\n            ChangeSpeed(\n                Wait(2),\n                speedinfo={0.4: 1, 0.5: 0.2, 0.8: 0.2, 1: 1},\n                affects_speed_updaters=True,\n            )\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a dot on the far left side of the screen. It begins moving smoothly to the right, but its speed varies over time: it starts at normal speed, slows down significantly during the middle portion of the animation, then returns to normal speed. This speed variation is controlled by a modifier that affects the dot's motion continuously throughout the animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpeedModifierUpdaterExample(Scene):\n    def construct(self):\n        a = Dot().shift(LEFT * 4)\n        self.add(a)\n\n        ChangeSpeed.add_updater(a, lambda x, dt: x.shift(RIGHT * 4 * dt))\n        self.play(\n            ChangeSpeed(\n                Wait(2),\n                speedinfo={0.4: 1, 0.5: 0.2, 0.8: 0.2, 1: 1},\n                affects_speed_updaters=True,\n            )\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a red parametric curve traced by the point \\((\\sin(2t), \\sin(3t))\\) as \\(t\\) ranges from 0 to \\(2\\pi\\), scaled up by a factor of 3. The curve appears on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PlotParametricFunction(Scene):\n    def func(self, t):\n        return (np.sin(2 * t), np.sin(3 * t), 0)\n\n    def construct(self):\n        func = ParametricFunction(self.func, t_range = (0, TAU), fill_opacity=0).set_color(RED)\n        self.add(func.scale(3))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a red parametric curve traced by the point \\((\\sin(2t), \\sin(3t))\\) as \\(t\\) ranges from 0 to \\(2\\pi\\), scaled up by a factor of 3. The curve appears on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PlotParametricFunction(Scene):\n    def func(self, t):\n        return (np.sin(2 * t), np.sin(3 * t), 0)\n\n    def construct(self):\n        func = ParametricFunction(self.func, t_range = (0, TAU), fill_opacity=0).set_color(RED)\n        self.add(func.scale(3))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a red parametric curve traced by the point \\((\\sin(2t), \\sin(3t))\\) as \\(t\\) ranges from 0 to \\(2\\pi\\), scaled up by a factor of 3. The curve appears on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PlotParametricFunction(Scene):\n    def func(self, t):\n        return (np.sin(2 * t), np.sin(3 * t), 0)\n\n    def construct(self):\n        func = ParametricFunction(self.func, t_range = (0, TAU), fill_opacity=0).set_color(RED)\n        self.add(func.scale(3))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of coordinate axes with two curves:\n\n- A red curve representing the function \\( f(x) = \\frac{x^2 - 2}{3} \\).\n- A blue curve representing the antiderivative of that function, automatically computed and plotted based on the red curve.\n\nThis scene visually demonstrates the relationship between a function and its antiderivative."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AntiderivativeExample(Scene):\n    def construct(self):\n        ax = Axes()\n        graph1 = ax.plot(\n            lambda x: (x ** 2 - 2) / 3,\n            color=RED,\n        )\n        graph2 = ax.plot_antiderivative_graph(graph1, color=BLUE)\n        self.add(ax, graph1, graph2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of coordinate axes with two curves:\n\n- A red curve representing the function \\( f(x) = \\frac{x^2 - 2}{3} \\).\n- A blue curve representing the antiderivative of that function, automatically computed and plotted based on the red curve.\n\nThis scene visually demonstrates the relationship between a function and its antiderivative."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AntiderivativeExample(Scene):\n    def construct(self):\n        ax = Axes()\n        graph1 = ax.plot(\n            lambda x: (x ** 2 - 2) / 3,\n            color=RED,\n        )\n        graph2 = ax.plot_antiderivative_graph(graph1, color=BLUE)\n        self.add(ax, graph1, graph2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a set of coordinate axes with two curves:\n\n- A red curve representing the function \\( f(x) = \\frac{x^2 - 2}{3} \\).\n- A blue curve representing the antiderivative of that function, automatically computed and plotted based on the red curve.\n\nThis scene visually demonstrates the relationship between a function and its antiderivative."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AntiderivativeExample(Scene):\n    def construct(self):\n        ax = Axes()\n        graph1 = ax.plot(\n            lambda x: (x ** 2 - 2) / 3,\n            color=RED,\n        )\n        graph2 = ax.plot_antiderivative_graph(graph1, color=BLUE)\n        self.add(ax, graph1, graph2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display four identical squares arranged in a horizontal row with equal spacing between them, all centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Example(Scene):\n    def construct(self):\n        s1 = Square()\n        s2 = Square()\n        s3 = Square()\n        s4 = Square()\n        x = VGroup(s1, s2, s3, s4).set_x(0).arrange(buff=1.0)\n        self.add(x)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display four identical squares arranged in a horizontal row with equal spacing between them, all centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Example(Scene):\n    def construct(self):\n        s1 = Square()\n        s2 = Square()\n        s3 = Square()\n        s4 = Square()\n        x = VGroup(s1, s2, s3, s4).set_x(0).arrange(buff=1.0)\n        self.add(x)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 table with row and column labels. The top-left cell is highlighted in green and placed behind the table content, creating a subtle background emphasis without covering the cell's text."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetHighlightedCellExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        highlight = table.get_highlighted_cell((2,2), color=GREEN)\n        table.add_to_back(highlight)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 table with row and column labels. The top-left cell is highlighted in green and placed behind the table content, creating a subtle background emphasis without covering the cell's text."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetHighlightedCellExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        highlight = table.get_highlighted_cell((2,2), color=GREEN)\n        table.add_to_back(highlight)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 2\u00d72 table with row and column labels. The top-left cell is highlighted in green and placed behind the table content, creating a subtle background emphasis without covering the cell's text."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetHighlightedCellExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        highlight = table.get_highlighted_cell((2,2), color=GREEN)\n        table.add_to_back(highlight)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a grey circle with two small green dots: one at the rightmost point labeled \"(2,0)\" in blue, and one at the top labeled \"(0,2)\" in blue. A yellow arc is then drawn between the two dots, curving counterclockwise along the circle\u2019s edge."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArcBetweenPointsExample(Scene):\n    def construct(self):\n        circle = Circle(radius=2, stroke_color=GREY)\n        dot_1 = Dot(color=GREEN).move_to([2, 0, 0]).scale(0.5)\n        dot_1_text = Tex(\"(2,0)\").scale(0.5).next_to(dot_1, RIGHT).set_color(BLUE)\n        dot_2 = Dot(color=GREEN).move_to([0, 2, 0]).scale(0.5)\n        dot_2_text = Tex(\"(0,2)\").scale(0.5).next_to(dot_2, UP).set_color(BLUE)\n        arc= ArcBetweenPoints(start=2 * RIGHT, end=2 * UP, stroke_color=YELLOW)\n        self.add(circle, dot_1, dot_2, dot_1_text, dot_2_text)\n        self.play(Create(arc))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a grey circle with two small green dots: one at the rightmost point labeled \"(2,0)\" in blue, and one at the top labeled \"(0,2)\" in blue. A yellow arc is then drawn between the two dots, curving counterclockwise along the circle\u2019s edge."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArcBetweenPointsExample(Scene):\n    def construct(self):\n        circle = Circle(radius=2, stroke_color=GREY)\n        dot_1 = Dot(color=GREEN).move_to([2, 0, 0]).scale(0.5)\n        dot_1_text = Tex(\"(2,0)\").scale(0.5).next_to(dot_1, RIGHT).set_color(BLUE)\n        dot_2 = Dot(color=GREEN).move_to([0, 2, 0]).scale(0.5)\n        dot_2_text = Tex(\"(0,2)\").scale(0.5).next_to(dot_2, UP).set_color(BLUE)\n        arc= ArcBetweenPoints(start=2 * RIGHT, end=2 * UP, stroke_color=YELLOW)\n        self.add(circle, dot_1, dot_2, dot_1_text, dot_2_text)\n        self.play(Create(arc))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a closed shape by connecting four points in a square-like path using lines. Display text in the top-right corner showing the start, end, and center coordinates of the shape. Highlight the start point with a yellow dot, the end point with a red dot, the topmost point with a light green dot, the bottommost point with a dark green dot, the center with a blue dot, and the midpoint of the shape with an orange dot. Also, place small dots at every point that makes up the shape\u2019s outline. Finally, display the shape itself."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectExample(Scene):\n    def construct(self):\n        p1 = [-1,-1, 0]\n        p2 = [ 1,-1, 0]\n        p3 = [ 1, 1, 0]\n        p4 = [-1, 1, 0]\n        a  = Line(p1,p2).append_points(Line(p2,p3).points).append_points(Line(p3,p4).points)\n        point_start  = a.get_start()\n        point_end    = a.get_end()\n        point_center = a.get_center()\n        self.add(Text(f\"a.get_start() = {np.round(point_start,2).tolist()}\", font_size=24).to_edge(UR).set_color(YELLOW))\n        self.add(Text(f\"a.get_end() = {np.round(point_end,2).tolist()}\", font_size=24).next_to(self.mobjects[-1],DOWN).set_color(RED))\n        self.add(Text(f\"a.get_center() = {np.round(point_center,2).tolist()}\", font_size=24).next_to(self.mobjects[-1],DOWN).set_color(BLUE))\n\n        self.add(Dot(a.get_start()).set_color(YELLOW).scale(2))\n        self.add(Dot(a.get_end()).set_color(RED).scale(2))\n        self.add(Dot(a.get_top()).set_color(GREEN_A).scale(2))\n        self.add(Dot(a.get_bottom()).set_color(GREEN_D).scale(2))\n        self.add(Dot(a.get_center()).set_color(BLUE).scale(2))\n        self.add(Dot(a.point_from_proportion(0.5)).set_color(ORANGE).scale(2))\n        self.add(*[Dot(x) for x in a.points])\n        self.add(a)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that create a closed shape by connecting four points in a square-like path using lines. Display text in the top-right corner showing the start, end, and center coordinates of the shape. Highlight the start point with a yellow dot, the end point with a red dot, the topmost point with a light green dot, the bottommost point with a dark green dot, the center with a blue dot, and the midpoint of the shape with an orange dot. Also, place small dots at every point that makes up the shape\u2019s outline. Finally, display the shape itself."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectExample(Scene):\n    def construct(self):\n        p1 = [-1,-1, 0]\n        p2 = [ 1,-1, 0]\n        p3 = [ 1, 1, 0]\n        p4 = [-1, 1, 0]\n        a  = Line(p1,p2).append_points(Line(p2,p3).points).append_points(Line(p3,p4).points)\n        point_start  = a.get_start()\n        point_end    = a.get_end()\n        point_center = a.get_center()\n        self.add(Text(f\"a.get_start() = {np.round(point_start,2).tolist()}\", font_size=24).to_edge(UR).set_color(YELLOW))\n        self.add(Text(f\"a.get_end() = {np.round(point_end,2).tolist()}\", font_size=24).next_to(self.mobjects[-1],DOWN).set_color(RED))\n        self.add(Text(f\"a.get_center() = {np.round(point_center,2).tolist()}\", font_size=24).next_to(self.mobjects[-1],DOWN).set_color(BLUE))\n\n        self.add(Dot(a.get_start()).set_color(YELLOW).scale(2))\n        self.add(Dot(a.get_end()).set_color(RED).scale(2))\n        self.add(Dot(a.get_top()).set_color(GREEN_A).scale(2))\n        self.add(Dot(a.get_bottom()).set_color(GREEN_D).scale(2))\n        self.add(Dot(a.get_center()).set_color(BLUE).scale(2))\n        self.add(Dot(a.point_from_proportion(0.5)).set_color(ORANGE).scale(2))\n        self.add(*[Dot(x) for x in a.points])\n        self.add(a)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to create a closed shape by connecting four points in a square-like path using lines. Display text in the top-right corner showing the start, end, and center coordinates of the shape. Highlight the start point with a yellow dot, the end point with a red dot, the topmost point with a light green dot, the bottommost point with a dark green dot, the center with a blue dot, and the midpoint of the shape with an orange dot. Also, place small dots at every point that makes up the shape\u2019s outline. Finally, display the shape itself."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectExample(Scene):\n    def construct(self):\n        p1 = [-1,-1, 0]\n        p2 = [ 1,-1, 0]\n        p3 = [ 1, 1, 0]\n        p4 = [-1, 1, 0]\n        a  = Line(p1,p2).append_points(Line(p2,p3).points).append_points(Line(p3,p4).points)\n        point_start  = a.get_start()\n        point_end    = a.get_end()\n        point_center = a.get_center()\n        self.add(Text(f\"a.get_start() = {np.round(point_start,2).tolist()}\", font_size=24).to_edge(UR).set_color(YELLOW))\n        self.add(Text(f\"a.get_end() = {np.round(point_end,2).tolist()}\", font_size=24).next_to(self.mobjects[-1],DOWN).set_color(RED))\n        self.add(Text(f\"a.get_center() = {np.round(point_center,2).tolist()}\", font_size=24).next_to(self.mobjects[-1],DOWN).set_color(BLUE))\n\n        self.add(Dot(a.get_start()).set_color(YELLOW).scale(2))\n        self.add(Dot(a.get_end()).set_color(RED).scale(2))\n        self.add(Dot(a.get_top()).set_color(GREEN_A).scale(2))\n        self.add(Dot(a.get_bottom()).set_color(GREEN_D).scale(2))\n        self.add(Dot(a.get_center()).set_color(BLUE).scale(2))\n        self.add(Dot(a.point_from_proportion(0.5)).set_color(ORANGE).scale(2))\n        self.add(*[Dot(x) for x in a.points])\n        self.add(a)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a graph with five connected nodes initially arranged in a straight horizontal line. After being created, the graph smoothly transitions into a circular layout, repositioning the nodes evenly around a circle while maintaining their connections."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ChangeGraphLayout(Scene):\n    def construct(self):\n        G = Graph([1, 2, 3, 4, 5], [(1, 2), (2, 3), (3, 4), (4, 5)],\n                  layout={1: [-2, 0, 0], 2: [-1, 0, 0], 3: [0, 0, 0],\n                          4: [1, 0, 0], 5: [2, 0, 0]}\n                  )\n        self.play(Create(G))\n        self.play(G.animate.change_layout(\"circular\"))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a graph with five connected nodes initially arranged in a straight horizontal line. After being created, the graph smoothly transitions into a circular layout, repositioning the nodes evenly around a circle while maintaining their connections."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ChangeGraphLayout(Scene):\n    def construct(self):\n        G = Graph([1, 2, 3, 4, 5], [(1, 2), (2, 3), (3, 4), (4, 5)],\n                  layout={1: [-2, 0, 0], 2: [-1, 0, 0], 3: [0, 0, 0],\n                          4: [1, 0, 0], 5: [2, 0, 0]}\n                  )\n        self.play(Create(G))\n        self.play(G.animate.change_layout(\"circular\"))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a graph with five connected nodes initially arranged in a straight horizontal line. After being created, the graph smoothly transitions into a circular layout, repositioning the nodes evenly around a circle while maintaining their connections."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ChangeGraphLayout(Scene):\n    def construct(self):\n        G = Graph([1, 2, 3, 4, 5], [(1, 2), (2, 3), (3, 4), (4, 5)],\n                  layout={1: [-2, 0, 0], 2: [-1, 0, 0], 3: [0, 0, 0],\n                          4: [1, 0, 0], 5: [2, 0, 0]}\n                  )\n        self.play(Create(G))\n        self.play(G.animate.change_layout(\"circular\"))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a series of thick green V-shaped lines, each demonstrating a different line joint style (such as miter, bevel, or round) at the corner where the two segments meet. The lines are arranged horizontally with equal spacing, and each one is labeled below with the name of its corresponding joint type, allowing for easy visual comparison of the joint styles."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LineJointVariants(Scene):\n    def construct(self):\n        mob = VMobject(stroke_width=20, color=GREEN).set_points_as_corners([\n            np.array([-2, 0, 0]),\n            np.array([0, 0, 0]),\n            np.array([-2, 1, 0]),\n        ])\n        lines = VGroup(*[mob.copy() for _ in range(len(LineJointType))])\n        for line, joint_type in zip(lines, LineJointType):\n            line.joint_type = joint_type\n\n        lines.arrange(RIGHT, buff=1)\n        self.add(lines)\n        for line in lines:\n            label = Text(line.joint_type.name).next_to(line, DOWN)\n            self.add(label)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a series of thick green V-shaped lines, each demonstrating a different line joint style (such as miter, bevel, or round) at the corner where the two segments meet. The lines are arranged horizontally with equal spacing, and each one is labeled below with the name of its corresponding joint type, allowing for easy visual comparison of the joint styles."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LineJointVariants(Scene):\n    def construct(self):\n        mob = VMobject(stroke_width=20, color=GREEN).set_points_as_corners([\n            np.array([-2, 0, 0]),\n            np.array([0, 0, 0]),\n            np.array([-2, 1, 0]),\n        ])\n        lines = VGroup(*[mob.copy() for _ in range(len(LineJointType))])\n        for line, joint_type in zip(lines, LineJointType):\n            line.joint_type = joint_type\n\n        lines.arrange(RIGHT, buff=1)\n        self.add(lines)\n        for line in lines:\n            label = Text(line.joint_type.name).next_to(line, DOWN)\n            self.add(label)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a series of thick green V-shaped lines, each demonstrating a different line joint style (such as miter, bevel, or round) at the corner where the two segments meet. The lines are arranged horizontally with equal spacing, and each one is labeled below with the name of its corresponding joint type, allowing for easy visual comparison of the joint styles."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LineJointVariants(Scene):\n    def construct(self):\n        mob = VMobject(stroke_width=20, color=GREEN).set_points_as_corners([\n            np.array([-2, 0, 0]),\n            np.array([0, 0, 0]),\n            np.array([-2, 1, 0]),\n        ])\n        lines = VGroup(*[mob.copy() for _ in range(len(LineJointType))])\n        for line, joint_type in zip(lines, LineJointType):\n            line.joint_type = joint_type\n\n        lines.arrange(RIGHT, buff=1)\n        self.add(lines)\n        for line in lines:\n            label = Text(line.joint_type.name).next_to(line, DOWN)\n            self.add(label)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a diagonal arrow pointing from the bottom left to the upper right of the screen, labeled \u201c0.5\u201d at its midpoint."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LabeledArrowExample(Scene):\n    def construct(self):\n        l_arrow = LabeledArrow(\"0.5\", start=LEFT*3, end=RIGHT*3 + UP*2, label_position=0.5)\n\n        self.add(l_arrow)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a diagonal arrow pointing from the bottom left to the upper right of the screen, labeled \u201c0.5\u201d at its midpoint."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LabeledArrowExample(Scene):\n    def construct(self):\n        l_arrow = LabeledArrow(\"0.5\", start=LEFT*3, end=RIGHT*3 + UP*2, label_position=0.5)\n\n        self.add(l_arrow)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a polar coordinate grid, then plot an orange polar graph defined by the equation \\( r = 2\\sin(5\\theta) \\). The resulting curve forms a five-petaled rose pattern, symmetrically arranged around the origin."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PolarGraphExample(Scene):\n    def construct(self):\n        plane = PolarPlane()\n        r = lambda theta: 2 * np.sin(theta * 5)\n        graph = plane.plot_polar_graph(r, [0, 2 * PI], color=ORANGE)\n        self.add(plane, graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a polar coordinate grid, then plot an orange polar graph defined by the equation \\( r = 2\\sin(5\\theta) \\). The resulting curve forms a five-petaled rose pattern, symmetrically arranged around the origin."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PolarGraphExample(Scene):\n    def construct(self):\n        plane = PolarPlane()\n        r = lambda theta: 2 * np.sin(theta * 5)\n        graph = plane.plot_polar_graph(r, [0, 2 * PI], color=ORANGE)\n        self.add(plane, graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a polar coordinate grid, then plot an orange polar graph defined by the equation \\( r = 2\\sin(5\\theta) \\). The resulting curve forms a five-petaled rose pattern, symmetrically arranged around the origin."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PolarGraphExample(Scene):\n    def construct(self):\n        plane = PolarPlane()\n        r = lambda theta: 2 * np.sin(theta * 5)\n        graph = plane.plot_polar_graph(r, [0, 2 * PI], color=ORANGE)\n        self.add(plane, graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a dot on the far left side of the screen. It begins moving steadily to the right. After a brief pause, a speed modifier is applied that gradually slows the dot to a complete stop, effectively freezing its motion as the animation progresses."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpeedModifierUpdaterExample2(Scene):\n    def construct(self):\n        a = Dot().shift(LEFT * 4)\n        self.add(a)\n\n        ChangeSpeed.add_updater(a, lambda x, dt: x.shift(RIGHT * 4 * dt))\n        self.wait()\n        self.play(\n            ChangeSpeed(\n                Wait(),\n                speedinfo={1: 0},\n                affects_speed_updaters=True,\n            )\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a dot on the far left side of the screen. It begins moving steadily to the right. After a brief pause, a speed modifier is applied that gradually slows the dot to a complete stop, effectively freezing its motion as the animation progresses."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpeedModifierUpdaterExample2(Scene):\n    def construct(self):\n        a = Dot().shift(LEFT * 4)\n        self.add(a)\n\n        ChangeSpeed.add_updater(a, lambda x, dt: x.shift(RIGHT * 4 * dt))\n        self.wait()\n        self.play(\n            ChangeSpeed(\n                Wait(),\n                speedinfo={1: 0},\n                affects_speed_updaters=True,\n            )\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a dot on the far left side of the screen. It begins moving steadily to the right. After a brief pause, a speed modifier is applied that gradually slows the dot to a complete stop, effectively freezing its motion as the animation progresses."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpeedModifierUpdaterExample2(Scene):\n    def construct(self):\n        a = Dot().shift(LEFT * 4)\n        self.add(a)\n\n        ChangeSpeed.add_updater(a, lambda x, dt: x.shift(RIGHT * 4 * dt))\n        self.wait()\n        self.play(\n            ChangeSpeed(\n                Wait(),\n                speedinfo={1: 0},\n                affects_speed_updaters=True,\n            )\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a circle on the screen. Then animate a red flash effect radiating outward from the circle with 30 lines, a slightly larger flash radius than the circle, and a quick burst animation that lasts 2 seconds using a fast-start easing function."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FlashOnCircle(Scene):\n    def construct(self):\n        radius = 2\n        circle = Circle(radius)\n        self.add(circle)\n        self.play(Flash(\n            circle, line_length=1,\n            num_lines=30, color=RED,\n            flash_radius=radius+SMALL_BUFF,\n            time_width=0.3, run_time=2,\n            rate_func = rush_from\n        ))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a circle on the screen. Then animate a red flash effect radiating outward from the circle with 30 lines, a slightly larger flash radius than the circle, and a quick burst animation that lasts 2 seconds using a fast-start easing function."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FlashOnCircle(Scene):\n    def construct(self):\n        radius = 2\n        circle = Circle(radius)\n        self.add(circle)\n        self.play(Flash(\n            circle, line_length=1,\n            num_lines=30, color=RED,\n            flash_radius=radius+SMALL_BUFF,\n            time_width=0.3, run_time=2,\n            rate_func = rush_from\n        ))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a circle on the screen. Then animate a red flash effect radiating outward from the circle with 30 lines, a slightly larger flash radius than the circle, and a quick burst animation that lasts 2 seconds using a fast-start easing function."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FlashOnCircle(Scene):\n    def construct(self):\n        radius = 2\n        circle = Circle(radius)\n        self.add(circle)\n        self.play(Flash(\n            circle, line_length=1,\n            num_lines=30, color=RED,\n            flash_radius=radius+SMALL_BUFF,\n            time_width=0.3, run_time=2,\n            rate_func = rush_from\n        ))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D scene with a coordinate axis system and a colorful surface representing the function \\( z = \\sin(x) \\cos(y) \\) over a square domain. The surface is fully opaque and shaded using a color gradient: red for lower values, yellow for mid-range, and green for higher values along the vertical (z) axis. The camera is angled from above and behind to highlight the surface's undulating shape."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FillByValueExample(ThreeDScene):\n    def construct(self):\n        resolution_fa = 8\n        self.set_camera_orientation(phi=75 * DEGREES, theta=-160 * DEGREES)\n        axes = ThreeDAxes(x_range=(0, 5, 1), y_range=(0, 5, 1), z_range=(-1, 1, 0.5))\n        def param_surface(u, v):\n            x = u\n            y = v\n            z = np.sin(x) * np.cos(y)\n            return z\n        surface_plane = Surface(\n            lambda u, v: axes.c2p(u, v, param_surface(u, v)),\n            resolution=(resolution_fa, resolution_fa),\n            v_range=[0, 5],\n            u_range=[0, 5],\n            )\n        surface_plane.set_style(fill_opacity=1)\n        surface_plane.set_fill_by_value(axes=axes, colorscale=[(RED, -0.5), (YELLOW, 0), (GREEN, 0.5)], axis=2)\n        self.add(axes, surface_plane)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D scene with a coordinate axis system and a colorful surface representing the function \\( z = \\sin(x) \\cos(y) \\) over a square domain. The surface is fully opaque and shaded using a color gradient: red for lower values, yellow for mid-range, and green for higher values along the vertical (z) axis. The camera is angled from above and behind to highlight the surface's undulating shape."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FillByValueExample(ThreeDScene):\n    def construct(self):\n        resolution_fa = 8\n        self.set_camera_orientation(phi=75 * DEGREES, theta=-160 * DEGREES)\n        axes = ThreeDAxes(x_range=(0, 5, 1), y_range=(0, 5, 1), z_range=(-1, 1, 0.5))\n        def param_surface(u, v):\n            x = u\n            y = v\n            z = np.sin(x) * np.cos(y)\n            return z\n        surface_plane = Surface(\n            lambda u, v: axes.c2p(u, v, param_surface(u, v)),\n            resolution=(resolution_fa, resolution_fa),\n            v_range=[0, 5],\n            u_range=[0, 5],\n            )\n        surface_plane.set_style(fill_opacity=1)\n        surface_plane.set_fill_by_value(axes=axes, colorscale=[(RED, -0.5), (YELLOW, 0), (GREEN, 0.5)], axis=2)\n        self.add(axes, surface_plane)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a coordinate axes system with a quadratic curve representing \\( y = 0.5x^2 - 0.5 \\). Three sets of Riemann rectangles are shown:\n\n1. **Right-endpoint rectangles** in a gradient from teal to dark blue, approximating the area under the curve from \\( x = -4 \\) to \\( x = -3 \\).\n2. **Left-endpoint rectangles** in yellow, spanning from \\( x = -1.5 \\) to \\( x = 1.5 \\), with inverted colors for areas below the x-axis.\n3. **Bounded rectangles** between the quadratic curve and a straight line \\( y = 1.5x \\), from \\( x = 4 \\) to \\( x = 5 \\), filled with a gradient from maroon to purple.\n\nAll elements are combined to illustrate different Riemann sum approximations and bounded area visualization."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetRiemannRectanglesExample(Scene):\n    def construct(self):\n        ax = Axes(y_range=[-2, 10])\n        quadratic = ax.plot(lambda x: 0.5 * x ** 2 - 0.5)\n\n        # the rectangles are constructed from their top right corner.\n        # passing an iterable to `color` produces a gradient\n        rects_right = ax.get_riemann_rectangles(\n            quadratic,\n            x_range=[-4, -3],\n            dx=0.25,\n            color=(TEAL, BLUE_B, DARK_BLUE),\n            input_sample_type=\"right\",\n        )\n\n        # the colour of rectangles below the x-axis is inverted\n        # due to show_signed_area\n        rects_left = ax.get_riemann_rectangles(\n            quadratic, x_range=[-1.5, 1.5], dx=0.15, color=YELLOW\n        )\n\n        bounding_line = ax.plot(\n            lambda x: 1.5 * x, color=BLUE_B, x_range=[3.3, 6]\n        )\n        bounded_rects = ax.get_riemann_rectangles(\n            bounding_line,\n            bounded_graph=quadratic,\n            dx=0.15,\n            x_range=[4, 5],\n            show_signed_area=False,\n            color=(MAROON_A, RED_B, PURPLE_D),\n        )\n\n        self.add(\n            ax, bounding_line, quadratic, rects_right, rects_left, bounded_rects\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a coordinate axes system with a quadratic curve representing \\( y = 0.5x^2 - 0.5 \\). Three sets of Riemann rectangles are shown:\n\n1. **Right-endpoint rectangles** in a gradient from teal to dark blue, approximating the area under the curve from \\( x = -4 \\) to \\( x = -3 \\).\n2. **Left-endpoint rectangles** in yellow, spanning from \\( x = -1.5 \\) to \\( x = 1.5 \\), with inverted colors for areas below the x-axis.\n3. **Bounded rectangles** between the quadratic curve and a straight line \\( y = 1.5x \\), from \\( x = 4 \\) to \\( x = 5 \\), filled with a gradient from maroon to purple.\n\nAll elements are combined to illustrate different Riemann sum approximations and bounded area visualization."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetRiemannRectanglesExample(Scene):\n    def construct(self):\n        ax = Axes(y_range=[-2, 10])\n        quadratic = ax.plot(lambda x: 0.5 * x ** 2 - 0.5)\n\n        # the rectangles are constructed from their top right corner.\n        # passing an iterable to `color` produces a gradient\n        rects_right = ax.get_riemann_rectangles(\n            quadratic,\n            x_range=[-4, -3],\n            dx=0.25,\n            color=(TEAL, BLUE_B, DARK_BLUE),\n            input_sample_type=\"right\",\n        )\n\n        # the colour of rectangles below the x-axis is inverted\n        # due to show_signed_area\n        rects_left = ax.get_riemann_rectangles(\n            quadratic, x_range=[-1.5, 1.5], dx=0.15, color=YELLOW\n        )\n\n        bounding_line = ax.plot(\n            lambda x: 1.5 * x, color=BLUE_B, x_range=[3.3, 6]\n        )\n        bounded_rects = ax.get_riemann_rectangles(\n            bounding_line,\n            bounded_graph=quadratic,\n            dx=0.15,\n            x_range=[4, 5],\n            show_signed_area=False,\n            color=(MAROON_A, RED_B, PURPLE_D),\n        )\n\n        self.add(\n            ax, bounding_line, quadratic, rects_right, rects_left, bounded_rects\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a coordinate axes system with a quadratic curve representing \\( y = 0.5x^2 - 0.5 \\). Three sets of Riemann rectangles are shown:\n\n1. **Right-endpoint rectangles** in a gradient from teal to dark blue, approximating the area under the curve from \\( x = -4 \\) to \\( x = -3 \\).\n2. **Left-endpoint rectangles** in yellow, spanning from \\( x = -1.5 \\) to \\( x = 1.5 \\), with inverted colors for areas below the x-axis.\n3. **Bounded rectangles** between the quadratic curve and a straight line \\( y = 1.5x \\), from \\( x = 4 \\) to \\( x = 5 \\), filled with a gradient from maroon to purple.\n\nAll elements are combined to illustrate different Riemann sum approximations and bounded area visualization."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetRiemannRectanglesExample(Scene):\n    def construct(self):\n        ax = Axes(y_range=[-2, 10])\n        quadratic = ax.plot(lambda x: 0.5 * x ** 2 - 0.5)\n\n        # the rectangles are constructed from their top right corner.\n        # passing an iterable to `color` produces a gradient\n        rects_right = ax.get_riemann_rectangles(\n            quadratic,\n            x_range=[-4, -3],\n            dx=0.25,\n            color=(TEAL, BLUE_B, DARK_BLUE),\n            input_sample_type=\"right\",\n        )\n\n        # the colour of rectangles below the x-axis is inverted\n        # due to show_signed_area\n        rects_left = ax.get_riemann_rectangles(\n            quadratic, x_range=[-1.5, 1.5], dx=0.15, color=YELLOW\n        )\n\n        bounding_line = ax.plot(\n            lambda x: 1.5 * x, color=BLUE_B, x_range=[3.3, 6]\n        )\n        bounded_rects = ax.get_riemann_rectangles(\n            bounding_line,\n            bounded_graph=quadratic,\n            dx=0.15,\n            x_range=[4, 5],\n            show_signed_area=False,\n            color=(MAROON_A, RED_B, PURPLE_D),\n        )\n\n        self.add(\n            ax, bounding_line, quadratic, rects_right, rects_left, bounded_rects\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three point cloud dots arranged horizontally. The first is red with default styling, the second is larger with a thicker outline, and the third has a lower point density, making it appear more sparse. All three are shown together as a grouped visual comparison."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PointCloudDotExample(Scene):\n    def construct(self):\n        cloud_1 = PointCloudDot(color=RED)\n        cloud_2 = PointCloudDot(stroke_width=4, radius=1)\n        cloud_3 = PointCloudDot(density=15)\n\n        group = Group(cloud_1, cloud_2, cloud_3).arrange()\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three point cloud dots arranged horizontally. The first is red with default styling, the second is larger with a thicker outline, and the third has a lower point density, making it appear more sparse. All three are shown together as a grouped visual comparison."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PointCloudDotExample(Scene):\n    def construct(self):\n        cloud_1 = PointCloudDot(color=RED)\n        cloud_2 = PointCloudDot(stroke_width=4, radius=1)\n        cloud_3 = PointCloudDot(density=15)\n\n        group = Group(cloud_1, cloud_2, cloud_3).arrange()\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a row of green quarter-circle arcs, each with a thick stroke and a different cap style (such as butt, round, or square). The arcs are evenly spaced horizontally, and each one is labeled below with the name of its corresponding cap style, helping to visually compare the stroke end variations."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CapStyleVariants(Scene):\n    def construct(self):\n        arcs = VGroup(*[\n            Arc(\n                radius=1,\n                start_angle=0,\n                angle=TAU / 4,\n                stroke_width=20,\n                color=GREEN,\n                cap_style=cap_style,\n            )\n            for cap_style in CapStyleType\n        ])\n        arcs.arrange(RIGHT, buff=1)\n        self.add(arcs)\n        for arc in arcs:\n            label = Text(arc.cap_style.name, font_size=24).next_to(arc, DOWN)\n            self.add(label)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a row of green quarter-circle arcs, each with a thick stroke and a different cap style (such as butt, round, or square). The arcs are evenly spaced horizontally, and each one is labeled below with the name of its corresponding cap style, helping to visually compare the stroke end variations."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CapStyleVariants(Scene):\n    def construct(self):\n        arcs = VGroup(*[\n            Arc(\n                radius=1,\n                start_angle=0,\n                angle=TAU / 4,\n                stroke_width=20,\n                color=GREEN,\n                cap_style=cap_style,\n            )\n            for cap_style in CapStyleType\n        ])\n        arcs.arrange(RIGHT, buff=1)\n        self.add(arcs)\n        for arc in arcs:\n            label = Text(arc.cap_style.name, font_size=24).next_to(arc, DOWN)\n            self.add(label)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a five-pointed star shape (pentagram) centered on the screen. Then, a red star with the same outer radius is drawn over it with a smooth animation. After being displayed briefly, the red star fades out gradually."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass StarExample(Scene):\n    def construct(self):\n        pentagram = RegularPolygram(5, radius=2)\n        star = Star(outer_radius=2, color=RED)\n\n        self.add(pentagram)\n        self.play(Create(star), run_time=3)\n        self.play(FadeOut(star), run_time=2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a five-pointed star shape (pentagram) centered on the screen. Then, a red star with the same outer radius is drawn over it with a smooth animation. After being displayed briefly, the red star fades out gradually."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass StarExample(Scene):\n    def construct(self):\n        pentagram = RegularPolygram(5, radius=2)\n        star = Star(outer_radius=2, color=RED)\n\n        self.add(pentagram)\n        self.play(Create(star), run_time=3)\n        self.play(FadeOut(star), run_time=2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a five-pointed star shape (pentagram) centered on the screen. Then, a red star with the same outer radius is drawn over it with a smooth animation. After being displayed briefly, the red star fades out gradually."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass StarExample(Scene):\n    def construct(self):\n        pentagram = RegularPolygram(5, radius=2)\n        star = Star(outer_radius=2, color=RED)\n\n        self.add(pentagram)\n        self.play(Create(star), run_time=3)\n        self.play(FadeOut(star), run_time=2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three shape pairs arranged horizontally:  \n- On the left, a triangle is tightly surrounded by a circle.  \n- In the center, a line is loosely enclosed by a larger circle with extra spacing.  \n- On the right, a square is enclosed by a smaller circle due to a reduced buffer, making the circle fit snugly inside the square."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CircleSurround(Scene):\n    def construct(self):\n        triangle1 = Triangle()\n        circle1 = Circle().surround(triangle1)\n        group1 = Group(triangle1,circle1) # treat the two mobjects as one\n\n        line2 = Line()\n        circle2 = Circle().surround(line2, buffer_factor=2.0)\n        group2 = Group(line2,circle2)\n\n        # buffer_factor < 1, so the circle is smaller than the square\n        square3 = Square()\n        circle3 = Circle().surround(square3, buffer_factor=0.5)\n        group3 = Group(square3, circle3)\n\n        group = Group(group1, group2, group3).arrange(buff=1)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three shape pairs arranged horizontally:  \n- On the left, a triangle is tightly surrounded by a circle.  \n- In the center, a line is loosely enclosed by a larger circle with extra spacing.  \n- On the right, a square is enclosed by a smaller circle due to a reduced buffer, making the circle fit snugly inside the square."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CircleSurround(Scene):\n    def construct(self):\n        triangle1 = Triangle()\n        circle1 = Circle().surround(triangle1)\n        group1 = Group(triangle1,circle1) # treat the two mobjects as one\n\n        line2 = Line()\n        circle2 = Circle().surround(line2, buffer_factor=2.0)\n        group2 = Group(line2,circle2)\n\n        # buffer_factor < 1, so the circle is smaller than the square\n        square3 = Square()\n        circle3 = Circle().surround(square3, buffer_factor=0.5)\n        group3 = Group(square3, circle3)\n\n        group = Group(group1, group2, group3).arrange(buff=1)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a large dark gray pentagon centered on screen. Then, repeatedly animate a blue copy of the pentagon flashing along its outline with varying trail lengths. Each flash is accompanied by a label showing the current `time_width` value (0.2, 0.5, 1, and 2), updating with each animation to indicate the duration of the trailing effect. `time_width` is the length of the sliver relative to the length of the stroke being drawn."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TimeWidthValues(Scene):\n    def construct(self):\n        p = RegularPolygon(5, color=DARK_GRAY, stroke_width=6).scale(3)\n        lbl = VMobject()\n        self.add(p, lbl)\n        p = p.copy().set_color(BLUE)\n        for time_width in [0.2, 0.5, 1, 2]:\n            lbl.become(Tex(r\"\\texttt{time\\_width={{%.1f}}}\"%time_width))\n            self.play(ShowPassingFlash(\n                p.copy().set_color(BLUE),\n                run_time=2,\n                time_width=time_width\n            ))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a large dark gray pentagon centered on screen. Then, repeatedly animate a blue copy of the pentagon flashing along its outline with varying trail lengths. Each flash is accompanied by a label showing the current `time_width` value (0.2, 0.5, 1, and 2), updating with each animation to indicate the duration of the trailing effect. `time_width` is the length of the sliver relative to the length of the stroke being drawn."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TimeWidthValues(Scene):\n    def construct(self):\n        p = RegularPolygon(5, color=DARK_GRAY, stroke_width=6).scale(3)\n        lbl = VMobject()\n        self.add(p, lbl)\n        p = p.copy().set_color(BLUE)\n        for time_width in [0.2, 0.5, 1, 2]:\n            lbl.become(Tex(r\"\\texttt{time\\_width={{%.1f}}}\"%time_width))\n            self.play(ShowPassingFlash(\n                p.copy().set_color(BLUE),\n                run_time=2,\n                time_width=time_width\n            ))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two intersecting lines forming an angle at their crossing point. A curved arc marks the angle between them, and a numerical label showing the angle\u2019s value in degrees is placed just above and to the right of the arc."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetValueExample(Scene):\n    def construct(self):\n        line1 = Line(LEFT+(1/3)*UP, RIGHT+(1/3)*DOWN)\n        line2 = Line(DOWN+(1/3)*RIGHT, UP+(1/3)*LEFT)\n\n        angle = Angle(line1, line2, radius=0.4)\n\n        value = DecimalNumber(angle.get_value(degrees=True), unit=r\"^{\\circ}\")\n        value.next_to(angle, UR)\n\n        self.add(line1, line2, angle, value)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two intersecting lines forming an angle at their crossing point. A curved arc marks the angle between them, and a numerical label showing the angle\u2019s value in degrees is placed just above and to the right of the arc."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetValueExample(Scene):\n    def construct(self):\n        line1 = Line(LEFT+(1/3)*UP, RIGHT+(1/3)*DOWN)\n        line2 = Line(DOWN+(1/3)*RIGHT, UP+(1/3)*LEFT)\n\n        angle = Angle(line1, line2, radius=0.4)\n\n        value = DecimalNumber(angle.get_value(degrees=True), unit=r\"^{\\circ}\")\n        value.next_to(angle, UR)\n\n        self.add(line1, line2, angle, value)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display two intersecting lines forming an angle at their crossing point. A curved arc marks the angle between them, and a numerical label showing the angle\u2019s value in degrees is placed just above and to the right of the arc."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetValueExample(Scene):\n    def construct(self):\n        line1 = Line(LEFT+(1/3)*UP, RIGHT+(1/3)*DOWN)\n        line2 = Line(DOWN+(1/3)*RIGHT, UP+(1/3)*LEFT)\n\n        angle = Angle(line1, line2, radius=0.4)\n\n        value = DecimalNumber(angle.get_value(degrees=True), unit=r\"^{\\circ}\")\n        value.next_to(angle, UR)\n\n        self.add(line1, line2, angle, value)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of coordinate axes with labeled ticks, then plot the curve \\( y = \\frac{\\sin(x)}{e^{2x}} \\). From \\( x = 0 \\) to \\( x = 4 \\), 30 evenly spaced vertical blue lines are drawn from the x-axis up to the curve, visually illustrating the shape and behavior of the function over that interval."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetVerticalLinesToGraph(Scene):\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 8.0, 1],\n            y_range=[-1, 1, 0.2],\n            axis_config={\"font_size\": 24},\n        ).add_coordinates()\n\n        curve = ax.plot(lambda x: np.sin(x) / np.e ** 2 * x)\n\n        lines = ax.get_vertical_lines_to_graph(\n            curve, x_range=[0, 4], num_lines=30, color=BLUE\n        )\n\n        self.add(ax, curve, lines)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of coordinate axes with labeled ticks, then plot the curve \\( y = \\frac{\\sin(x)}{e^{2x}} \\). From \\( x = 0 \\) to \\( x = 4 \\), 30 evenly spaced vertical blue lines are drawn from the x-axis up to the curve, visually illustrating the shape and behavior of the function over that interval."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetVerticalLinesToGraph(Scene):\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 8.0, 1],\n            y_range=[-1, 1, 0.2],\n            axis_config={\"font_size\": 24},\n        ).add_coordinates()\n\n        curve = ax.plot(lambda x: np.sin(x) / np.e ** 2 * x)\n\n        lines = ax.get_vertical_lines_to_graph(\n            curve, x_range=[0, 4], num_lines=30, color=BLUE\n        )\n\n        self.add(ax, curve, lines)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a standard cross shape centered on the screen, formed by two intersecting rectangles\u2014one vertical and one horizontal\u2014creating a simple \u201cX\u201d mark."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleCross(Scene):\n    def construct(self):\n        cross = Cross()\n        self.add(cross)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a standard cross shape centered on the screen, formed by two intersecting rectangles\u2014one vertical and one horizontal\u2014creating a simple \u201cX\u201d mark."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleCross(Scene):\n    def construct(self):\n        cross = Cross()\n        self.add(cross)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a standard cross shape centered on the screen, formed by two intersecting rectangles\u2014one vertical and one horizontal\u2014creating a simple \u201cX\u201d mark."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleCross(Scene):\n    def construct(self):\n        cross = Cross()\n        self.add(cross)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display eight versions of the same graph, each with eight nodes and a set of edges, arranged in three rows. Each graph uses a different automatic layout algorithm: spring, circular, kamada_kawai, planar, random, shell, spectral, and spiral. The graphs are scaled down and positioned side by side in rows to visually compare how each layout arranges the same graph structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GraphAutoPosition(Scene):\n    def construct(self):\n        vertices = [1, 2, 3, 4, 5, 6, 7, 8]\n        edges = [(1, 7), (1, 8), (2, 3), (2, 4), (2, 5),\n                 (2, 8), (3, 4), (6, 1), (6, 2),\n                 (6, 3), (7, 2), (7, 4)]\n        autolayouts = [\"spring\", \"circular\", \"kamada_kawai\",\n                       \"planar\", \"random\", \"shell\",\n                       \"spectral\", \"spiral\"]\n        graphs = [Graph(vertices, edges, layout=lt).scale(0.5)\n                  for lt in autolayouts]\n        r1 = VGroup(*graphs[:3]).arrange()\n        r2 = VGroup(*graphs[3:6]).arrange()\n        r3 = VGroup(*graphs[6:]).arrange()\n        self.add(VGroup(r1, r2, r3).arrange(direction=DOWN))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display eight versions of the same graph, each with eight nodes and a set of edges, arranged in three rows. Each graph uses a different automatic layout algorithm: spring, circular, kamada_kawai, planar, random, shell, spectral, and spiral. The graphs are scaled down and positioned side by side in rows to visually compare how each layout arranges the same graph structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GraphAutoPosition(Scene):\n    def construct(self):\n        vertices = [1, 2, 3, 4, 5, 6, 7, 8]\n        edges = [(1, 7), (1, 8), (2, 3), (2, 4), (2, 5),\n                 (2, 8), (3, 4), (6, 1), (6, 2),\n                 (6, 3), (7, 2), (7, 4)]\n        autolayouts = [\"spring\", \"circular\", \"kamada_kawai\",\n                       \"planar\", \"random\", \"shell\",\n                       \"spectral\", \"spiral\"]\n        graphs = [Graph(vertices, edges, layout=lt).scale(0.5)\n                  for lt in autolayouts]\n        r1 = VGroup(*graphs[:3]).arrange()\n        r2 = VGroup(*graphs[3:6]).arrange()\n        r3 = VGroup(*graphs[6:]).arrange()\n        self.add(VGroup(r1, r2, r3).arrange(direction=DOWN))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a dot positioned to the right of the origin and a number label that dynamically follows the dot\u2019s position. As the dot rotates in a full circle around the origin, the label continuously updates its value to reflect the dot\u2019s current x-coordinate and stays positioned next to the dot throughout the motion."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass NextToUpdater(Scene):\n    def construct(self):\n        def dot_position(mobject):\n            mobject.set_value(dot.get_center()[0])\n            mobject.next_to(dot)\n\n        dot = Dot(RIGHT*3)\n        label = DecimalNumber()\n        label.add_updater(dot_position)\n        self.add(dot, label)\n\n        self.play(Rotating(dot, about_point=ORIGIN, angle=TAU, run_time=TAU, rate_func=linear))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a dot positioned to the right of the origin and a number label that dynamically follows the dot\u2019s position. As the dot rotates in a full circle around the origin, the label continuously updates its value to reflect the dot\u2019s current x-coordinate and stays positioned next to the dot throughout the motion."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass NextToUpdater(Scene):\n    def construct(self):\n        def dot_position(mobject):\n            mobject.set_value(dot.get_center()[0])\n            mobject.next_to(dot)\n\n        dot = Dot(RIGHT*3)\n        label = DecimalNumber()\n        label.add_updater(dot_position)\n        self.add(dot, label)\n\n        self.play(Rotating(dot, about_point=ORIGIN, angle=TAU, run_time=TAU, rate_func=linear))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of coordinate axes with a blue curve representing the implicit equation \\( y(x - y)^2 - 4x - 8 = 0 \\). The curve is plotted based on the relationship between \\( x \\) and \\( y \\) without explicitly solving for one variable in terms of the other, illustrating the shape defined by the implicit function."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ImplicitExample(Scene):\n    def construct(self):\n        ax = Axes()\n        a = ax.plot_implicit_curve(\n            lambda x, y: y * (x - y) ** 2 - 4 * x - 8, color=BLUE\n        )\n        self.add(ax, a)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of coordinate axes with a blue curve representing the implicit equation \\( y(x - y)^2 - 4x - 8 = 0 \\). The curve is plotted based on the relationship between \\( x \\) and \\( y \\) without explicitly solving for one variable in terms of the other, illustrating the shape defined by the implicit function."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ImplicitExample(Scene):\n    def construct(self):\n        ax = Axes()\n        a = ax.plot_implicit_curve(\n            lambda x, y: y * (x - y) ** 2 - 4 * x - 8, color=BLUE\n        )\n        self.add(ax, a)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a set of coordinate axes with a blue curve representing the implicit equation \\( y(x - y)^2 - 4x - 8 = 0 \\). The curve is plotted based on the relationship between \\( x \\) and \\( y \\) without explicitly solving for one variable in terms of the other, illustrating the shape defined by the implicit function."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ImplicitExample(Scene):\n    def construct(self):\n        ax = Axes()\n        a = ax.plot_implicit_curve(\n            lambda x, y: y * (x - y) ** 2 - 4 * x - 8, color=BLUE\n        )\n        self.add(ax, a)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two lines of text arranged vertically:\n\n1. The first line shows the word \"floating\" where \"float\" begins with the \"fl\" ligature (a combined character), and \"oat\" is styled with a red-to-green gradient.\n2. The second line displays the same word \"floating\", but with ligatures disabled\u2014so \"f\" and \"l\" appear as separate characters. The \"oat\" portion still has the red-to-green gradient.\n\nThis comparison highlights the visual difference between using and disabling ligatures in styled text."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass NoLigaturesExample(Scene):\n    def construct(self):\n        text1 = MarkupText('fl<gradient from=\"RED\" to=\"GREEN\">oat</gradient>ing')\n        text2 = MarkupText('fl<gradient from=\"RED\" to=\"GREEN\">oat</gradient>ing', disable_ligatures=True)\n        group = VGroup(text1, text2).arrange(DOWN)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two lines of text arranged vertically:\n\n1. The first line shows the word \"floating\" where \"float\" begins with the \"fl\" ligature (a combined character), and \"oat\" is styled with a red-to-green gradient.\n2. The second line displays the same word \"floating\", but with ligatures disabled\u2014so \"f\" and \"l\" appear as separate characters. The \"oat\" portion still has the red-to-green gradient.\n\nThis comparison highlights the visual difference between using and disabling ligatures in styled text."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass NoLigaturesExample(Scene):\n    def construct(self):\n        text1 = MarkupText('fl<gradient from=\"RED\" to=\"GREEN\">oat</gradient>ing')\n        text2 = MarkupText('fl<gradient from=\"RED\" to=\"GREEN\">oat</gradient>ing', disable_ligatures=True)\n        group = VGroup(text1, text2).arrange(DOWN)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display two lines of text arranged vertically:\n\n1. The first line shows the word \"floating\" where \"float\" begins with the \"fl\" ligature (a combined character), and \"oat\" is styled with a red-to-green gradient.\n2. The second line displays the same word \"floating\", but with ligatures disabled\u2014so \"f\" and \"l\" appear as separate characters. The \"oat\" portion still has the red-to-green gradient.\n\nThis comparison highlights the visual difference between using and disabling ligatures in styled text."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass NoLigaturesExample(Scene):\n    def construct(self):\n        text1 = MarkupText('fl<gradient from=\"RED\" to=\"GREEN\">oat</gradient>ing')\n        text2 = MarkupText('fl<gradient from=\"RED\" to=\"GREEN\">oat</gradient>ing', disable_ligatures=True)\n        group = VGroup(text1, text2).arrange(DOWN)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a group of four dots, with the third dot colored red, arranged horizontally and scaled up. Show a yellow dot at the coordinates (4, 3). Move the group of dots so that the red dot aligns with the yellow dot."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingGroupToDestination(Scene):\n    def construct(self):\n        group = VGroup(Dot(LEFT), Dot(ORIGIN), Dot(RIGHT, color=RED), Dot(2 * RIGHT)).scale(1.4)\n        dest = Dot([4, 3, 0], color=YELLOW)\n        self.add(group, dest)\n        self.play(group.animate.shift(dest.get_center() - group[2].get_center()))\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a group of four dots, with the third dot colored red, arranged horizontally and scaled up. Show a yellow dot at the coordinates (4, 3). Move the group of dots so that the red dot aligns with the yellow dot."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingGroupToDestination(Scene):\n    def construct(self):\n        group = VGroup(Dot(LEFT), Dot(ORIGIN), Dot(RIGHT, color=RED), Dot(2 * RIGHT)).scale(1.4)\n        dest = Dot([4, 3, 0], color=YELLOW)\n        self.add(group, dest)\n        self.play(group.animate.shift(dest.get_center() - group[2].get_center()))\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a group of four dots, with the third dot colored red, arranged horizontally and scaled up. Show a yellow dot at the coordinates (4, 3). Move the group of dots so that the red dot aligns with the yellow dot."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingGroupToDestination(Scene):\n    def construct(self):\n        group = VGroup(Dot(LEFT), Dot(ORIGIN), Dot(RIGHT, color=RED), Dot(2 * RIGHT)).scale(1.4)\n        dest = Dot([4, 3, 0], color=YELLOW)\n        self.add(group, dest)\n        self.play(group.animate.shift(dest.get_center() - group[2].get_center()))\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a graph with six labeled nodes arranged using a planar layout, which positions the nodes to avoid edge crossings where possible. The nodes are connected in a loop with additional cross-links between non-adjacent nodes, forming a dense but neatly spaced structure that maintains visual clarity and planarity."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PlanarLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"planar\",\n            layout_scale=4,\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a graph with six labeled nodes arranged using a planar layout, which positions the nodes to avoid edge crossings where possible. The nodes are connected in a loop with additional cross-links between non-adjacent nodes, forming a dense but neatly spaced structure that maintains visual clarity and planarity."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PlanarLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"planar\",\n            layout_scale=4,\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a vector field where each arrow\u2019s direction is determined by a sine and cosine-based function. Initially, the arrows appear with their default magnitudes. Then, the entire vector field smoothly transforms as the function is scaled down by half, resulting in shorter arrows while maintaining their original directions."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ScaleVectorFieldFunction(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[1]) * RIGHT + np.cos(pos[0]) * UP\n        vector_field = ArrowVectorField(func)\n        self.add(vector_field)\n        self.wait()\n\n        func = VectorField.scale_func(func, 0.5)\n        self.play(vector_field.animate.become(ArrowVectorField(func)))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a vector field where each arrow\u2019s direction is determined by a sine and cosine-based function. Initially, the arrows appear with their default magnitudes. Then, the entire vector field smoothly transforms as the function is scaled down by half, resulting in shorter arrows while maintaining their original directions."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ScaleVectorFieldFunction(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[1]) * RIGHT + np.cos(pos[0]) * UP\n        vector_field = ArrowVectorField(func)\n        self.add(vector_field)\n        self.wait()\n\n        func = VectorField.scale_func(func, 0.5)\n        self.play(vector_field.animate.become(ArrowVectorField(func)))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a vector field where each arrow\u2019s direction is determined by a sine and cosine-based function. Initially, the arrows appear with their default magnitudes. Then, the entire vector field smoothly transforms as the function is scaled down by half, resulting in shorter arrows while maintaining their original directions."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ScaleVectorFieldFunction(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[1]) * RIGHT + np.cos(pos[0]) * UP\n        vector_field = ArrowVectorField(func)\n        self.add(vector_field)\n        self.wait()\n\n        func = VectorField.scale_func(func, 0.5)\n        self.play(vector_field.animate.become(ArrowVectorField(func)))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a diagonal line from the bottom-left to the top-right of the screen. Place three colored dots along the line: a red dot at one-quarter of the way, a blue dot at the midpoint, and a yellow dot at three-quarters of the way along the line."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PointFromProportion(Scene):\n    def construct(self):\n        line = Line(2*DL, 2*UR)\n        self.add(line)\n        colors = (RED, BLUE, YELLOW)\n        proportions = (1/4, 1/2, 3/4)\n        for color, proportion in zip(colors, proportions):\n            self.add(Dot(color=color).move_to(\n                    line.point_from_proportion(proportion)\n            ))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a diagonal line from the bottom-left to the top-right of the screen. Place three colored dots along the line: a red dot at one-quarter of the way, a blue dot at the midpoint, and a yellow dot at three-quarters of the way along the line."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PointFromProportion(Scene):\n    def construct(self):\n        line = Line(2*DL, 2*UR)\n        self.add(line)\n        colors = (RED, BLUE, YELLOW)\n        proportions = (1/4, 1/2, 3/4)\n        for color, proportion in zip(colors, proportions):\n            self.add(Dot(color=color).move_to(\n                    line.point_from_proportion(proportion)\n            ))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a diagonal line from the bottom-left to the top-right of the screen. Place three colored dots along the line: a red dot at one-quarter of the way, a blue dot at the midpoint, and a yellow dot at three-quarters of the way along the line."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PointFromProportion(Scene):\n    def construct(self):\n        line = Line(2*DL, 2*UR)\n        self.add(line)\n        colors = (RED, BLUE, YELLOW)\n        proportions = (1/4, 1/2, 3/4)\n        for color, proportion in zip(colors, proportions):\n            self.add(Dot(color=color).move_to(\n                    line.point_from_proportion(proportion)\n            ))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three elbow-shaped connectors arranged horizontally:\n\n1. The first is a standard elbow with default size and angle.\n2. The second is a wider elbow with increased width.\n3. The third is also wide but rotated to point diagonally downward to the left, showing a different angle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ElbowExample(Scene):\n    def construct(self):\n        elbow_1 = Elbow()\n        elbow_2 = Elbow(width=2.0)\n        elbow_3 = Elbow(width=2.0, angle=5*PI/4)\n\n        elbow_group = Group(elbow_1, elbow_2, elbow_3).arrange(buff=1)\n        self.add(elbow_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three elbow-shaped connectors arranged horizontally:\n\n1. The first is a standard elbow with default size and angle.\n2. The second is a wider elbow with increased width.\n3. The third is also wide but rotated to point diagonally downward to the left, showing a different angle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ElbowExample(Scene):\n    def construct(self):\n        elbow_1 = Elbow()\n        elbow_2 = Elbow(width=2.0)\n        elbow_3 = Elbow(width=2.0, angle=5*PI/4)\n\n        elbow_group = Group(elbow_1, elbow_2, elbow_3).arrange(buff=1)\n        self.add(elbow_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display three elbow-shaped connectors arranged horizontally:\n\n1. The first is a standard elbow with default size and angle.\n2. The second is a wider elbow with increased width.\n3. The third is also wide but rotated to point diagonally downward to the left, showing a different angle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ElbowExample(Scene):\n    def construct(self):\n        elbow_1 = Elbow()\n        elbow_2 = Elbow(width=2.0)\n        elbow_3 = Elbow(width=2.0, angle=5*PI/4)\n\n        elbow_group = Group(elbow_1, elbow_2, elbow_3).arrange(buff=1)\n        self.add(elbow_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a green-outlined circle on the left and a semi-transparent pink triangle on the right, each with a faint white background rectangle behind them. The background rectangles are then animated: the one behind the circle rotates 45 degrees, and the one behind the triangle rotates 90 degrees, creating a dynamic visual effect."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleBackgroundRectangle(Scene):\n    def construct(self):\n        circle = Circle().shift(LEFT)\n        circle.set_stroke(color=GREEN, width=20)\n        triangle = Triangle().shift(2 * RIGHT)\n        triangle.set_fill(PINK, opacity=0.5)\n        backgroundRectangle1 = BackgroundRectangle(circle, color=WHITE, fill_opacity=0.15)\n        backgroundRectangle2 = BackgroundRectangle(triangle, color=WHITE, fill_opacity=0.15)\n        self.add(backgroundRectangle1)\n        self.add(backgroundRectangle2)\n        self.add(circle)\n        self.add(triangle)\n        self.play(Rotate(backgroundRectangle1, PI / 4))\n        self.play(Rotate(backgroundRectangle2, PI / 2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a green-outlined circle on the left and a semi-transparent pink triangle on the right, each with a faint white background rectangle behind them. The background rectangles are then animated: the one behind the circle rotates 45 degrees, and the one behind the triangle rotates 90 degrees, creating a dynamic visual effect."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleBackgroundRectangle(Scene):\n    def construct(self):\n        circle = Circle().shift(LEFT)\n        circle.set_stroke(color=GREEN, width=20)\n        triangle = Triangle().shift(2 * RIGHT)\n        triangle.set_fill(PINK, opacity=0.5)\n        backgroundRectangle1 = BackgroundRectangle(circle, color=WHITE, fill_opacity=0.15)\n        backgroundRectangle2 = BackgroundRectangle(triangle, color=WHITE, fill_opacity=0.15)\n        self.add(backgroundRectangle1)\n        self.add(backgroundRectangle2)\n        self.add(circle)\n        self.add(triangle)\n        self.play(Rotate(backgroundRectangle1, PI / 4))\n        self.play(Rotate(backgroundRectangle2, PI / 2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a green-outlined circle on the left and a semi-transparent pink triangle on the right, each with a faint white background rectangle behind them. The background rectangles are then animated: the one behind the circle rotates 45 degrees, and the one behind the triangle rotates 90 degrees, creating a dynamic visual effect."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleBackgroundRectangle(Scene):\n    def construct(self):\n        circle = Circle().shift(LEFT)\n        circle.set_stroke(color=GREEN, width=20)\n        triangle = Triangle().shift(2 * RIGHT)\n        triangle.set_fill(PINK, opacity=0.5)\n        backgroundRectangle1 = BackgroundRectangle(circle, color=WHITE, fill_opacity=0.15)\n        backgroundRectangle2 = BackgroundRectangle(triangle, color=WHITE, fill_opacity=0.15)\n        self.add(backgroundRectangle1)\n        self.add(backgroundRectangle2)\n        self.add(circle)\n        self.add(triangle)\n        self.play(Rotate(backgroundRectangle1, PI / 4))\n        self.play(Rotate(backgroundRectangle2, PI / 2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \u201cAlice and Bob\u201d in large font on the screen, then animate it being erased in the original writing order, as if unwriting it from start to end."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UnwriteReverseFalse(Scene):\n    def construct(self):\n        text = Tex(\"Alice and Bob\").scale(3)\n        self.add(text)\n        self.play(Unwrite(text, reverse=False))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \u201cAlice and Bob\u201d in large font on the screen, then animate it being erased in the original writing order, as if unwriting it from start to end."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UnwriteReverseFalse(Scene):\n    def construct(self):\n        text = Tex(\"Alice and Bob\").scale(3)\n        self.add(text)\n        self.play(Unwrite(text, reverse=False))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the text \u201cAlice and Bob\u201d in large font on the screen, then animate it being erased in the original writing order, as if unwriting it from start to end."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UnwriteReverseFalse(Scene):\n    def construct(self):\n        text = Tex(\"Alice and Bob\").scale(3)\n        self.add(text)\n        self.play(Unwrite(text, reverse=False))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of coordinate axes with a cosine curve plotted. A yellow square is positioned exactly at the point on the curve where \\( x = \\pi \\), visually marking that location on the graph."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass InputToGraphPointExample(Scene):\n    def construct(self):\n        ax = Axes()\n        curve = ax.plot(lambda x : np.cos(x))\n\n        # move a square to PI on the cosine curve.\n        position = ax.input_to_graph_point(x=PI, graph=curve)\n        sq = Square(side_length=1, color=YELLOW).move_to(position)\n\n        self.add(ax, curve, sq)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of coordinate axes with a cosine curve plotted. A yellow square is positioned exactly at the point on the curve where \\( x = \\pi \\), visually marking that location on the graph."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass InputToGraphPointExample(Scene):\n    def construct(self):\n        ax = Axes()\n        curve = ax.plot(lambda x : np.cos(x))\n\n        # move a square to PI on the cosine curve.\n        position = ax.input_to_graph_point(x=PI, graph=curve)\n        sq = Square(side_length=1, color=YELLOW).move_to(position)\n\n        self.add(ax, curve, sq)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a set of coordinate axes with a cosine curve plotted. A yellow square is positioned exactly at the point on the curve where \\( x = \\pi \\), visually marking that location on the graph."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass InputToGraphPointExample(Scene):\n    def construct(self):\n        ax = Axes()\n        curve = ax.plot(lambda x : np.cos(x))\n\n        # move a square to PI on the cosine curve.\n        position = ax.input_to_graph_point(x=PI, graph=curve)\n        sq = Square(side_length=1, color=YELLOW).move_to(position)\n\n        self.add(ax, curve, sq)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a thick yellow horizontal line across the screen with rounded ends, demonstrating the use of a round cap style for line terminations."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CapStyleExample(Scene):\n    def construct(self):\n        line = Line(LEFT, RIGHT, color=YELLOW, stroke_width=20)\n        line.set_cap_style(CapStyleType.ROUND)\n        self.add(line)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a thick yellow horizontal line across the screen with rounded ends, demonstrating the use of a round cap style for line terminations."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CapStyleExample(Scene):\n    def construct(self):\n        line = Line(LEFT, RIGHT, color=YELLOW, stroke_width=20)\n        line.set_cap_style(CapStyleType.ROUND)\n        self.add(line)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a thick yellow horizontal line across the screen with rounded ends, demonstrating the use of a round cap style for line terminations."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CapStyleExample(Scene):\n    def construct(self):\n        line = Line(LEFT, RIGHT, color=YELLOW, stroke_width=20)\n        line.set_cap_style(CapStyleType.ROUND)\n        self.add(line)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 table with row and column labels. The bottom-right cell is outlined in red to highlight it, while the rest of the table appears normally."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetCellExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        cell = table.get_cell((2,2), color=RED)\n        self.add(table, cell)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 table with row and column labels. The bottom-right cell is outlined in red to highlight it, while the rest of the table appears normally."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetCellExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        cell = table.get_cell((2,2), color=RED)\n        self.add(table, cell)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display 3D axes and a circle. Set the camera orientation to a specific angle. Begin rotating the camera around 3D space of the scene at a fast rate to create an illusion effect of the 3D space. Stop the camera rotation after a quarter turn. "}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ThreeDCameraIllusionRotation(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        circle=Circle()\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(circle,axes)\n        self.begin_3dillusion_camera_rotation(rate=2)\n        self.wait(PI/2)\n        self.stop_3dillusion_camera_rotation()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display 3D axes and a circle. Set the camera orientation to a specific angle. Begin rotating the camera around 3D space of the scene at a fast rate to create an illusion effect of the 3D space. Stop the camera rotation after a quarter turn. "}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ThreeDCameraIllusionRotation(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        circle=Circle()\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(circle,axes)\n        self.begin_3dillusion_camera_rotation(rate=2)\n        self.wait(PI/2)\n        self.stop_3dillusion_camera_rotation()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display 3D axes and a circle. Set the camera orientation to a specific angle. Begin rotating the camera around 3D space of the scene at a fast rate to create an illusion effect of the 3D space. Stop the camera rotation after a quarter turn. "}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ThreeDCameraIllusionRotation(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        circle=Circle()\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(circle,axes)\n        self.begin_3dillusion_camera_rotation(rate=2)\n        self.wait(PI/2)\n        self.stop_3dillusion_camera_rotation()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the word \u201cDeleting\u201d in purple text on the left side of the screen, with a grey cursor positioned at the start. Animate the text being erased character by character with the cursor moving along, then make the cursor blink twice."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DeletingTextExample(Scene):\n    def construct(self):\n        text = Text(\"Deleting\", color=PURPLE).scale(1.5).to_edge(LEFT)\n        cursor = Rectangle(\n            color = GREY_A,\n            fill_color = GREY_A,\n            fill_opacity = 1.0,\n            height = 1.1,\n            width = 0.5,\n        ).move_to(text[0]) # Position the cursor\n\n        self.play(UntypeWithCursor(text, cursor))\n        self.play(Blink(cursor, blinks=2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the word \u201cDeleting\u201d in purple text on the left side of the screen, with a grey cursor positioned at the start. Animate the text being erased character by character with the cursor moving along, then make the cursor blink twice."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DeletingTextExample(Scene):\n    def construct(self):\n        text = Text(\"Deleting\", color=PURPLE).scale(1.5).to_edge(LEFT)\n        cursor = Rectangle(\n            color = GREY_A,\n            fill_color = GREY_A,\n            fill_opacity = 1.0,\n            height = 1.1,\n            width = 0.5,\n        ).move_to(text[0]) # Position the cursor\n\n        self.play(UntypeWithCursor(text, cursor))\n        self.play(Blink(cursor, blinks=2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a large label at the center of the screen containing the text \u201cLabel Text\u201d in a sans-serif font. The text is enclosed in a semi-transparent blue box."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LabelExample(Scene):\n    def construct(self):\n        label = Label(\n            label=Text('Label Text', font='sans-serif'),\n            box_config = {\n                \"color\" : BLUE,\n                \"fill_opacity\" : 0.75\n            }\n        )\n        label.scale(3)\n        self.add(label)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a large label at the center of the screen containing the text \u201cLabel Text\u201d in a sans-serif font. The text is enclosed in a semi-transparent blue box."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LabelExample(Scene):\n    def construct(self):\n        label = Label(\n            label=Text('Label Text', font='sans-serif'),\n            box_config = {\n                \"color\" : BLUE,\n                \"fill_opacity\" : 0.75\n            }\n        )\n        label.scale(3)\n        self.add(label)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a dot at the origin. Draw a line from (3, 0) to (5, 0). Show a blue circle growing from its center. Transform the dot to a new position to the right. Move the dot along the path of the circle. Rotate the dot around the point (2, 0)."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PointMovingOnShapes(Scene):\n    def construct(self):\n        circle = Circle(radius=1, color=BLUE)\n        dot = Dot()\n        dot2 = dot.copy().shift(RIGHT)\n        self.add(dot)\n\n        line = Line([3, 0, 0], [5, 0, 0])\n        self.add(line)\n\n        self.play(GrowFromCenter(circle))\n        self.play(Transform(dot, dot2))\n        self.play(MoveAlongPath(dot, circle), run_time=2, rate_func=linear)\n        self.play(Rotating(dot, about_point=[2, 0, 0]), run_time=1.5)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a dot at the origin. Draw a line from (3, 0) to (5, 0). Show a blue circle growing from its center. Transform the dot to a new position to the right. Move the dot along the path of the circle. Rotate the dot around the point (2, 0)."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PointMovingOnShapes(Scene):\n    def construct(self):\n        circle = Circle(radius=1, color=BLUE)\n        dot = Dot()\n        dot2 = dot.copy().shift(RIGHT)\n        self.add(dot)\n\n        line = Line([3, 0, 0], [5, 0, 0])\n        self.add(line)\n\n        self.play(GrowFromCenter(circle))\n        self.play(Transform(dot, dot2))\n        self.play(MoveAlongPath(dot, circle), run_time=2, rate_func=linear)\n        self.play(Rotating(dot, about_point=[2, 0, 0]), run_time=1.5)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a dot at the origin. Draw a line from (3, 0) to (5, 0). Show a blue circle growing from its center. Transform the dot to a new position to the right. Move the dot along the path of the circle. Rotate the dot around the point (2, 0)."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PointMovingOnShapes(Scene):\n    def construct(self):\n        circle = Circle(radius=1, color=BLUE)\n        dot = Dot()\n        dot2 = dot.copy().shift(RIGHT)\n        self.add(dot)\n\n        line = Line([3, 0, 0], [5, 0, 0])\n        self.add(line)\n\n        self.play(GrowFromCenter(circle))\n        self.play(Transform(dot, dot2))\n        self.play(MoveAlongPath(dot, circle), run_time=2, rate_func=linear)\n        self.play(Rotating(dot, about_point=[2, 0, 0]), run_time=1.5)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of coordinate axes with labeled ticks, then plot the curve \\( y = 2\\sin(x) \\) in dark blue. Highlight the area under the curve between \\( x = \\frac{\\pi}{2} \\) and \\( x = \\frac{3\\pi}{2} \\) using a solid green fill to visually represent the integral over that interval."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetAreaExample(Scene):\n    def construct(self):\n        ax = Axes().add_coordinates()\n        curve = ax.plot(lambda x: 2 * np.sin(x), color=DARK_BLUE)\n        area = ax.get_area(\n            curve,\n            x_range=(PI / 2, 3 * PI / 2),\n            color=(GREEN_B, GREEN_D),\n            opacity=1,\n        )\n\n        self.add(ax, curve, area)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of coordinate axes with labeled ticks, then plot the curve \\( y = 2\\sin(x) \\) in dark blue. Highlight the area under the curve between \\( x = \\frac{\\pi}{2} \\) and \\( x = \\frac{3\\pi}{2} \\) using a solid green fill to visually represent the integral over that interval."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetAreaExample(Scene):\n    def construct(self):\n        ax = Axes().add_coordinates()\n        curve = ax.plot(lambda x: 2 * np.sin(x), color=DARK_BLUE)\n        area = ax.get_area(\n            curve,\n            x_range=(PI / 2, 3 * PI / 2),\n            color=(GREEN_B, GREEN_D),\n            opacity=1,\n        )\n\n        self.add(ax, curve, area)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display six colored circles arranged vertically on the left side of the screen, each labeled with a different angle: -90\u00b0, 0\u00b0, 30\u00b0, 90\u00b0, 180\u00b0, and 270\u00b0. Each circle animates by transforming into a matching circle on the right side of the screen, following a curved path determined by the specified angle:\n\n- Negative angles move clockwise,\n- Positive angles move counterclockwise,\n- 0\u00b0 moves in a straight line.\n\nEach transformation is accompanied by a yellow arc showing the path taken, visually demonstrating how different `path_arc` values affect the motion."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TransformPathArc(Scene):\n    def construct(self):\n        def make_arc_path(start, end, arc_angle):\n            points = []\n            p_fn = path_along_arc(arc_angle)\n            # alpha animates between 0.0 and 1.0, where 0.0\n            # is the beginning of the animation and 1.0 is the end.\n            for alpha in range(0, 11):\n                points.append(p_fn(start, end, alpha / 10.0))\n            path = VMobject(stroke_color=YELLOW)\n            path.set_points_smoothly(points)\n            return path\n\n        left = Circle(stroke_color=BLUE_E, fill_opacity=1.0, radius=0.5).move_to(LEFT * 2)\n        colors = [TEAL_A, TEAL_B, TEAL_C, TEAL_D, TEAL_E, GREEN_A]\n        # Positive angles move counter-clockwise, negative angles move clockwise.\n        examples = [-90, 0, 30, 90, 180, 270]\n        anims = []\n        for idx, angle in enumerate(examples):\n            left_c = left.copy().shift((3 - idx) * UP)\n            left_c.fill_color = colors[idx]\n            right_c = left_c.copy().shift(4 * RIGHT)\n            path_arc = make_arc_path(left_c.get_center(), right_c.get_center(),\n                                     arc_angle=angle * DEGREES)\n            desc = Text('%d\u00b0' % examples[idx]).next_to(left_c, LEFT)\n            # Make the circles in front of the text in front of the arcs.\n            self.add(\n                path_arc.set_z_index(1),\n                desc.set_z_index(2),\n                left_c.set_z_index(3),\n            )\n            anims.append(Transform(left_c, right_c, path_arc=angle * DEGREES))\n\n        self.play(*anims, run_time=2)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display six colored circles arranged vertically on the left side of the screen, each labeled with a different angle: -90\u00b0, 0\u00b0, 30\u00b0, 90\u00b0, 180\u00b0, and 270\u00b0. Each circle animates by transforming into a matching circle on the right side of the screen, following a curved path determined by the specified angle:\n\n- Negative angles move clockwise,\n- Positive angles move counterclockwise,\n- 0\u00b0 moves in a straight line.\n\nEach transformation is accompanied by a yellow arc showing the path taken, visually demonstrating how different `path_arc` values affect the motion."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TransformPathArc(Scene):\n    def construct(self):\n        def make_arc_path(start, end, arc_angle):\n            points = []\n            p_fn = path_along_arc(arc_angle)\n            # alpha animates between 0.0 and 1.0, where 0.0\n            # is the beginning of the animation and 1.0 is the end.\n            for alpha in range(0, 11):\n                points.append(p_fn(start, end, alpha / 10.0))\n            path = VMobject(stroke_color=YELLOW)\n            path.set_points_smoothly(points)\n            return path\n\n        left = Circle(stroke_color=BLUE_E, fill_opacity=1.0, radius=0.5).move_to(LEFT * 2)\n        colors = [TEAL_A, TEAL_B, TEAL_C, TEAL_D, TEAL_E, GREEN_A]\n        # Positive angles move counter-clockwise, negative angles move clockwise.\n        examples = [-90, 0, 30, 90, 180, 270]\n        anims = []\n        for idx, angle in enumerate(examples):\n            left_c = left.copy().shift((3 - idx) * UP)\n            left_c.fill_color = colors[idx]\n            right_c = left_c.copy().shift(4 * RIGHT)\n            path_arc = make_arc_path(left_c.get_center(), right_c.get_center(),\n                                     arc_angle=angle * DEGREES)\n            desc = Text('%d\u00b0' % examples[idx]).next_to(left_c, LEFT)\n            # Make the circles in front of the text in front of the arcs.\n            self.add(\n                path_arc.set_z_index(1),\n                desc.set_z_index(2),\n                left_c.set_z_index(3),\n            )\n            anims.append(Transform(left_c, right_c, path_arc=angle * DEGREES))\n\n        self.play(*anims, run_time=2)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display four groups of arrows arranged across the screen, each demonstrating different arrow properties:\n\n1. **Left Group (far left):** A vertical stack of arrows pointing right, each shorter than the last, showing how increasing the `buff` value reduces arrow length.\n2. **Middle Group (center):** A vertical stack of arrows with increasing stroke width, illustrating how a higher `max_stroke_width_to_length_ratio` thickens the arrow shaft.\n3. **Upper Right Group:** A vertical stack of arrows with increasingly longer arrow tips, demonstrating the effect of increasing `max_tip_length_to_length_ratio`.\n4. **Lower Right Group:** A vertical stack of arrows with different tip shapes and colors\u2014square, filled square, circle, and filled circle\u2014showing the variety of arrowhead styles."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArrowExample(Scene):\n    def construct(self):\n        left_group = VGroup()\n        # As buff increases, the size of the arrow decreases.\n        for buff in np.arange(0, 2.2, 0.45):\n            left_group += Arrow(buff=buff, start=2 * LEFT, end=2 * RIGHT)\n        # Required to arrange arrows.\n        left_group.arrange(DOWN)\n        left_group.move_to(4 * LEFT)\n\n        middle_group = VGroup()\n        # As max_stroke_width_to_length_ratio gets bigger,\n        # the width of stroke increases.\n        for i in np.arange(0, 5, 0.5):\n            middle_group += Arrow(max_stroke_width_to_length_ratio=i)\n        middle_group.arrange(DOWN)\n\n        UR_group = VGroup()\n        # As max_tip_length_to_length_ratio increases,\n        # the length of the tip increases.\n        for i in np.arange(0, 0.3, 0.1):\n            UR_group += Arrow(max_tip_length_to_length_ratio=i)\n        UR_group.arrange(DOWN)\n        UR_group.move_to(4 * RIGHT + 2 * UP)\n\n        DR_group = VGroup()\n        DR_group += Arrow(start=LEFT, end=RIGHT, color=BLUE, tip_shape=ArrowSquareTip)\n        DR_group += Arrow(start=LEFT, end=RIGHT, color=BLUE, tip_shape=ArrowSquareFilledTip)\n        DR_group += Arrow(start=LEFT, end=RIGHT, color=YELLOW, tip_shape=ArrowCircleTip)\n        DR_group += Arrow(start=LEFT, end=RIGHT, color=YELLOW, tip_shape=ArrowCircleFilledTip)\n        DR_group.arrange(DOWN)\n        DR_group.move_to(4 * RIGHT + 2 * DOWN)\n\n        self.add(left_group, middle_group, UR_group, DR_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display four groups of arrows arranged across the screen, each demonstrating different arrow properties:\n\n1. **Left Group (far left):** A vertical stack of arrows pointing right, each shorter than the last, showing how increasing the `buff` value reduces arrow length.\n2. **Middle Group (center):** A vertical stack of arrows with increasing stroke width, illustrating how a higher `max_stroke_width_to_length_ratio` thickens the arrow shaft.\n3. **Upper Right Group:** A vertical stack of arrows with increasingly longer arrow tips, demonstrating the effect of increasing `max_tip_length_to_length_ratio`.\n4. **Lower Right Group:** A vertical stack of arrows with different tip shapes and colors\u2014square, filled square, circle, and filled circle\u2014showing the variety of arrowhead styles."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArrowExample(Scene):\n    def construct(self):\n        left_group = VGroup()\n        # As buff increases, the size of the arrow decreases.\n        for buff in np.arange(0, 2.2, 0.45):\n            left_group += Arrow(buff=buff, start=2 * LEFT, end=2 * RIGHT)\n        # Required to arrange arrows.\n        left_group.arrange(DOWN)\n        left_group.move_to(4 * LEFT)\n\n        middle_group = VGroup()\n        # As max_stroke_width_to_length_ratio gets bigger,\n        # the width of stroke increases.\n        for i in np.arange(0, 5, 0.5):\n            middle_group += Arrow(max_stroke_width_to_length_ratio=i)\n        middle_group.arrange(DOWN)\n\n        UR_group = VGroup()\n        # As max_tip_length_to_length_ratio increases,\n        # the length of the tip increases.\n        for i in np.arange(0, 0.3, 0.1):\n            UR_group += Arrow(max_tip_length_to_length_ratio=i)\n        UR_group.arrange(DOWN)\n        UR_group.move_to(4 * RIGHT + 2 * UP)\n\n        DR_group = VGroup()\n        DR_group += Arrow(start=LEFT, end=RIGHT, color=BLUE, tip_shape=ArrowSquareTip)\n        DR_group += Arrow(start=LEFT, end=RIGHT, color=BLUE, tip_shape=ArrowSquareFilledTip)\n        DR_group += Arrow(start=LEFT, end=RIGHT, color=YELLOW, tip_shape=ArrowCircleTip)\n        DR_group += Arrow(start=LEFT, end=RIGHT, color=YELLOW, tip_shape=ArrowCircleFilledTip)\n        DR_group.arrange(DOWN)\n        DR_group.move_to(4 * RIGHT + 2 * DOWN)\n\n        self.add(left_group, middle_group, UR_group, DR_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three styled shapes with specific layering: a pink-filled triangle with 50% transparency on the right, a fully yellow-filled square above the center, and a circle with a thick green outline on the left. The triangle appears on top, followed by the square, and the circle is at the bottom layer. Pause for one second."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectZOrder(Scene):\n    def construct(self):\n        circle = Circle().shift(LEFT)\n        square = Square().shift(UP)\n        triangle = Triangle().shift(RIGHT)\n\n        circle.set_stroke(color=GREEN, width=20)\n        square.set_fill(YELLOW, opacity=1.0)\n        triangle.set_fill(PINK, opacity=0.5)\n\n        self.add(triangle, square, circle)\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three styled shapes with specific layering: a pink-filled triangle with 50% transparency on the right, a fully yellow-filled square above the center, and a circle with a thick green outline on the left. The triangle appears on top, followed by the square, and the circle is at the bottom layer. Pause for one second."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectZOrder(Scene):\n    def construct(self):\n        circle = Circle().shift(LEFT)\n        square = Square().shift(UP)\n        triangle = Triangle().shift(RIGHT)\n\n        circle.set_stroke(color=GREEN, width=20)\n        square.set_fill(YELLOW, opacity=1.0)\n        triangle.set_fill(PINK, opacity=0.5)\n\n        self.add(triangle, square, circle)\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a blue dot and a green dot arranged horizontally with a white line connecting them. Move the blue dot to the right and the green dot upwards, updating the connecting line dynamically."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingDots(Scene):\n    def construct(self):\n        d1,d2=Dot(color=BLUE),Dot(color=GREEN)\n        dg=VGroup(d1,d2).arrange(RIGHT,buff=1)\n        l1=Line(d1.get_center(),d2.get_center()).set_color(RED)\n        x=ValueTracker(0)\n        y=ValueTracker(0)\n        d1.add_updater(lambda z: z.set_x(x.get_value()))\n        d2.add_updater(lambda z: z.set_y(y.get_value()))\n        l1.add_updater(lambda z: z.become(Line(d1.get_center(),d2.get_center())))\n        self.add(d1,d2,l1)\n        self.play(x.animate.set_value(5))\n        self.play(y.animate.set_value(4))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a blue dot and a green dot arranged horizontally with a white line connecting them. Move the blue dot to the right and the green dot upwards, updating the connecting line dynamically."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingDots(Scene):\n    def construct(self):\n        d1,d2=Dot(color=BLUE),Dot(color=GREEN)\n        dg=VGroup(d1,d2).arrange(RIGHT,buff=1)\n        l1=Line(d1.get_center(),d2.get_center()).set_color(RED)\n        x=ValueTracker(0)\n        y=ValueTracker(0)\n        d1.add_updater(lambda z: z.set_x(x.get_value()))\n        d2.add_updater(lambda z: z.set_y(y.get_value()))\n        l1.add_updater(lambda z: z.become(Line(d1.get_center(),d2.get_center())))\n        self.add(d1,d2,l1)\n        self.play(x.animate.set_value(5))\n        self.play(y.animate.set_value(4))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a square at the center of the screen. First, the square is drawn. Then, it shifts to the right, doubles in size, rotates 90 degrees counterclockwise, and finally disappears."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnimateExample(Scene):\n    def construct(self):\n        s = Square()\n        self.play(Create(s))\n        self.play(s.animate.shift(RIGHT))\n        self.play(s.animate.scale(2))\n        self.play(s.animate.rotate(PI / 2))\n        self.play(Uncreate(s))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a square at the center of the screen. First, the square is drawn. Then, it shifts to the right, doubles in size, rotates 90 degrees counterclockwise, and finally disappears."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnimateExample(Scene):\n    def construct(self):\n        s = Square()\n        self.play(Create(s))\n        self.play(s.animate.shift(RIGHT))\n        self.play(s.animate.scale(2))\n        self.play(s.animate.rotate(PI / 2))\n        self.play(Uncreate(s))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Set the background color to white. Display a red square on the left and a blue square on the right. Internally rotate the points of the blue square to alter its orientation. Then, animate the red square transforming into a red circle on the left, and simultaneously transform the rotated blue square into a blue circle on the right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleRotation(Scene):\n    def construct(self):\n        self.camera.background_color = WHITE\n        m1a = Square().set_color(RED).shift(LEFT)\n        m1b = Circle().set_color(RED).shift(LEFT)\n        m2a = Square().set_color(BLUE).shift(RIGHT)\n        m2b = Circle().set_color(BLUE).shift(RIGHT)\n\n        points = m2a.points\n        points = np.roll(points, int(len(points)/4), axis=0)\n        m2a.points = points\n\n        self.play(Transform(m1a,m1b),Transform(m2a,m2b), run_time=1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that set the background color to white. Display a red square on the left and a blue square on the right. Internally rotate the points of the blue square to alter its orientation. Then, animate the red square transforming into a red circle on the left, and simultaneously transform the rotated blue square into a blue circle on the right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleRotation(Scene):\n    def construct(self):\n        self.camera.background_color = WHITE\n        m1a = Square().set_color(RED).shift(LEFT)\n        m1b = Circle().set_color(RED).shift(LEFT)\n        m2a = Square().set_color(BLUE).shift(RIGHT)\n        m2b = Circle().set_color(BLUE).shift(RIGHT)\n\n        points = m2a.points\n        points = np.roll(points, int(len(points)/4), axis=0)\n        m2a.points = points\n\n        self.play(Transform(m1a,m1b),Transform(m2a,m2b), run_time=1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display four styled numbers positioned around the screen:\n\n1. An orange number \u201c2\u201d (rounded from 2.5) scaled up and placed slightly left and near the top.\n2. A large number \u201c3\u201d (from 3.14159) with ellipsis, scaled by its own value and placed in the upper right.\n3. A gradient-colored number \u201c42\u201d in blue and teal, scaled and placed in the lower right.\n4. A yellow number \u201c6\u201d (from 6.28), scaled and positioned in the lower left.\n\nEach number is rendered using the `Integer` class, which rounds the input to the nearest whole number."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass IntegerExample(Scene):\n    def construct(self):\n        self.add(Integer(number=2.5).set_color(ORANGE).scale(2.5).set_x(-0.5).set_y(0.8))\n        self.add(Integer(number=3.14159, show_ellipsis=True).set_x(3).set_y(3.3).scale(3.14159))\n        self.add(Integer(number=42).set_x(2.5).set_y(-2.3).set_color_by_gradient(BLUE, TEAL).scale(1.7))\n        self.add(Integer(number=6.28).set_x(-1.5).set_y(-2).set_color(YELLOW).scale(1.4))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display four styled numbers positioned around the screen:\n\n1. An orange number \u201c2\u201d (rounded from 2.5) scaled up and placed slightly left and near the top.\n2. A large number \u201c3\u201d (from 3.14159) with ellipsis, scaled by its own value and placed in the upper right.\n3. A gradient-colored number \u201c42\u201d in blue and teal, scaled and placed in the lower right.\n4. A yellow number \u201c6\u201d (from 6.28), scaled and positioned in the lower left.\n\nEach number is rendered using the `Integer` class, which rounds the input to the nearest whole number."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass IntegerExample(Scene):\n    def construct(self):\n        self.add(Integer(number=2.5).set_color(ORANGE).scale(2.5).set_x(-0.5).set_y(0.8))\n        self.add(Integer(number=3.14159, show_ellipsis=True).set_x(3).set_y(3.3).scale(3.14159))\n        self.add(Integer(number=42).set_x(2.5).set_y(-2.3).set_color_by_gradient(BLUE, TEAL).scale(1.7))\n        self.add(Integer(number=6.28).set_x(-1.5).set_y(-2).set_color(YELLOW).scale(1.4))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the Manim logo banner alongside a title that reads \u201cManim version *x.y.z*\u201d, where *x.y.z* is the current version of the Manim library being used. Both elements appear centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nimport manim\n\nclass TitleExample(Scene):\n    def construct(self):\n        banner = ManimBanner()\n        title = Title(f\"Manim version {manim.__version__}\")\n        self.add(banner, title)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the Manim logo banner alongside a title that reads \u201cManim version *x.y.z*\u201d, where *x.y.z* is the current version of the Manim library being used. Both elements appear centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nimport manim\n\nclass TitleExample(Scene):\n    def construct(self):\n        banner = ManimBanner()\n        title = Title(f\"Manim version {manim.__version__}\")\n        self.add(banner, title)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display six different matrix styles arranged in a grid:\n\n- The first is a 2\u00d72 matrix with elements including the symbol \\( \\pi \\), enclosed in square brackets.\n- The second is a 2\u00d73 matrix with custom spacing and curly braces as brackets. The second column is highlighted with a surrounding rectangle.\n- The third is a 2\u00d72 matrix with elements aligned to the upper-left corner, enclosed in parentheses.\n- The fourth is a 2\u00d72 matrix enclosed in angle brackets.\n- The fifth is a 2\u00d72 matrix with each column colored differently (red and green).\n- The sixth is a 2\u00d72 matrix with each row colored differently (red and green).\n\nAll matrices appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MatrixExamples(Scene):\n    def construct(self):\n        m0 = Matrix([[2, r\"\\pi\"], [-1, 1]])\n        m1 = Matrix([[2, 0, 4], [-1, 1, 5]],\n            v_buff=1.3,\n            h_buff=0.8,\n            bracket_h_buff=SMALL_BUFF,\n            bracket_v_buff=SMALL_BUFF,\n            left_bracket=r\"\\{\",\n            right_bracket=r\"\\}\")\n        m1.add(SurroundingRectangle(m1.get_columns()[1]))\n        m2 = Matrix([[2, 1], [-1, 3]],\n            element_alignment_corner=UL,\n            left_bracket=\"(\",\n            right_bracket=\")\")\n        m3 = Matrix([[2, 1], [-1, 3]],\n            left_bracket=r\"\\langle\",\n            right_bracket=r\"\\rangle\")\n        m4 = Matrix([[2, 1], [-1, 3]],\n        ).set_column_colors(RED, GREEN)\n        m5 = Matrix([[2, 1], [-1, 3]],\n        ).set_row_colors(RED, GREEN)\n        g = Group(\n            m0,m1,m2,m3,m4,m5\n        ).arrange_in_grid(buff=2)\n        self.add(g)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display six different matrix styles arranged in a grid:\n\n- The first is a 2\u00d72 matrix with elements including the symbol \\( \\pi \\), enclosed in square brackets.\n- The second is a 2\u00d73 matrix with custom spacing and curly braces as brackets. The second column is highlighted with a surrounding rectangle.\n- The third is a 2\u00d72 matrix with elements aligned to the upper-left corner, enclosed in parentheses.\n- The fourth is a 2\u00d72 matrix enclosed in angle brackets.\n- The fifth is a 2\u00d72 matrix with each column colored differently (red and green).\n- The sixth is a 2\u00d72 matrix with each row colored differently (red and green).\n\nAll matrices appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MatrixExamples(Scene):\n    def construct(self):\n        m0 = Matrix([[2, r\"\\pi\"], [-1, 1]])\n        m1 = Matrix([[2, 0, 4], [-1, 1, 5]],\n            v_buff=1.3,\n            h_buff=0.8,\n            bracket_h_buff=SMALL_BUFF,\n            bracket_v_buff=SMALL_BUFF,\n            left_bracket=r\"\\{\",\n            right_bracket=r\"\\}\")\n        m1.add(SurroundingRectangle(m1.get_columns()[1]))\n        m2 = Matrix([[2, 1], [-1, 3]],\n            element_alignment_corner=UL,\n            left_bracket=\"(\",\n            right_bracket=\")\")\n        m3 = Matrix([[2, 1], [-1, 3]],\n            left_bracket=r\"\\langle\",\n            right_bracket=r\"\\rangle\")\n        m4 = Matrix([[2, 1], [-1, 3]],\n        ).set_column_colors(RED, GREEN)\n        m5 = Matrix([[2, 1], [-1, 3]],\n        ).set_row_colors(RED, GREEN)\n        g = Group(\n            m0,m1,m2,m3,m4,m5\n        ).arrange_in_grid(buff=2)\n        self.add(g)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the Manim logo banner animation:  \n- First, the banner is drawn on screen.  \n- Then, it expands in size.  \n- After a brief pause, the banner is smoothly removed using an unwrite animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DarkThemeBanner(Scene):\n    def construct(self):\n        banner = ManimBanner()\n        self.play(banner.create())\n        self.play(banner.expand())\n        self.wait()\n        self.play(Unwrite(banner))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the Manim logo banner animation:  \n- First, the banner is drawn on screen.  \n- Then, it expands in size.  \n- After a brief pause, the banner is smoothly removed using an unwrite animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DarkThemeBanner(Scene):\n    def construct(self):\n        banner = ManimBanner()\n        self.play(banner.create())\n        self.play(banner.expand())\n        self.wait()\n        self.play(Unwrite(banner))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the Manim logo banner animation:  \n- First, the banner is drawn on screen.  \n- Then, it expands in size.  \n- After a brief pause, the banner is smoothly removed using an unwrite animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DarkThemeBanner(Scene):\n    def construct(self):\n        banner = ManimBanner()\n        self.play(banner.create())\n        self.play(banner.expand())\n        self.wait()\n        self.play(Unwrite(banner))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D square pyramid centered in the scene, constructed from five vertices: four forming a square base and one apex above the center. The pyramid consists of four triangular side faces and one square base. The camera is angled at 75\u00b0 vertically and 30\u00b0 horizontally, providing a clear, tilted view of the pyramid\u2019s structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SquarePyramidScene(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        vertex_coords = [\n            [1, 1, 0],\n            [1, -1, 0],\n            [-1, -1, 0],\n            [-1, 1, 0],\n            [0, 0, 2]\n        ]\n        faces_list = [\n            [0, 1, 4],\n            [1, 2, 4],\n            [2, 3, 4],\n            [3, 0, 4],\n            [0, 1, 2, 3]\n        ]\n        pyramid = Polyhedron(vertex_coords, faces_list)\n        self.add(pyramid)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D square pyramid centered in the scene, constructed from five vertices: four forming a square base and one apex above the center. The pyramid consists of four triangular side faces and one square base. The camera is angled at 75\u00b0 vertically and 30\u00b0 horizontally, providing a clear, tilted view of the pyramid\u2019s structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SquarePyramidScene(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        vertex_coords = [\n            [1, 1, 0],\n            [1, -1, 0],\n            [-1, -1, 0],\n            [-1, 1, 0],\n            [0, 0, 2]\n        ]\n        faces_list = [\n            [0, 1, 4],\n            [1, 2, 4],\n            [2, 3, 4],\n            [3, 0, 4],\n            [0, 1, 2, 3]\n        ]\n        pyramid = Polyhedron(vertex_coords, faces_list)\n        self.add(pyramid)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two triangles arranged horizontally:\n\n1. A standard triangle on the left.\n2. A larger triangle on the right, scaled up by a factor of 2 and rotated 60 degrees, creating a dynamic contrast in size and orientation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TriangleExample(Scene):\n    def construct(self):\n        triangle_1 = Triangle()\n        triangle_2 = Triangle().scale(2).rotate(60*DEGREES)\n        tri_group = Group(triangle_1, triangle_2).arrange(buff=1)\n        self.add(tri_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two triangles arranged horizontally:\n\n1. A standard triangle on the left.\n2. A larger triangle on the right, scaled up by a factor of 2 and rotated 60 degrees, creating a dynamic contrast in size and orientation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TriangleExample(Scene):\n    def construct(self):\n        triangle_1 = Triangle()\n        triangle_2 = Triangle().scale(2).rotate(60*DEGREES)\n        tri_group = Group(triangle_1, triangle_2).arrange(buff=1)\n        self.add(tri_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a graph with four nodes manually positioned to form an asymmetric shape: node 1 at the center-left, node 2 at the upper right, node 3 at the lower right, and node 4 at the far left. The nodes are connected in a loop, forming a closed quadrilateral with edges linking them in sequence."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GraphManualPosition(Scene):\n    def construct(self):\n        vertices = [1, 2, 3, 4]\n        edges = [(1, 2), (2, 3), (3, 4), (4, 1)]\n        lt = {1: [0, 0, 0], 2: [1, 1, 0], 3: [1, -1, 0], 4: [-1, 0, 0]}\n        G = Graph(vertices, edges, layout=lt)\n        self.add(G)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a graph with four nodes manually positioned to form an asymmetric shape: node 1 at the center-left, node 2 at the upper right, node 3 at the lower right, and node 4 at the far left. The nodes are connected in a loop, forming a closed quadrilateral with edges linking them in sequence."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GraphManualPosition(Scene):\n    def construct(self):\n        vertices = [1, 2, 3, 4]\n        edges = [(1, 2), (2, 3), (3, 4), (4, 1)]\n        lt = {1: [0, 0, 0], 2: [1, 1, 0], 3: [1, -1, 0], 4: [-1, 0, 0]}\n        G = Graph(vertices, edges, layout=lt)\n        self.add(G)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a graph with four nodes manually positioned to form an asymmetric shape: node 1 at the center-left, node 2 at the upper right, node 3 at the lower right, and node 4 at the far left. The nodes are connected in a loop, forming a closed quadrilateral with edges linking them in sequence."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GraphManualPosition(Scene):\n    def construct(self):\n        vertices = [1, 2, 3, 4]\n        edges = [(1, 2), (2, 3), (3, 4), (4, 1)]\n        lt = {1: [0, 0, 0], 2: [1, 1, 0], 3: [1, -1, 0], 4: [-1, 0, 0]}\n        G = Graph(vertices, edges, layout=lt)\n        self.add(G)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two annuli centered vertically on screen: a larger black ring shifted upward, and a smaller red ring positioned just below it."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnnulusExample(Scene):\n    def construct(self):\n        annulus_1 = Annulus(inner_radius=0.5, outer_radius=1).shift(UP)\n        annulus_2 = Annulus(inner_radius=0.3, outer_radius=0.6, color=RED).next_to(annulus_1, DOWN)\n        self.add(annulus_1, annulus_2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two annuli centered vertically on screen: a larger black ring shifted upward, and a smaller red ring positioned just below it."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnnulusExample(Scene):\n    def construct(self):\n        annulus_1 = Annulus(inner_radius=0.5, outer_radius=1).shift(UP)\n        annulus_2 = Annulus(inner_radius=0.3, outer_radius=0.6, color=RED).next_to(annulus_1, DOWN)\n        self.add(annulus_1, annulus_2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display two annuli centered vertically on screen: a larger black ring shifted upward, and a smaller red ring positioned just below it."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnnulusExample(Scene):\n    def construct(self):\n        annulus_1 = Annulus(inner_radius=0.5, outer_radius=1).shift(UP)\n        annulus_2 = Annulus(inner_radius=0.3, outer_radius=0.6, color=RED).next_to(annulus_1, DOWN)\n        self.add(annulus_1, annulus_2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \u201cFlash the dot below:\u201d at the top of the screen with a yellow dot positioned below it. Then animate a flashing effect around the dot to draw attention to it."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UsingFlash(Scene):\n    def construct(self):\n        dot = Dot(color=YELLOW).shift(DOWN)\n        self.add(Tex(\"Flash the dot below:\"), dot)\n        self.play(Flash(dot))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \u201cFlash the dot below:\u201d at the top of the screen with a yellow dot positioned below it. Then animate a flashing effect around the dot to draw attention to it."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UsingFlash(Scene):\n    def construct(self):\n        dot = Dot(color=YELLOW).shift(DOWN)\n        self.add(Tex(\"Flash the dot below:\"), dot)\n        self.play(Flash(dot))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the text \u201cFlash the dot below:\u201d at the top of the screen with a yellow dot positioned below it. Then animate a flashing effect around the dot to draw attention to it."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UsingFlash(Scene):\n    def construct(self):\n        dot = Dot(color=YELLOW).shift(DOWN)\n        self.add(Tex(\"Flash the dot below:\"), dot)\n        self.play(Flash(dot))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a square at the center of the screen. It fades in, then undergoes a series of transformations: it changes color to purple, becomes semi-transparent, shifts to the left, and scales up. Next, it moves downward and rotates slightly, only displaying a upper half (upper triangle) of the square. After a brief pause, the square smoothly returns to its original appearance and position using a restore animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RestoreExample(Scene):\n    def construct(self):\n        s = Square()\n        s.save_state()\n        self.play(FadeIn(s))\n        self.play(s.animate.set_color(PURPLE).set_opacity(0.5).shift(2*LEFT).scale(3))\n        self.play(s.animate.shift(5*DOWN).rotate(PI/4))\n        self.wait()\n        self.play(Restore(s), run_time=2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a square at the center of the screen. It fades in, then undergoes a series of transformations: it changes color to purple, becomes semi-transparent, shifts to the left, and scales up. Next, it moves downward and rotates slightly, only displaying a upper half (upper triangle) of the square. After a brief pause, the square smoothly returns to its original appearance and position using a restore animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RestoreExample(Scene):\n    def construct(self):\n        s = Square()\n        s.save_state()\n        self.play(FadeIn(s))\n        self.play(s.animate.set_color(PURPLE).set_opacity(0.5).shift(2*LEFT).scale(3))\n        self.play(s.animate.shift(5*DOWN).rotate(PI/4))\n        self.wait()\n        self.play(Restore(s), run_time=2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of axes with labels \"x\" and \"f(x)\". Plot the function \\( f(x) = 2(x - 5)^2 \\) in maroon. Show a dot on the graph that moves to the minimum point of the function."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArgMinExample(Scene):\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 10], y_range=[0, 100, 10], axis_config={\"include_tip\": False}\n        )\n        labels = ax.get_axis_labels(x_label=\"x\", y_label=\"f(x)\")\n\n        t = ValueTracker(0)\n\n        def func(x):\n            return 2 * (x - 5) ** 2\n        graph = ax.plot(func, color=MAROON)\n\n        initial_point = [ax.coords_to_point(t.get_value(), func(t.get_value()))]\n        dot = Dot(point=initial_point)\n\n        dot.add_updater(lambda x: x.move_to(ax.c2p(t.get_value(), func(t.get_value()))))\n        x_space = np.linspace(*ax.x_range[:2],200)\n        minimum_index = func(x_space).argmin()\n\n        self.add(ax, labels, graph, dot)\n        self.play(t.animate.set_value(x_space[minimum_index]))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of axes with labels \"x\" and \"f(x)\". Plot the function \\( f(x) = 2(x - 5)^2 \\) in maroon. Show a dot on the graph that moves to the minimum point of the function."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArgMinExample(Scene):\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 10], y_range=[0, 100, 10], axis_config={\"include_tip\": False}\n        )\n        labels = ax.get_axis_labels(x_label=\"x\", y_label=\"f(x)\")\n\n        t = ValueTracker(0)\n\n        def func(x):\n            return 2 * (x - 5) ** 2\n        graph = ax.plot(func, color=MAROON)\n\n        initial_point = [ax.coords_to_point(t.get_value(), func(t.get_value()))]\n        dot = Dot(point=initial_point)\n\n        dot.add_updater(lambda x: x.move_to(ax.c2p(t.get_value(), func(t.get_value()))))\n        x_space = np.linspace(*ax.x_range[:2],200)\n        minimum_index = func(x_space).argmin()\n\n        self.add(ax, labels, graph, dot)\n        self.play(t.animate.set_value(x_space[minimum_index]))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a directed graph with five labeled nodes arranged in a circular layout, but with all arrows styled to appear undirected by removing their tips. One edge, from node 3 to node 4, is colored red for emphasis. After the graph is created, several nodes animate to new positions in 3D space: node 1 moves to the upper right, node 2 to the upper left and forward, node 3 to the lower left and back, and node 4 to the lower right and back. The edges dynamically adjust to maintain the connections between the repositioned nodes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UndirectedMovingDiGraph(Scene):\n    def construct(self):\n        vertices = [i for i in range(5)]\n        edges = [\n            (0, 1),\n            (1, 2),\n            (3, 2),\n            (3, 4),\n        ]\n\n        edge_config = {\n            \"stroke_width\": 2,\n            \"tip_config\": {\"tip_length\": 0, \"tip_width\": 0},\n            (3, 4): {\"color\": RED},\n        }\n\n        g = DiGraph(\n            vertices,\n            edges,\n            labels=True,\n            layout=\"circular\",\n            edge_config=edge_config,\n        ).scale(1.4)\n\n        self.play(Create(g))\n        self.wait()\n\n        self.play(\n            g[1].animate.move_to([1, 1, 1]),\n            g[2].animate.move_to([-1, 1, 2]),\n            g[3].animate.move_to([-1.5, -1.5, -1]),\n            g[4].animate.move_to([1, -2, -1]),\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a directed graph with five labeled nodes arranged in a circular layout, but with all arrows styled to appear undirected by removing their tips. One edge, from node 3 to node 4, is colored red for emphasis. After the graph is created, several nodes animate to new positions in 3D space: node 1 moves to the upper right, node 2 to the upper left and forward, node 3 to the lower left and back, and node 4 to the lower right and back. The edges dynamically adjust to maintain the connections between the repositioned nodes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UndirectedMovingDiGraph(Scene):\n    def construct(self):\n        vertices = [i for i in range(5)]\n        edges = [\n            (0, 1),\n            (1, 2),\n            (3, 2),\n            (3, 4),\n        ]\n\n        edge_config = {\n            \"stroke_width\": 2,\n            \"tip_config\": {\"tip_length\": 0, \"tip_width\": 0},\n            (3, 4): {\"color\": RED},\n        }\n\n        g = DiGraph(\n            vertices,\n            edges,\n            labels=True,\n            layout=\"circular\",\n            edge_config=edge_config,\n        ).scale(1.4)\n\n        self.play(Create(g))\n        self.wait()\n\n        self.play(\n            g[1].animate.move_to([1, 1, 1]),\n            g[2].animate.move_to([-1, 1, 2]),\n            g[3].animate.move_to([-1.5, -1.5, -1]),\n            g[4].animate.move_to([1, -2, -1]),\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display seven lines of styled text arranged vertically:\n\n1. The first line reads \"all in red except this\" where the entire text is red except for \"except this\", which is yellow.\n2. The second line says \"nice gradient\" with a smooth color transition from blue to green across the text.\n3. The third line reads \"nice intermediate gradient\" where \"intermediate\" has a red-to-yellow gradient, while the rest of the text has a blue-to-green gradient.\n4. The fourth line says \"fl ligature causing trouble here\" with \"causing trouble\" in a red-to-yellow gradient, highlighting potential rendering issues with the \"fl\" ligature.\n5. The fifth line repeats the previous text but offsets the gradient to avoid the ligature issue, making \"causing trouble\" appear correctly styled.\n6. The sixth line says \"fl ligature floating inside\" with \"floating\" in a red-to-yellow gradient and offset to prevent rendering issues.\n7. The seventh line is similar to the sixth but uses a two-dimensional offset for the gradient on \"floating\", further refining the visual effect.\n\nAll lines are centered and stacked vertically on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ColorExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\n            f'all in red <span fgcolor=\"{YELLOW}\">except this</span>', color=RED\n        )\n        text2 = MarkupText(\"nice gradient\", gradient=(BLUE, GREEN))\n        text3 = MarkupText(\n            'nice <gradient from=\"RED\" to=\"YELLOW\">intermediate</gradient> gradient',\n            gradient=(BLUE, GREEN),\n        )\n        text4 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\">causing trouble</gradient> here'\n        )\n        text5 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\" offset=\"1\">defeated</gradient> with offset'\n        )\n        text6 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\" offset=\"1\">floating</gradient> inside'\n        )\n        text7 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\" offset=\"1,1\">floating</gradient> inside'\n        )\n        group = VGroup(text1, text2, text3, text4, text5, text6, text7).arrange(DOWN)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display seven lines of styled text arranged vertically:\n\n1. The first line reads \"all in red except this\" where the entire text is red except for \"except this\", which is yellow.\n2. The second line says \"nice gradient\" with a smooth color transition from blue to green across the text.\n3. The third line reads \"nice intermediate gradient\" where \"intermediate\" has a red-to-yellow gradient, while the rest of the text has a blue-to-green gradient.\n4. The fourth line says \"fl ligature causing trouble here\" with \"causing trouble\" in a red-to-yellow gradient, highlighting potential rendering issues with the \"fl\" ligature.\n5. The fifth line repeats the previous text but offsets the gradient to avoid the ligature issue, making \"causing trouble\" appear correctly styled.\n6. The sixth line says \"fl ligature floating inside\" with \"floating\" in a red-to-yellow gradient and offset to prevent rendering issues.\n7. The seventh line is similar to the sixth but uses a two-dimensional offset for the gradient on \"floating\", further refining the visual effect.\n\nAll lines are centered and stacked vertically on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ColorExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\n            f'all in red <span fgcolor=\"{YELLOW}\">except this</span>', color=RED\n        )\n        text2 = MarkupText(\"nice gradient\", gradient=(BLUE, GREEN))\n        text3 = MarkupText(\n            'nice <gradient from=\"RED\" to=\"YELLOW\">intermediate</gradient> gradient',\n            gradient=(BLUE, GREEN),\n        )\n        text4 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\">causing trouble</gradient> here'\n        )\n        text5 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\" offset=\"1\">defeated</gradient> with offset'\n        )\n        text6 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\" offset=\"1\">floating</gradient> inside'\n        )\n        text7 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\" offset=\"1,1\">floating</gradient> inside'\n        )\n        group = VGroup(text1, text2, text3, text4, text5, text6, text7).arrange(DOWN)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display seven lines of styled text arranged vertically:\n\n1. The first line reads \"all in red except this\" where the entire text is red except for \"except this\", which is yellow.\n2. The second line says \"nice gradient\" with a smooth color transition from blue to green across the text.\n3. The third line reads \"nice intermediate gradient\" where \"intermediate\" has a red-to-yellow gradient, while the rest of the text has a blue-to-green gradient.\n4. The fourth line says \"fl ligature causing trouble here\" with \"causing trouble\" in a red-to-yellow gradient, highlighting potential rendering issues with the \"fl\" ligature.\n5. The fifth line repeats the previous text but offsets the gradient to avoid the ligature issue, making \"causing trouble\" appear correctly styled.\n6. The sixth line says \"fl ligature floating inside\" with \"floating\" in a red-to-yellow gradient and offset to prevent rendering issues.\n7. The seventh line is similar to the sixth but uses a two-dimensional offset for the gradient on \"floating\", further refining the visual effect.\n\nAll lines are centered and stacked vertically on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ColorExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\n            f'all in red <span fgcolor=\"{YELLOW}\">except this</span>', color=RED\n        )\n        text2 = MarkupText(\"nice gradient\", gradient=(BLUE, GREEN))\n        text3 = MarkupText(\n            'nice <gradient from=\"RED\" to=\"YELLOW\">intermediate</gradient> gradient',\n            gradient=(BLUE, GREEN),\n        )\n        text4 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\">causing trouble</gradient> here'\n        )\n        text5 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\" offset=\"1\">defeated</gradient> with offset'\n        )\n        text6 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\" offset=\"1\">floating</gradient> inside'\n        )\n        text7 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\" offset=\"1,1\">floating</gradient> inside'\n        )\n        group = VGroup(text1, text2, text3, text4, text5, text6, text7).arrange(DOWN)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a red circle with a red dot on its edge, positioned to the left. As the circle rolls to the right across the screen over 4 seconds, it rotates and leaves behind a traced path showing the trajectory of the point on its edge. The path is continuously drawn as the circle moves."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TracedPathExample(Scene):\n    def construct(self):\n        circ = Circle(color=RED).shift(4*LEFT)\n        dot = Dot(color=RED).move_to(circ.get_start())\n        rolling_circle = VGroup(circ, dot)\n        trace = TracedPath(circ.get_start)\n        rolling_circle.add_updater(lambda m: m.rotate(-0.3))\n        self.add(trace, rolling_circle)\n        self.play(rolling_circle.animate.shift(8*RIGHT), run_time=4, rate_func=linear)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a red circle with a red dot on its edge, positioned to the left. As the circle rolls to the right across the screen over 4 seconds, it rotates and leaves behind a traced path showing the trajectory of the point on its edge. The path is continuously drawn as the circle moves."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TracedPathExample(Scene):\n    def construct(self):\n        circ = Circle(color=RED).shift(4*LEFT)\n        dot = Dot(color=RED).move_to(circ.get_start())\n        rolling_circle = VGroup(circ, dot)\n        trace = TracedPath(circ.get_start)\n        rolling_circle.add_updater(lambda m: m.rotate(-0.3))\n        self.add(trace, rolling_circle)\n        self.play(rolling_circle.animate.shift(8*RIGHT), run_time=4, rate_func=linear)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a red semi-transparent square on the left and a green semi-transparent triangle on the right. After a brief pause, the camera smoothly pans to center on the square, then transitions to center on the triangle, creating a dynamic shift in focus between the two shapes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingAndZoomingCamera(MovingCameraScene):\n    def construct(self):\n        s = Square(color=BLUE, fill_opacity=0.5).move_to(2 * LEFT)\n        t = Triangle(color=YELLOW, fill_opacity=0.5).move_to(2 * RIGHT)\n        self.add(s, t)\n        self.play(self.camera.frame.animate.move_to(s).set(width=s.width*2))\n        self.wait(0.3)\n        self.play(self.camera.frame.animate.move_to(t).set(width=t.width*2))\n\n        self.play(self.camera.frame.animate.move_to(ORIGIN).set(width=14))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a red semi-transparent square on the left and a green semi-transparent triangle on the right. After a brief pause, the camera smoothly pans to center on the square, then transitions to center on the triangle, creating a dynamic shift in focus between the two shapes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingAndZoomingCamera(MovingCameraScene):\n    def construct(self):\n        s = Square(color=BLUE, fill_opacity=0.5).move_to(2 * LEFT)\n        t = Triangle(color=YELLOW, fill_opacity=0.5).move_to(2 * RIGHT)\n        self.add(s, t)\n        self.play(self.camera.frame.animate.move_to(s).set(width=s.width*2))\n        self.wait(0.3)\n        self.play(self.camera.frame.animate.move_to(t).set(width=t.width*2))\n\n        self.play(self.camera.frame.animate.move_to(ORIGIN).set(width=14))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 matrix  \n\\[\n\\begin{bmatrix}\n\\pi & 3 \\\\\n1 & 5\n\\end{bmatrix}\n\\]  \nwith its left bracket colored blue and right bracket colored green. The matrix appears on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetBracketsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 3], [1, 5]])\n        bra = m0.get_brackets()\n        colors = [BLUE, GREEN]\n        for k in range(len(colors)):\n            bra[k].set_color(colors[k])\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 matrix  \n\\[\n\\begin{bmatrix}\n\\pi & 3 \\\\\n1 & 5\n\\end{bmatrix}\n\\]  \nwith its left bracket colored blue and right bracket colored green. The matrix appears on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetBracketsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 3], [1, 5]])\n        bra = m0.get_brackets()\n        colors = [BLUE, GREEN]\n        for k in range(len(colors)):\n            bra[k].set_color(colors[k])\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 2\u00d72 matrix  \n\\[\n\\begin{bmatrix}\n\\pi & 3 \\\\\n1 & 5\n\\end{bmatrix}\n\\]  \nwith its left bracket colored blue and right bracket colored green. The matrix appears on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetBracketsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 3], [1, 5]])\n        bra = m0.get_brackets()\n        colors = [BLUE, GREEN]\n        for k in range(len(colors)):\n            bra[k].set_color(colors[k])\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two dots, one at the coordinates (-2, -1) and the other at (2, 1). Draw an orange line connecting the two dots. Add a brace below the line with the text \"Horizontal distance\" and another brace perpendicular to the line with the text \"x-x_1\"."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BraceAnnotation(Scene):\n    def construct(self):\n        dot = Dot([-2, -1, 0])\n        dot2 = Dot([2, 1, 0])\n        line = Line(dot.get_center(), dot2.get_center()).set_color(ORANGE)\n        b1 = Brace(line)\n        b1text = b1.get_text(\"Horizontal distance\")\n        b2 = Brace(line, direction=line.copy().rotate(PI / 2).get_unit_vector())\n        b2text = b2.get_tex(\"x-x_1\")\n        self.add(line, dot, dot2, b1, b2, b1text, b2text)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two dots, one at the coordinates (-2, -1) and the other at (2, 1). Draw an orange line connecting the two dots. Add a brace below the line with the text \"Horizontal distance\" and another brace perpendicular to the line with the text \"x-x_1\"."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BraceAnnotation(Scene):\n    def construct(self):\n        dot = Dot([-2, -1, 0])\n        dot2 = Dot([2, 1, 0])\n        line = Line(dot.get_center(), dot2.get_center()).set_color(ORANGE)\n        b1 = Brace(line)\n        b1text = b1.get_text(\"Horizontal distance\")\n        b2 = Brace(line, direction=line.copy().rotate(PI / 2).get_unit_vector())\n        b2text = b2.get_tex(\"x-x_1\")\n        self.add(line, dot, dot2, b1, b2, b1text, b2text)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display two dots, one at the coordinates (-2, -1) and the other at (2, 1). Draw an orange line connecting the two dots. Add a brace below the line with the text \"Horizontal distance\" and another brace perpendicular to the line with the text \"x-x_1\"."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BraceAnnotation(Scene):\n    def construct(self):\n        dot = Dot([-2, -1, 0])\n        dot2 = Dot([2, 1, 0])\n        line = Line(dot.get_center(), dot2.get_center()).set_color(ORANGE)\n        b1 = Brace(line)\n        b1text = b1.get_text(\"Horizontal distance\")\n        b2 = Brace(line, direction=line.copy().rotate(PI / 2).get_unit_vector())\n        b2text = b2.get_tex(\"x-x_1\")\n        self.add(line, dot, dot2, b1, b2, b1text, b2text)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two semi-transparent squares: a blue one on the left and a green one on the right. Over two seconds, rotate the blue square 180 degrees using an animation tied to its position, and simultaneously rotate the green square 180 degrees using a direct rotation. Then pause."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DifferentRotations(Scene):\n    def construct(self):\n        left_square = Square(color=BLUE, fill_opacity=0.7).shift(2 * LEFT)\n        right_square = Square(color=GREEN, fill_opacity=0.7).shift(2 * RIGHT)\n        self.play(\n            left_square.animate.rotate(PI), Rotate(right_square, angle=PI), run_time=2\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two semi-transparent squares: a blue one on the left and a green one on the right. Over two seconds, rotate the blue square 180 degrees using an animation tied to its position, and simultaneously rotate the green square 180 degrees using a direct rotation. Then pause."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DifferentRotations(Scene):\n    def construct(self):\n        left_square = Square(color=BLUE, fill_opacity=0.7).shift(2 * LEFT)\n        right_square = Square(color=GREEN, fill_opacity=0.7).shift(2 * RIGHT)\n        self.play(\n            left_square.animate.rotate(PI), Rotate(right_square, angle=PI), run_time=2\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display two semi-transparent squares: a blue one on the left and a green one on the right. Over two seconds, rotate the blue square 180 degrees using an animation tied to its position, and simultaneously rotate the green square 180 degrees using a direct rotation. Then pause."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DifferentRotations(Scene):\n    def construct(self):\n        left_square = Square(color=BLUE, fill_opacity=0.7).shift(2 * LEFT)\n        right_square = Square(color=GREEN, fill_opacity=0.7).shift(2 * RIGHT)\n        self.play(\n            left_square.animate.rotate(PI), Rotate(right_square, angle=PI), run_time=2\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a green dot at the center of the screen. After a short pause, zooming functionality is activated (though not animated), preparing a magnified view. Then, the dot smoothly shifts to the left while the zoomed-in view follows the motion, highlighting the movement in detail."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ChangingZoomScale(ZoomedScene):\n    def __init__(self, **kwargs):\n        ZoomedScene.__init__(\n            self,\n            zoom_factor=0.3,\n            zoomed_display_height=1,\n            zoomed_display_width=3,\n            image_frame_stroke_width=20,\n            zoomed_camera_config={\n                \"default_frame_stroke_width\": 3,\n            },\n            **kwargs\n        )\n\n    def construct(self):\n        dot = Dot().set_color(GREEN)\n        sq = Circle(fill_opacity=1, radius=0.2).next_to(dot, RIGHT)\n        self.add(dot, sq)\n        self.wait(1)\n        self.activate_zooming(animate=False)\n        self.wait(1)\n        self.play(dot.animate.shift(LEFT * 0.3))\n\n        self.play(self.zoomed_camera.frame.animate.scale(4))\n        self.play(self.zoomed_camera.frame.animate.shift(0.5 * DOWN))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a green dot at the center of the screen. After a short pause, zooming functionality is activated (though not animated), preparing a magnified view. Then, the dot smoothly shifts to the left while the zoomed-in view follows the motion, highlighting the movement in detail."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ChangingZoomScale(ZoomedScene):\n    def __init__(self, **kwargs):\n        ZoomedScene.__init__(\n            self,\n            zoom_factor=0.3,\n            zoomed_display_height=1,\n            zoomed_display_width=3,\n            image_frame_stroke_width=20,\n            zoomed_camera_config={\n                \"default_frame_stroke_width\": 3,\n            },\n            **kwargs\n        )\n\n    def construct(self):\n        dot = Dot().set_color(GREEN)\n        sq = Circle(fill_opacity=1, radius=0.2).next_to(dot, RIGHT)\n        self.add(dot, sq)\n        self.wait(1)\n        self.activate_zooming(animate=False)\n        self.wait(1)\n        self.play(dot.animate.shift(LEFT * 0.3))\n\n        self.play(self.zoomed_camera.frame.animate.scale(4))\n        self.play(self.zoomed_camera.frame.animate.shift(0.5 * DOWN))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a red outline formed by connecting a sequence of corner points. The shape starts by tracing a square clockwise from the top right, then draws two diagonal lines forming an \"X\" across the bottom half. The entire shape is scaled up to appear larger on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PointsAsCornersExample(Scene):\n    def construct(self):\n        corners = (\n            # create square\n            UR, UL,\n            DL, DR,\n            UR,\n            # create crosses\n            DL, UL,\n            DR\n        )\n        vmob = VMobject(stroke_color=RED)\n        vmob.set_points_as_corners(corners).scale(2)\n        self.add(vmob)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a red outline formed by connecting a sequence of corner points. The shape starts by tracing a square clockwise from the top right, then draws two diagonal lines forming an \"X\" across the bottom half. The entire shape is scaled up to appear larger on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PointsAsCornersExample(Scene):\n    def construct(self):\n        corners = (\n            # create square\n            UR, UL,\n            DL, DR,\n            UR,\n            # create crosses\n            DL, UL,\n            DR\n        )\n        vmob = VMobject(stroke_color=RED)\n        vmob.set_points_as_corners(corners).scale(2)\n        self.add(vmob)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a large blue square with red edges, featuring four smaller shapes cut out from it: a triangle in the lower right, a small square in the upper right, a pentagon in the lower left, and a hexagon in the upper left. The cutouts create transparent holes in the larger square, revealing the background."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CutoutExample(Scene):\n    def construct(self):\n        s1 = Square().scale(2.5)\n        s2 = Triangle().shift(DOWN + RIGHT).scale(0.5)\n        s3 = Square().shift(UP + RIGHT).scale(0.5)\n        s4 = RegularPolygon(5).shift(DOWN + LEFT).scale(0.5)\n        s5 = RegularPolygon(6).shift(UP + LEFT).scale(0.5)\n        c = Cutout(s1, s2, s3, s4, s5, fill_opacity=1, color=BLUE, stroke_color=RED)\n        self.play(Write(c), run_time=4)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a large blue square with red edges, featuring four smaller shapes cut out from it: a triangle in the lower right, a small square in the upper right, a pentagon in the lower left, and a hexagon in the upper left. The cutouts create transparent holes in the larger square, revealing the background."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CutoutExample(Scene):\n    def construct(self):\n        s1 = Square().scale(2.5)\n        s2 = Triangle().shift(DOWN + RIGHT).scale(0.5)\n        s3 = Square().shift(UP + RIGHT).scale(0.5)\n        s4 = RegularPolygon(5).shift(DOWN + LEFT).scale(0.5)\n        s5 = RegularPolygon(6).shift(UP + LEFT).scale(0.5)\n        c = Cutout(s1, s2, s3, s4, s5, fill_opacity=1, color=BLUE, stroke_color=RED)\n        self.play(Write(c), run_time=4)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \u201cCircum- scribe\u201d in large font. Then animate several variations of the circumscribe effect around the text:\n\n1. Draw a default border around the text.\n2. Draw a circular border instead of the default shape.\n3. Draw a border that fades out after appearing.\n4. Animate a slower border drawing with a longer duration.\n5. Draw a circular border that fades out after appearing."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UsingCircumscribe(Scene):\n    def construct(self):\n        lbl = Tex(r\"Circum-\\\\scribe\").scale(2)\n        self.add(lbl)\n        self.play(Circumscribe(lbl))\n        self.play(Circumscribe(lbl, Circle))\n        self.play(Circumscribe(lbl, fade_out=True))\n        self.play(Circumscribe(lbl, time_width=2))\n        self.play(Circumscribe(lbl, Circle, True))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \u201cCircum- scribe\u201d in large font. Then animate several variations of the circumscribe effect around the text:\n\n1. Draw a default border around the text.\n2. Draw a circular border instead of the default shape.\n3. Draw a border that fades out after appearing.\n4. Animate a slower border drawing with a longer duration.\n5. Draw a circular border that fades out after appearing."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UsingCircumscribe(Scene):\n    def construct(self):\n        lbl = Tex(r\"Circum-\\\\scribe\").scale(2)\n        self.add(lbl)\n        self.play(Circumscribe(lbl))\n        self.play(Circumscribe(lbl, Circle))\n        self.play(Circumscribe(lbl, fade_out=True))\n        self.play(Circumscribe(lbl, time_width=2))\n        self.play(Circumscribe(lbl, Circle, True))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a group of 15 blue dots randomly scattered and slightly shifted upward. Below them, a red copy of the same dots is shown, but this time the dots are neatly arranged in a row using default spacing. Both groups are centered on the screen, with the blue dots above and the red dots below."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArrangeSumobjectsExample(Scene):\n    def construct(self):\n        s= VGroup(*[Dot().shift(i*0.1*RIGHT*np.random.uniform(-1,1)+UP*np.random.uniform(-1,1)) for i in range(0,15)])\n        s.shift(UP).set_color(BLUE)\n        s2= s.copy().set_color(RED)\n        s2.arrange_submobjects()\n        s2.shift(DOWN)\n        self.add(s,s2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a group of 15 blue dots randomly scattered and slightly shifted upward. Below them, a red copy of the same dots is shown, but this time the dots are neatly arranged in a row using default spacing. Both groups are centered on the screen, with the blue dots above and the red dots below."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArrangeSumobjectsExample(Scene):\n    def construct(self):\n        s= VGroup(*[Dot().shift(i*0.1*RIGHT*np.random.uniform(-1,1)+UP*np.random.uniform(-1,1)) for i in range(0,15)])\n        s.shift(UP).set_color(BLUE)\n        s2= s.copy().set_color(RED)\n        s2.arrange_submobjects()\n        s2.shift(DOWN)\n        self.add(s,s2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a group of 15 blue dots randomly scattered and slightly shifted upward. Below them, a red copy of the same dots is shown, but this time the dots are neatly arranged in a row using default spacing. Both groups are centered on the screen, with the blue dots above and the red dots below."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArrangeSumobjectsExample(Scene):\n    def construct(self):\n        s= VGroup(*[Dot().shift(i*0.1*RIGHT*np.random.uniform(-1,1)+UP*np.random.uniform(-1,1)) for i in range(0,15)])\n        s.shift(UP).set_color(BLUE)\n        s2= s.copy().set_color(RED)\n        s2.arrange_submobjects()\n        s2.shift(DOWN)\n        self.add(s,s2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a block of placeholder text (\"Lorem ipsum...\") in two formats:\n\n1. Initially, the text appears left-aligned under the title \"Not Justified\".\n2. Then, the left-aligned text and its title fade out while a new version of the same text fades in, now fully justified (aligned evenly along both left and right margins), under the title \"Justified\".\n\nThe transition visually contrasts the difference between non-justified and justified text formatting."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass JustifyText(Scene):\n    def construct(self):\n        ipsum_text = (\n            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n            \"Praesent feugiat metus sit amet iaculis pulvinar. Nulla posuere \"\n            \"quam a ex aliquam, eleifend consectetur tellus viverra. Aliquam \"\n            \"fermentum interdum justo, nec rutrum elit pretium ac. Nam quis \"\n            \"leo pulvinar, dignissim est at, venenatis nisi.\"\n        )\n        justified_text = MarkupText(ipsum_text, justify=True).scale(0.4)\n        not_justified_text = MarkupText(ipsum_text, justify=False).scale(0.4)\n        just_title = Title(\"Justified\")\n        njust_title = Title(\"Not Justified\")\n        self.add(njust_title, not_justified_text)\n        self.play(\n            FadeOut(not_justified_text),\n            FadeIn(justified_text),\n            FadeOut(njust_title),\n            FadeIn(just_title),\n        )\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a block of placeholder text (\"Lorem ipsum...\") in two formats:\n\n1. Initially, the text appears left-aligned under the title \"Not Justified\".\n2. Then, the left-aligned text and its title fade out while a new version of the same text fades in, now fully justified (aligned evenly along both left and right margins), under the title \"Justified\".\n\nThe transition visually contrasts the difference between non-justified and justified text formatting."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass JustifyText(Scene):\n    def construct(self):\n        ipsum_text = (\n            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n            \"Praesent feugiat metus sit amet iaculis pulvinar. Nulla posuere \"\n            \"quam a ex aliquam, eleifend consectetur tellus viverra. Aliquam \"\n            \"fermentum interdum justo, nec rutrum elit pretium ac. Nam quis \"\n            \"leo pulvinar, dignissim est at, venenatis nisi.\"\n        )\n        justified_text = MarkupText(ipsum_text, justify=True).scale(0.4)\n        not_justified_text = MarkupText(ipsum_text, justify=False).scale(0.4)\n        just_title = Title(\"Justified\")\n        njust_title = Title(\"Not Justified\")\n        self.add(njust_title, not_justified_text)\n        self.play(\n            FadeOut(not_justified_text),\n            FadeIn(justified_text),\n            FadeOut(njust_title),\n            FadeIn(just_title),\n        )\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three vertically aligned dots on the left side of the screen, along with a red dashed vertical line labeled \"25%\" and a title at the top reading \"lag_ratio = 0.25\". The dots then move horizontally to the right, one after another, with a slight delay between each movement based on a lag ratio of 0.25. The entire animation lasts 4 seconds."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaggedStartExample(Scene):\n    def construct(self):\n        title = Text(\"lag_ratio = 0.25\").to_edge(UP)\n\n        dot1 = Dot(point=LEFT * 2 + UP, radius=0.16)\n        dot2 = Dot(point=LEFT * 2, radius=0.16)\n        dot3 = Dot(point=LEFT * 2 + DOWN, radius=0.16)\n        line_25 = DashedLine(\n            start=LEFT + UP * 2,\n            end=LEFT + DOWN * 2,\n            color=RED\n        )\n        label = Text(\"25%\", font_size=24).next_to(line_25, UP)\n        self.add(title, dot1, dot2, dot3, line_25, label)\n\n        self.play(LaggedStart(\n            dot1.animate.shift(RIGHT * 4),\n            dot2.animate.shift(RIGHT * 4),\n            dot3.animate.shift(RIGHT * 4),\n            lag_ratio=0.25,\n            run_time=4\n        ))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three vertically aligned dots on the left side of the screen, along with a red dashed vertical line labeled \"25%\" and a title at the top reading \"lag_ratio = 0.25\". The dots then move horizontally to the right, one after another, with a slight delay between each movement based on a lag ratio of 0.25. The entire animation lasts 4 seconds."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaggedStartExample(Scene):\n    def construct(self):\n        title = Text(\"lag_ratio = 0.25\").to_edge(UP)\n\n        dot1 = Dot(point=LEFT * 2 + UP, radius=0.16)\n        dot2 = Dot(point=LEFT * 2, radius=0.16)\n        dot3 = Dot(point=LEFT * 2 + DOWN, radius=0.16)\n        line_25 = DashedLine(\n            start=LEFT + UP * 2,\n            end=LEFT + DOWN * 2,\n            color=RED\n        )\n        label = Text(\"25%\", font_size=24).next_to(line_25, UP)\n        self.add(title, dot1, dot2, dot3, line_25, label)\n\n        self.play(LaggedStart(\n            dot1.animate.shift(RIGHT * 4),\n            dot2.animate.shift(RIGHT * 4),\n            dot3.animate.shift(RIGHT * 4),\n            lag_ratio=0.25,\n            run_time=4\n        ))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \"Hello \u2605 LaTeX\" in large font, where the star is a LaTeX-rendered symbol and the LaTeX logo is typeset properly. The substring \"igsta\" within the star symbol is colored red, though it may not visibly affect the output since \"igsta\" does not appear in the visible text."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaTeXSubstrings(Scene):\n    def construct(self):\n        tex = Tex('Hello', r'$\\bigstar$', r'\\LaTeX', font_size=144)\n        tex.set_color_by_tex('igsta', RED)\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \"Hello \u2605 LaTeX\" in large font, where the star is a LaTeX-rendered symbol and the LaTeX logo is typeset properly. The substring \"igsta\" within the star symbol is colored red, though it may not visibly affect the output since \"igsta\" does not appear in the visible text."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaTeXSubstrings(Scene):\n    def construct(self):\n        tex = Tex('Hello', r'$\\bigstar$', r'\\LaTeX', font_size=144)\n        tex.set_color_by_tex('igsta', RED)\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the text \"Hello \u2605 LaTeX\" in large font, where the star is a LaTeX-rendered symbol and the LaTeX logo is typeset properly. The substring \"igsta\" within the star symbol is colored red, though it may not visibly affect the output since \"igsta\" does not appear in the visible text."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaTeXSubstrings(Scene):\n    def construct(self):\n        tex = Tex('Hello', r'$\\bigstar$', r'\\LaTeX', font_size=144)\n        tex.set_color_by_tex('igsta', RED)\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the Pythagorean identity \\( x^2 + y^2 = z^2 \\) in large font, rendered using a French cursive LaTeX math font style."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaTeXMathFonts(Scene):\n    def construct(self):\n        tex = Tex(\n            r\"$x^2 + y^2 = z^2$\",\n            tex_template=TexFontTemplates.french_cursive,\n            font_size=144,\n        )\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the Pythagorean identity \\( x^2 + y^2 = z^2 \\) in large font, rendered using a French cursive LaTeX math font style."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaTeXMathFonts(Scene):\n    def construct(self):\n        tex = Tex(\n            r\"$x^2 + y^2 = z^2$\",\n            tex_template=TexFontTemplates.french_cursive,\n            font_size=144,\n        )\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the Pythagorean identity \\( x^2 + y^2 = z^2 \\) in large font, rendered using a French cursive LaTeX math font style."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaTeXMathFonts(Scene):\n    def construct(self):\n        tex = Tex(\n            r\"$x^2 + y^2 = z^2$\",\n            tex_template=TexFontTemplates.french_cursive,\n            font_size=144,\n        )\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D scene with a coordinate axis system and a curved surface resembling a twisted, vertically stretched ring. The surface is generated using a parametric function and appears in the center of the scene, with the camera angled from above and to the side to highlight its shape."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ParaSurface(ThreeDScene):\n    def func(self, u, v):\n        return np.array([np.cos(u) * np.cos(v), np.cos(u) * np.sin(v), u])\n\n    def construct(self):\n        axes = ThreeDAxes(x_range=[-4,4], x_length=8)\n        surface = Surface(\n            lambda u, v: axes.c2p(*self.func(u, v)),\n            u_range=[-PI, PI],\n            v_range=[0, TAU],\n            resolution=8,\n        )\n        self.set_camera_orientation(theta=70 * DEGREES, phi=75 * DEGREES)\n        self.add(axes, surface)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D scene with a coordinate axis system and a curved surface resembling a twisted, vertically stretched ring. The surface is generated using a parametric function and appears in the center of the scene, with the camera angled from above and to the side to highlight its shape."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ParaSurface(ThreeDScene):\n    def func(self, u, v):\n        return np.array([np.cos(u) * np.cos(v), np.cos(u) * np.sin(v), u])\n\n    def construct(self):\n        axes = ThreeDAxes(x_range=[-4,4], x_length=8)\n        surface = Surface(\n            lambda u, v: axes.c2p(*self.func(u, v)),\n            u_range=[-PI, PI],\n            v_range=[0, TAU],\n            resolution=8,\n        )\n        self.set_camera_orientation(theta=70 * DEGREES, phi=75 * DEGREES)\n        self.add(axes, surface)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 3D scene with a coordinate axis system and a curved surface resembling a twisted, vertically stretched ring. The surface is generated using a parametric function and appears in the center of the scene, with the camera angled from above and to the side to highlight its shape."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ParaSurface(ThreeDScene):\n    def func(self, u, v):\n        return np.array([np.cos(u) * np.cos(v), np.cos(u) * np.sin(v), u])\n\n    def construct(self):\n        axes = ThreeDAxes(x_range=[-4,4], x_length=8)\n        surface = Surface(\n            lambda u, v: axes.c2p(*self.func(u, v)),\n            u_range=[-PI, PI],\n            v_range=[0, TAU],\n            resolution=8,\n        )\n        self.set_camera_orientation(theta=70 * DEGREES, phi=75 * DEGREES)\n        self.add(axes, surface)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 matrix  \n\\[\n\\begin{bmatrix}\n2 & 0 \\\\\n-1 & 1\n\\end{bmatrix}\n\\]  \nfollowed by a determinant expression showing that its determinant is 3. Both the matrix and the determinant text appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DeterminantOfAMatrix(Scene):\n    def construct(self):\n        matrix = Matrix([\n            [2, 0],\n            [-1, 1]\n        ])\n\n        # scaling down the `det` string\n        det = get_det_text(matrix,\n                    determinant=3,\n                    initial_scale_factor=1)\n\n        # must add the matrix\n        self.add(matrix)\n        self.add(det)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 matrix  \n\\[\n\\begin{bmatrix}\n2 & 0 \\\\\n-1 & 1\n\\end{bmatrix}\n\\]  \nfollowed by a determinant expression showing that its determinant is 3. Both the matrix and the determinant text appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DeterminantOfAMatrix(Scene):\n    def construct(self):\n        matrix = Matrix([\n            [2, 0],\n            [-1, 1]\n        ])\n\n        # scaling down the `det` string\n        det = get_det_text(matrix,\n                    determinant=3,\n                    initial_scale_factor=1)\n\n        # must add the matrix\n        self.add(matrix)\n        self.add(det)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the word \u201cManim\u201d centered on the screen, with a straight underline drawn directly beneath it, emphasizing the text."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UnderLine(Scene):\n    def construct(self):\n        man = Tex(\"Manim\")  # Full Word\n        ul = Underline(man)  # Underlining the word\n        self.add(man, ul)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the word \u201cManim\u201d centered on the screen, with a straight underline drawn directly beneath it, emphasizing the text."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UnderLine(Scene):\n    def construct(self):\n        man = Tex(\"Manim\")  # Full Word\n        ul = Underline(man)  # Underlining the word\n        self.add(man, ul)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the word \u201cManim\u201d centered on the screen, with a straight underline drawn directly beneath it, emphasizing the text."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UnderLine(Scene):\n    def construct(self):\n        man = Tex(\"Manim\")  # Full Word\n        ul = Underline(man)  # Underlining the word\n        self.add(man, ul)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a graph with six labeled nodes arranged randomly across the screen. The nodes are connected by a mix of sequential and cross-linking edges, forming a dense and irregular network. The layout emphasizes randomness, resulting in a visually scattered but fully connected structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RandomLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"random\",\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a graph with six labeled nodes arranged randomly across the screen. The nodes are connected by a mix of sequential and cross-linking edges, forming a dense and irregular network. The layout emphasizes randomness, resulting in a visually scattered but fully connected structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RandomLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6],\n            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],\n            layout=\"random\",\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the word \"Google\" with each letter colored to match the official Google logo:\n\n- \"G\" in blue (#3174f0)\n- \"o\" in red (#e53125)\n- The second \"o\" in yellow (#fbb003)\n- \"g\" in blue (#3174f0)\n- \"l\" in green (#269a43)\n- \"e\" in red (#e53125)\n\nThe text is large and prominently centered on the screen, scaled up for emphasis."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TextMoreCustomization(Scene):\n    def construct(self):\n        text1 = Text(\n            'Google',\n            t2c={'[:1]': '#3174f0', '[1:2]': '#e53125',\n                 '[2:3]': '#fbb003', '[3:4]': '#3174f0',\n                 '[4:5]': '#269a43', '[5:]': '#e53125'}, font_size=58).scale(3)\n        self.add(text1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the word \"Google\" with each letter colored to match the official Google logo:\n\n- \"G\" in blue (#3174f0)\n- \"o\" in red (#e53125)\n- The second \"o\" in yellow (#fbb003)\n- \"g\" in blue (#3174f0)\n- \"l\" in green (#269a43)\n- \"e\" in red (#e53125)\n\nThe text is large and prominently centered on the screen, scaled up for emphasis."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TextMoreCustomization(Scene):\n    def construct(self):\n        text1 = Text(\n            'Google',\n            t2c={'[:1]': '#3174f0', '[1:2]': '#e53125',\n                 '[2:3]': '#fbb003', '[3:4]': '#3174f0',\n                 '[4:5]': '#269a43', '[5:]': '#e53125'}, font_size=58).scale(3)\n        self.add(text1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the word \"Google\" with each letter colored to match the official Google logo:\n\n- \"G\" in blue (#3174f0)\n- \"o\" in red (#e53125)\n- The second \"o\" in yellow (#fbb003)\n- \"g\" in blue (#3174f0)\n- \"l\" in green (#269a43)\n- \"e\" in red (#e53125)\n\nThe text is large and prominently centered on the screen, scaled up for emphasis."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TextMoreCustomization(Scene):\n    def construct(self):\n        text1 = Text(\n            'Google',\n            t2c={'[:1]': '#3174f0', '[1:2]': '#e53125',\n                 '[2:3]': '#fbb003', '[3:4]': '#3174f0',\n                 '[4:5]': '#269a43', '[5:]': '#e53125'}, font_size=58).scale(3)\n        self.add(text1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three colored circles: red on the left, green in the center, and blue on the right. Initially, the red and green circles are grouped together, and the blue circle is in a separate group. After a pause, the blue circle is added to the first group, and the entire group shifts downward. Then, the blue circle is removed from the group, and the two groups animate separately\u2014one shifting left and the other shifting up. Next, all three circles shift right together. Finally, only the green and blue circles (excluding the red) shift right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AddToVGroup(Scene):\n    def construct(self):\n        circle_red = Circle(color=RED)\n        circle_green = Circle(color=GREEN)\n        circle_blue = Circle(color=BLUE)\n        circle_red.shift(LEFT)\n        circle_blue.shift(RIGHT)\n        gr = VGroup(circle_red, circle_green)\n        gr2 = VGroup(circle_blue) # Constructor uses add directly\n        self.add(gr,gr2)\n        self.wait()\n        gr += gr2 # Add group to another\n        self.play(\n            gr.animate.shift(DOWN),\n        )\n        gr -= gr2 # Remove group\n        self.play( # Animate groups separately\n            gr.animate.shift(LEFT),\n            gr2.animate.shift(UP),\n        )\n        self.play( #Animate groups without modification\n            (gr+gr2).animate.shift(RIGHT)\n        )\n        self.play( # Animate group without component\n            (gr-circle_red).animate.shift(RIGHT)\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three colored circles: red on the left, green in the center, and blue on the right. Initially, the red and green circles are grouped together, and the blue circle is in a separate group. After a pause, the blue circle is added to the first group, and the entire group shifts downward. Then, the blue circle is removed from the group, and the two groups animate separately\u2014one shifting left and the other shifting up. Next, all three circles shift right together. Finally, only the green and blue circles (excluding the red) shift right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AddToVGroup(Scene):\n    def construct(self):\n        circle_red = Circle(color=RED)\n        circle_green = Circle(color=GREEN)\n        circle_blue = Circle(color=BLUE)\n        circle_red.shift(LEFT)\n        circle_blue.shift(RIGHT)\n        gr = VGroup(circle_red, circle_green)\n        gr2 = VGroup(circle_blue) # Constructor uses add directly\n        self.add(gr,gr2)\n        self.wait()\n        gr += gr2 # Add group to another\n        self.play(\n            gr.animate.shift(DOWN),\n        )\n        gr -= gr2 # Remove group\n        self.play( # Animate groups separately\n            gr.animate.shift(LEFT),\n            gr2.animate.shift(UP),\n        )\n        self.play( #Animate groups without modification\n            (gr+gr2).animate.shift(RIGHT)\n        )\n        self.play( # Animate group without component\n            (gr-circle_red).animate.shift(RIGHT)\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display three colored circles: red on the left, green in the center, and blue on the right. Initially, the red and green circles are grouped together, and the blue circle is in a separate group. After a pause, the blue circle is added to the first group, and the entire group shifts downward. Then, the blue circle is removed from the group, and the two groups animate separately\u2014one shifting left and the other shifting up. Next, all three circles shift right together. Finally, only the green and blue circles (excluding the red) shift right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AddToVGroup(Scene):\n    def construct(self):\n        circle_red = Circle(color=RED)\n        circle_green = Circle(color=GREEN)\n        circle_blue = Circle(color=BLUE)\n        circle_red.shift(LEFT)\n        circle_blue.shift(RIGHT)\n        gr = VGroup(circle_red, circle_green)\n        gr2 = VGroup(circle_blue) # Constructor uses add directly\n        self.add(gr,gr2)\n        self.wait()\n        gr += gr2 # Add group to another\n        self.play(\n            gr.animate.shift(DOWN),\n        )\n        gr -= gr2 # Remove group\n        self.play( # Animate groups separately\n            gr.animate.shift(LEFT),\n            gr2.animate.shift(UP),\n        )\n        self.play( #Animate groups without modification\n            (gr+gr2).animate.shift(RIGHT)\n        )\n        self.play( # Animate group without component\n            (gr-circle_red).animate.shift(RIGHT)\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a white line from the origin to the left. Show a yellow line from the origin to the left that rotates around the origin. After 2 seconds, reverse the rotation direction of the yellow line for another 2 seconds. "}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RotationUpdater(Scene):\n    def construct(self):\n        def updater_forth(mobj, dt):\n            mobj.rotate_about_origin(dt)\n        def updater_back(mobj, dt):\n            mobj.rotate_about_origin(-dt)\n        line_reference = Line(ORIGIN, LEFT).set_color(WHITE)\n        line_moving = Line(ORIGIN, LEFT).set_color(YELLOW)\n        line_moving.add_updater(updater_forth)\n        self.add(line_reference, line_moving)\n        self.wait(2)\n        line_moving.remove_updater(updater_forth)\n        line_moving.add_updater(updater_back)\n        self.wait(2)\n        line_moving.remove_updater(updater_back)\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a white line from the origin to the left. Show a yellow line from the origin to the left that rotates around the origin. After 2 seconds, reverse the rotation direction of the yellow line for another 2 seconds. "}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RotationUpdater(Scene):\n    def construct(self):\n        def updater_forth(mobj, dt):\n            mobj.rotate_about_origin(dt)\n        def updater_back(mobj, dt):\n            mobj.rotate_about_origin(-dt)\n        line_reference = Line(ORIGIN, LEFT).set_color(WHITE)\n        line_moving = Line(ORIGIN, LEFT).set_color(YELLOW)\n        line_moving.add_updater(updater_forth)\n        self.add(line_reference, line_moving)\n        self.wait(2)\n        line_moving.remove_updater(updater_forth)\n        line_moving.add_updater(updater_back)\n        self.wait(2)\n        line_moving.remove_updater(updater_back)\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display four different matrix styles arranged in a grid:\n\n- The first is a symbolic matrix with elements like \\( \\pi \\), 0, -1, and 1, enclosed in square brackets.\n- The second is an integer matrix with decimal and whole numbers, enclosed in parentheses.\n- The third is a decimal matrix with values rounded to two decimal places, enclosed in curly braces.\n- The fourth is a matrix of graphical objects including a circle, square, large \\( \\pi \\), and a star, enclosed in angle brackets.\n\nAll matrices appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MatrixExamples(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 0], [-1, 1]])\n        m1 = IntegerMatrix([[1.5, 0.], [12, -1.3]],\n            left_bracket=\"(\",\n            right_bracket=\")\")\n        m2 = DecimalMatrix(\n            [[3.456, 2.122], [33.2244, 12.33]],\n            element_to_mobject_config={\"num_decimal_places\": 2},\n            left_bracket=r\"\\{\",\n            right_bracket=r\"\\}\")\n        m3 = MobjectMatrix(\n            [[Circle().scale(0.3), Square().scale(0.3)],\n            [MathTex(\"\\\\pi\").scale(2), Star().scale(0.3)]],\n            left_bracket=\"\\\\langle\",\n            right_bracket=\"\\\\rangle\")\n        g = Group(m0, m1, m2, m3).arrange_in_grid(buff=2)\n        self.add(g)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display four different matrix styles arranged in a grid:\n\n- The first is a symbolic matrix with elements like \\( \\pi \\), 0, -1, and 1, enclosed in square brackets.\n- The second is an integer matrix with decimal and whole numbers, enclosed in parentheses.\n- The third is a decimal matrix with values rounded to two decimal places, enclosed in curly braces.\n- The fourth is a matrix of graphical objects including a circle, square, large \\( \\pi \\), and a star, enclosed in angle brackets.\n\nAll matrices appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MatrixExamples(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 0], [-1, 1]])\n        m1 = IntegerMatrix([[1.5, 0.], [12, -1.3]],\n            left_bracket=\"(\",\n            right_bracket=\")\")\n        m2 = DecimalMatrix(\n            [[3.456, 2.122], [33.2244, 12.33]],\n            element_to_mobject_config={\"num_decimal_places\": 2},\n            left_bracket=r\"\\{\",\n            right_bracket=r\"\\}\")\n        m3 = MobjectMatrix(\n            [[Circle().scale(0.3), Square().scale(0.3)],\n            [MathTex(\"\\\\pi\").scale(2), Star().scale(0.3)]],\n            left_bracket=\"\\\\langle\",\n            right_bracket=\"\\\\rangle\")\n        g = Group(m0, m1, m2, m3).arrange_in_grid(buff=2)\n        self.add(g)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display four different matrix styles arranged in a grid:\n\n- The first is a symbolic matrix with elements like \\( \\pi \\), 0, -1, and 1, enclosed in square brackets.\n- The second is an integer matrix with decimal and whole numbers, enclosed in parentheses.\n- The third is a decimal matrix with values rounded to two decimal places, enclosed in curly braces.\n- The fourth is a matrix of graphical objects including a circle, square, large \\( \\pi \\), and a star, enclosed in angle brackets.\n\nAll matrices appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MatrixExamples(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 0], [-1, 1]])\n        m1 = IntegerMatrix([[1.5, 0.], [12, -1.3]],\n            left_bracket=\"(\",\n            right_bracket=\")\")\n        m2 = DecimalMatrix(\n            [[3.456, 2.122], [33.2244, 12.33]],\n            element_to_mobject_config={\"num_decimal_places\": 2},\n            left_bracket=r\"\\{\",\n            right_bracket=r\"\\}\")\n        m3 = MobjectMatrix(\n            [[Circle().scale(0.3), Square().scale(0.3)],\n            [MathTex(\"\\\\pi\").scale(2), Star().scale(0.3)]],\n            left_bracket=\"\\\\langle\",\n            right_bracket=\"\\\\rangle\")\n        g = Group(m0, m1, m2, m3).arrange_in_grid(buff=2)\n        self.add(g)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a square with three horizontal double-headed arrows passing through it from left to right. Each arrow has no spacing from the square\u2019s edges and differs in tip size and color:\n\n1. The first arrow is standard.\n2. The second arrow is yellow with shorter tips.\n3. The third arrow is blue with longer tips.\n\nThe arrows are stacked vertically below the square."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DoubleArrowExample2(Scene):\n    def construct(self):\n        box = Square()\n        p1 = box.get_left()\n        p2 = box.get_right()\n        d1 = DoubleArrow(p1, p2, buff=0)\n        d2 = DoubleArrow(p1, p2, buff=0, tip_length=0.2, color=YELLOW)\n        d3 = DoubleArrow(p1, p2, buff=0, tip_length=0.4, color=BLUE)\n        Group(d1, d2, d3).arrange(DOWN)\n        self.add(box, d1, d2, d3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a square with three horizontal double-headed arrows passing through it from left to right. Each arrow has no spacing from the square\u2019s edges and differs in tip size and color:\n\n1. The first arrow is standard.\n2. The second arrow is yellow with shorter tips.\n3. The third arrow is blue with longer tips.\n\nThe arrows are stacked vertically below the square."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DoubleArrowExample2(Scene):\n    def construct(self):\n        box = Square()\n        p1 = box.get_left()\n        p2 = box.get_right()\n        d1 = DoubleArrow(p1, p2, buff=0)\n        d2 = DoubleArrow(p1, p2, buff=0, tip_length=0.2, color=YELLOW)\n        d3 = DoubleArrow(p1, p2, buff=0, tip_length=0.4, color=BLUE)\n        Group(d1, d2, d3).arrange(DOWN)\n        self.add(box, d1, d2, d3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a square with three horizontal double-headed arrows passing through it from left to right. Each arrow has no spacing from the square\u2019s edges and differs in tip size and color:\n\n1. The first arrow is standard.\n2. The second arrow is yellow with shorter tips.\n3. The third arrow is blue with longer tips.\n\nThe arrows are stacked vertically below the square."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DoubleArrowExample2(Scene):\n    def construct(self):\n        box = Square()\n        p1 = box.get_left()\n        p2 = box.get_right()\n        d1 = DoubleArrow(p1, p2, buff=0)\n        d2 = DoubleArrow(p1, p2, buff=0, tip_length=0.2, color=YELLOW)\n        d3 = DoubleArrow(p1, p2, buff=0, tip_length=0.4, color=BLUE)\n        Group(d1, d2, d3).arrange(DOWN)\n        self.add(box, d1, d2, d3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of coordinate axes ranging from 0 to 8 on the x-axis and 0 to 5 on the y-axis. A label reading \u201c\\( y \\)-values\u201d is placed to the left of the y-axis, rotated vertically and slightly offset outward to clearly indicate the axis it describes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetYAxisLabelExample(Scene):\n    def construct(self):\n        ax = Axes(x_range=(0, 8), y_range=(0, 5), x_length=8, y_length=5)\n        y_label = ax.get_y_axis_label(\n            Tex(\"$y$-values\").scale(0.65).rotate(90 * DEGREES),\n            edge=LEFT,\n            direction=LEFT,\n            buff=0.3,\n        )\n        self.add(ax, y_label)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of coordinate axes ranging from 0 to 8 on the x-axis and 0 to 5 on the y-axis. A label reading \u201c\\( y \\)-values\u201d is placed to the left of the y-axis, rotated vertically and slightly offset outward to clearly indicate the axis it describes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetYAxisLabelExample(Scene):\n    def construct(self):\n        ax = Axes(x_range=(0, 8), y_range=(0, 5), x_length=8, y_length=5)\n        y_label = ax.get_y_axis_label(\n            Tex(\"$y$-values\").scale(0.65).rotate(90 * DEGREES),\n            edge=LEFT,\n            direction=LEFT,\n            buff=0.3,\n        )\n        self.add(ax, y_label)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a set of coordinate axes ranging from 0 to 8 on the x-axis and 0 to 5 on the y-axis. A label reading \u201c\\( y \\)-values\u201d is placed to the left of the y-axis, rotated vertically and slightly offset outward to clearly indicate the axis it describes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetYAxisLabelExample(Scene):\n    def construct(self):\n        ax = Axes(x_range=(0, 8), y_range=(0, 5), x_length=8, y_length=5)\n        y_label = ax.get_y_axis_label(\n            Tex(\"$y$-values\").scale(0.65).rotate(90 * DEGREES),\n            edge=LEFT,\n            direction=LEFT,\n            buff=0.3,\n        )\n        self.add(ax, y_label)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a square using a custom class that overrides the default `FadeIn` animation. Instead of fading in, the square is drawn using the `Create` animation when the scene plays."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MySquare(Square):\n    @override_animation(FadeIn)\n    def _fade_in_override(self, **kwargs):\n        return Create(self, **kwargs)\n\nclass OverrideAnimationExample(Scene):\n    def construct(self):\n        self.play(FadeIn(MySquare()))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a square using a custom class that overrides the default `FadeIn` animation. Instead of fading in, the square is drawn using the `Create` animation when the scene plays."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MySquare(Square):\n    @override_animation(FadeIn)\n    def _fade_in_override(self, **kwargs):\n        return Create(self, **kwargs)\n\nclass OverrideAnimationExample(Scene):\n    def construct(self):\n        self.play(FadeIn(MySquare()))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three rectangles arranged horizontally:\n\n1. A wide rectangle with a grid overlay spaced at 1.0 units horizontally and 0.5 units vertically.\n2. A tall, narrow rectangle without a grid.\n3. A square-shaped rectangle with a 1\u00d71 grid overlay and thinner grid lines, showing a more compact and evenly divided layout."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RectangleExample(Scene):\n    def construct(self):\n        rect1 = Rectangle(width=4.0, height=2.0, grid_xstep=1.0, grid_ystep=0.5)\n        rect2 = Rectangle(width=1.0, height=4.0)\n        rect3 = Rectangle(width=2.0, height=2.0, grid_xstep=1.0, grid_ystep=1.0)\n        rect3.grid_lines.set_stroke(width=1)\n\n        rects = Group(rect1, rect2, rect3).arrange(buff=1)\n        self.add(rects)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three rectangles arranged horizontally:\n\n1. A wide rectangle with a grid overlay spaced at 1.0 units horizontally and 0.5 units vertically.\n2. A tall, narrow rectangle without a grid.\n3. A square-shaped rectangle with a 1\u00d71 grid overlay and thinner grid lines, showing a more compact and evenly divided layout."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RectangleExample(Scene):\n    def construct(self):\n        rect1 = Rectangle(width=4.0, height=2.0, grid_xstep=1.0, grid_ystep=0.5)\n        rect2 = Rectangle(width=1.0, height=4.0)\n        rect3 = Rectangle(width=2.0, height=2.0, grid_xstep=1.0, grid_ystep=1.0)\n        rect3.grid_lines.set_stroke(width=1)\n\n        rects = Group(rect1, rect2, rect3).arrange(buff=1)\n        self.add(rects)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display three rectangles arranged horizontally:\n\n1. A wide rectangle with a grid overlay spaced at 1.0 units horizontally and 0.5 units vertically.\n2. A tall, narrow rectangle without a grid.\n3. A square-shaped rectangle with a 1\u00d71 grid overlay and thinner grid lines, showing a more compact and evenly divided layout."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RectangleExample(Scene):\n    def construct(self):\n        rect1 = Rectangle(width=4.0, height=2.0, grid_xstep=1.0, grid_ystep=0.5)\n        rect2 = Rectangle(width=1.0, height=4.0)\n        rect3 = Rectangle(width=2.0, height=2.0, grid_xstep=1.0, grid_ystep=1.0)\n        rect3.grid_lines.set_stroke(width=1)\n\n        rects = Group(rect1, rect2, rect3).arrange(buff=1)\n        self.add(rects)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a large white number \u201c0\u201d centered on the screen. Animate the number counting smoothly from 0 to 100 over four seconds, keeping it centered throughout the animation. Then pause."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Count(Animation):\n    def __init__(self, number: DecimalNumber, start: float, end: float, **kwargs) -> None:\n        # Pass number as the mobject of the animation\n        super().__init__(number,  **kwargs)\n        # Set start and end\n        self.start = start\n        self.end = end\n\n    def interpolate_mobject(self, alpha: float) -> None:\n        # Set value of DecimalNumber according to alpha\n        value = self.start + (alpha * (self.end - self.start))\n        self.mobject.set_value(value)\n\n\nclass CountingScene(Scene):\n    def construct(self):\n        # Create Decimal Number and add it to scene\n        number = DecimalNumber().set_color(WHITE).scale(5)\n        # Add an updater to keep the DecimalNumber centered as its value changes\n        number.add_updater(lambda number: number.move_to(ORIGIN))\n\n        self.add(number)\n\n        self.wait()\n\n        # Play the Count Animation to count from 0 to 100 in 4 seconds\n        self.play(Count(number, 0, 100), run_time=4, rate_func=linear)\n\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a large white number \u201c0\u201d centered on the screen. Animate the number counting smoothly from 0 to 100 over four seconds, keeping it centered throughout the animation. Then pause."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Count(Animation):\n    def __init__(self, number: DecimalNumber, start: float, end: float, **kwargs) -> None:\n        # Pass number as the mobject of the animation\n        super().__init__(number,  **kwargs)\n        # Set start and end\n        self.start = start\n        self.end = end\n\n    def interpolate_mobject(self, alpha: float) -> None:\n        # Set value of DecimalNumber according to alpha\n        value = self.start + (alpha * (self.end - self.start))\n        self.mobject.set_value(value)\n\n\nclass CountingScene(Scene):\n    def construct(self):\n        # Create Decimal Number and add it to scene\n        number = DecimalNumber().set_color(WHITE).scale(5)\n        # Add an updater to keep the DecimalNumber centered as its value changes\n        number.add_updater(lambda number: number.move_to(ORIGIN))\n\n        self.add(number)\n\n        self.wait()\n\n        # Play the Count Animation to count from 0 to 100 in 4 seconds\n        self.play(Count(number, 0, 100), run_time=4, rate_func=linear)\n\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two lines originating from the same point: one extending horizontally to the right, and the other rotated upward at an 80-degree angle. An angle arc is drawn between them with a radius of 1.5 units, and a red dot marks the midpoint of this angle arc. The scene pauses briefly to display the full construction."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AngleMidPoint(Scene):\n    def construct(self):\n        line1 = Line(ORIGIN, 2*RIGHT)\n        line2 = Line(ORIGIN, 2*RIGHT).rotate_about_origin(80*DEGREES)\n\n        a = Angle(line1, line2, radius=1.5, other_angle=False)\n        d = Dot(a.get_midpoint()).set_color(RED)\n\n        self.add(line1, line2, a, d)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two lines originating from the same point: one extending horizontally to the right, and the other rotated upward at an 80-degree angle. An angle arc is drawn between them with a radius of 1.5 units, and a red dot marks the midpoint of this angle arc. The scene pauses briefly to display the full construction."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AngleMidPoint(Scene):\n    def construct(self):\n        line1 = Line(ORIGIN, 2*RIGHT)\n        line2 = Line(ORIGIN, 2*RIGHT).rotate_about_origin(80*DEGREES)\n\n        a = Angle(line1, line2, radius=1.5, other_angle=False)\n        d = Dot(a.get_midpoint()).set_color(RED)\n\n        self.add(line1, line2, a, d)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display two lines originating from the same point: one extending horizontally to the right, and the other rotated upward at an 80-degree angle. An angle arc is drawn between them with a radius of 1.5 units, and a red dot marks the midpoint of this angle arc. The scene pauses briefly to display the full construction."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AngleMidPoint(Scene):\n    def construct(self):\n        line1 = Line(ORIGIN, 2*RIGHT)\n        line2 = Line(ORIGIN, 2*RIGHT).rotate_about_origin(80*DEGREES)\n\n        a = Angle(line1, line2, radius=1.5, other_angle=False)\n        d = Dot(a.get_midpoint()).set_color(RED)\n\n        self.add(line1, line2, a, d)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D cylinder with a radius of 2 units and a height of 3 units, centered in the scene. The cylinder is placed within a 3D coordinate system for spatial reference. The camera is set at a 75\u00b0 vertical angle and a 30\u00b0 horizontal angle, providing a tilted view that clearly shows the cylindrical shape and its proportions."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleCylinder(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        cylinder = Cylinder(radius=2, height=3)\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(axes, cylinder)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D cylinder with a radius of 2 units and a height of 3 units, centered in the scene. The cylinder is placed within a 3D coordinate system for spatial reference. The camera is set at a 75\u00b0 vertical angle and a 30\u00b0 horizontal angle, providing a tilted view that clearly shows the cylindrical shape and its proportions."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleCylinder(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        cylinder = Cylinder(radius=2, height=3)\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(axes, cylinder)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 3D cylinder with a radius of 2 units and a height of 3 units, centered in the scene. The cylinder is placed within a 3D coordinate system for spatial reference. The camera is set at a 75\u00b0 vertical angle and a 30\u00b0 horizontal angle, providing a tilted view that clearly shows the cylindrical shape and its proportions."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleCylinder(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        cylinder = Cylinder(radius=2, height=3)\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(axes, cylinder)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 table with row and column labels. The column labels \u201cC1\u201d and \u201cC2\u201d are each assigned a randomly chosen bright color, making them visually distinct from the rest of the table."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetColLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        lab = table.get_col_labels()\n        for item in lab:\n            item.set_color(random_bright_color())\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 table with row and column labels. The column labels \u201cC1\u201d and \u201cC2\u201d are each assigned a randomly chosen bright color, making them visually distinct from the rest of the table."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetColLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        lab = table.get_col_labels()\n        for item in lab:\n            item.set_color(random_bright_color())\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 2\u00d72 table with row and column labels. The column labels \u201cC1\u201d and \u201cC2\u201d are each assigned a randomly chosen bright color, making them visually distinct from the rest of the table."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetColLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        lab = table.get_col_labels()\n        for item in lab:\n            item.set_color(random_bright_color())\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a large dot that continuously moves horizontally across the screen from left to right. The dot's position is controlled by a `ValueTracker` that automatically increases over time using an updater. The motion is smooth and continuous during the 2-second wait period."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ValueTrackerExample(Scene):\n    def construct(self):\n        tracker = ValueTracker(0)\n        label = Dot(radius=3).add_updater(lambda x : x.set_x(tracker.get_value()))\n        self.add(label)\n        self.add(tracker)\n        tracker.add_updater(lambda mobject, dt: mobject.increment_value(dt))\n        self.wait(2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a large dot that continuously moves horizontally across the screen from left to right. The dot's position is controlled by a `ValueTracker` that automatically increases over time using an updater. The motion is smooth and continuous during the 2-second wait period."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ValueTrackerExample(Scene):\n    def construct(self):\n        tracker = ValueTracker(0)\n        label = Dot(radius=3).add_updater(lambda x : x.set_x(tracker.get_value()))\n        self.add(label)\n        self.add(tracker)\n        tracker.add_updater(lambda mobject, dt: mobject.increment_value(dt))\n        self.wait(2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a large dot that continuously moves horizontally across the screen from left to right. The dot's position is controlled by a `ValueTracker` that automatically increases over time using an updater. The motion is smooth and continuous during the 2-second wait period."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ValueTrackerExample(Scene):\n    def construct(self):\n        tracker = ValueTracker(0)\n        label = Dot(radius=3).add_updater(lambda x : x.set_x(tracker.get_value()))\n        self.add(label)\n        self.add(tracker)\n        tracker.add_updater(lambda mobject, dt: mobject.increment_value(dt))\n        self.wait(2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the equation \u201cx\u00b2 + y\u00b2 = z\u00b2\u201d at the center of the screen. After a short pause, the variables are replaced with \u201ca\u00b2 + b\u00b2 = c\u00b2\u201d using a smooth transformation that matches corresponding parts. Then, the equation rearranges into \u201ca\u00b2 = c\u00b2 - b\u00b2,\u201d again transforming matching components to visually demonstrate the algebraic manipulation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MatchingEquationParts(Scene):\n    def construct(self):\n        variables = VGroup(MathTex(\"a\"), MathTex(\"b\"), MathTex(\"c\")).arrange_submobjects().shift(UP)\n\n        eq1 = MathTex(\"{{x}}^2\", \"+\", \"{{y}}^2\", \"=\", \"{{z}}^2\")\n        eq2 = MathTex(\"{{a}}^2\", \"+\", \"{{b}}^2\", \"=\", \"{{c}}^2\")\n        eq3 = MathTex(\"{{a}}^2\", \"=\", \"{{c}}^2\", \"-\", \"{{b}}^2\")\n\n        self.add(eq1)\n        self.wait(0.5)\n        self.play(TransformMatchingTex(Group(eq1, variables), eq2))\n        self.wait(0.5)\n        self.play(TransformMatchingTex(eq2, eq3))\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the equation \u201cx\u00b2 + y\u00b2 = z\u00b2\u201d at the center of the screen. After a short pause, the variables are replaced with \u201ca\u00b2 + b\u00b2 = c\u00b2\u201d using a smooth transformation that matches corresponding parts. Then, the equation rearranges into \u201ca\u00b2 = c\u00b2 - b\u00b2,\u201d again transforming matching components to visually demonstrate the algebraic manipulation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MatchingEquationParts(Scene):\n    def construct(self):\n        variables = VGroup(MathTex(\"a\"), MathTex(\"b\"), MathTex(\"c\")).arrange_submobjects().shift(UP)\n\n        eq1 = MathTex(\"{{x}}^2\", \"+\", \"{{y}}^2\", \"=\", \"{{z}}^2\")\n        eq2 = MathTex(\"{{a}}^2\", \"+\", \"{{b}}^2\", \"=\", \"{{c}}^2\")\n        eq3 = MathTex(\"{{a}}^2\", \"=\", \"{{c}}^2\", \"-\", \"{{b}}^2\")\n\n        self.add(eq1)\n        self.wait(0.5)\n        self.play(TransformMatchingTex(Group(eq1, variables), eq2))\n        self.wait(0.5)\n        self.play(TransformMatchingTex(eq2, eq3))\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the equation \u201cx\u00b2 + y\u00b2 = z\u00b2\u201d at the center of the screen. After a short pause, the variables are replaced with \u201ca\u00b2 + b\u00b2 = c\u00b2\u201d using a smooth transformation that matches corresponding parts. Then, the equation rearranges into \u201ca\u00b2 = c\u00b2 - b\u00b2,\u201d again transforming matching components to visually demonstrate the algebraic manipulation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MatchingEquationParts(Scene):\n    def construct(self):\n        variables = VGroup(MathTex(\"a\"), MathTex(\"b\"), MathTex(\"c\")).arrange_submobjects().shift(UP)\n\n        eq1 = MathTex(\"{{x}}^2\", \"+\", \"{{y}}^2\", \"=\", \"{{z}}^2\")\n        eq2 = MathTex(\"{{a}}^2\", \"+\", \"{{b}}^2\", \"=\", \"{{c}}^2\")\n        eq3 = MathTex(\"{{a}}^2\", \"=\", \"{{c}}^2\", \"-\", \"{{b}}^2\")\n\n        self.add(eq1)\n        self.wait(0.5)\n        self.play(TransformMatchingTex(Group(eq1, variables), eq2))\n        self.wait(0.5)\n        self.play(TransformMatchingTex(eq2, eq3))\n        self.wait(0.5)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a mathematical expression representing the Taylor series expansion of \\( e^x \\). All instances of the variable \\( x \\) in the equation are colored yellow."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass IncorrectLaTeXSubstringColoring(Scene):\n    def construct(self):\n        equation = MathTex(\n            r\"e^x = x^0 + x^1 + \\frac{1}{2} x^2 + \\frac{1}{6} x^3 + \\cdots + \\frac{1}{n!} x^n + \\cdots\"\n        )\n        equation.set_color_by_tex(\"x\", YELLOW)\n        self.add(equation)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a mathematical expression representing the Taylor series expansion of \\( e^x \\). All instances of the variable \\( x \\) in the equation are colored yellow."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass IncorrectLaTeXSubstringColoring(Scene):\n    def construct(self):\n        equation = MathTex(\n            r\"e^x = x^0 + x^1 + \\frac{1}{2} x^2 + \\frac{1}{6} x^3 + \\cdots + \\frac{1}{n!} x^n + \\cdots\"\n        )\n        equation.set_color_by_tex(\"x\", YELLOW)\n        self.add(equation)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a mathematical expression representing the Taylor series expansion of \\( e^x \\). All instances of the variable \\( x \\) in the equation are colored yellow."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass IncorrectLaTeXSubstringColoring(Scene):\n    def construct(self):\n        equation = MathTex(\n            r\"e^x = x^0 + x^1 + \\frac{1}{2} x^2 + \\frac{1}{6} x^3 + \\cdots + \\frac{1}{n!} x^n + \\cdots\"\n        )\n        equation.set_color_by_tex(\"x\", YELLOW)\n        self.add(equation)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a large circle with a double-headed arrow passing through it horizontally from left to right. Above it, another double-headed arrow is shown with both ends featuring filled circular tips. The two elements are vertically stacked with space between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nfrom manim.mobject.geometry.tips import ArrowCircleFilledTip\nclass DoubleArrowExample(Scene):\n    def construct(self):\n        circle = Circle(radius=2.0)\n        d_arrow = DoubleArrow(start=circle.get_left(), end=circle.get_right())\n        d_arrow_2 = DoubleArrow(tip_shape_end=ArrowCircleFilledTip, tip_shape_start=ArrowCircleFilledTip)\n        group = Group(Group(circle, d_arrow), d_arrow_2).arrange(UP, buff=1)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a large circle with a double-headed arrow passing through it horizontally from left to right. Above it, another double-headed arrow is shown with both ends featuring filled circular tips. The two elements are vertically stacked with space between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nfrom manim.mobject.geometry.tips import ArrowCircleFilledTip\nclass DoubleArrowExample(Scene):\n    def construct(self):\n        circle = Circle(radius=2.0)\n        d_arrow = DoubleArrow(start=circle.get_left(), end=circle.get_right())\n        d_arrow_2 = DoubleArrow(tip_shape_end=ArrowCircleFilledTip, tip_shape_start=ArrowCircleFilledTip)\n        group = Group(Group(circle, d_arrow), d_arrow_2).arrange(UP, buff=1)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 matrix  \n\\[\n\\begin{bmatrix}\n\\pi & 3 \\\\\n1 & 5\n\\end{bmatrix}\n\\]  \nwith a surrounding rectangle highlighting the second row (containing the numbers 1 and 5). The matrix and highlight appear on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetRowsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 3], [1, 5]])\n        m0.add(SurroundingRectangle(m0.get_rows()[1]))\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 matrix  \n\\[\n\\begin{bmatrix}\n\\pi & 3 \\\\\n1 & 5\n\\end{bmatrix}\n\\]  \nwith a surrounding rectangle highlighting the second row (containing the numbers 1 and 5). The matrix and highlight appear on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetRowsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 3], [1, 5]])\n        m0.add(SurroundingRectangle(m0.get_rows()[1]))\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a large circle centered on screen with two small squares placed on its edge: one at the top (90 degrees) and one at the bottom (270 degrees)."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PointAtAngleExample(Scene):\n    def construct(self):\n        circle = Circle(radius=2.0)\n        p1 = circle.point_at_angle(PI/2)\n        p2 = circle.point_at_angle(270*DEGREES)\n\n        s1 = Square(side_length=0.25).move_to(p1)\n        s2 = Square(side_length=0.25).move_to(p2)\n        self.add(circle, s1, s2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a large circle centered on screen with two small squares placed on its edge: one at the top (90 degrees) and one at the bottom (270 degrees)."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PointAtAngleExample(Scene):\n    def construct(self):\n        circle = Circle(radius=2.0)\n        p1 = circle.point_at_angle(PI/2)\n        p2 = circle.point_at_angle(270*DEGREES)\n\n        s1 = Square(side_length=0.25).move_to(p1)\n        s2 = Square(side_length=0.25).move_to(p2)\n        self.add(circle, s1, s2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a large circle centered on screen with two small squares placed on its edge: one at the top (90 degrees) and one at the bottom (270 degrees)."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PointAtAngleExample(Scene):\n    def construct(self):\n        circle = Circle(radius=2.0)\n        p1 = circle.point_at_angle(PI/2)\n        p2 = circle.point_at_angle(270*DEGREES)\n\n        s1 = Square(side_length=0.25).move_to(p1)\n        s2 = Square(side_length=0.25).move_to(p2)\n        self.add(circle, s1, s2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a circle centered on the screen, wait for one second, then remove the circle from the screen and wait for another second."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CreatingMobjects(Scene):\n    def construct(self):\n        circle = Circle()\n        self.add(circle)\n        self.wait(1)\n        self.remove(circle)\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a circle centered on the screen, wait for one second, then remove the circle from the screen and wait for another second."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CreatingMobjects(Scene):\n    def construct(self):\n        circle = Circle()\n        self.add(circle)\n        self.wait(1)\n        self.remove(circle)\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a circle centered on the screen, wait for one second, then remove the circle from the screen and wait for another second."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CreatingMobjects(Scene):\n    def construct(self):\n        circle = Circle()\n        self.add(circle)\n        self.wait(1)\n        self.remove(circle)\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two squares arranged vertically. Animate the first square growing outward from its center. Then animate the second square growing from its center as well, with its center point highlighted in red."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GrowFromCenterExample(Scene):\n    def construct(self):\n        squares = [Square() for _ in range(2)]\n        VGroup(*squares).set_x(0).arrange(buff=2)\n        self.play(GrowFromCenter(squares[0]))\n        self.play(GrowFromCenter(squares[1], point_color=RED))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two squares arranged vertically. Animate the first square growing outward from its center. Then animate the second square growing from its center as well, with its center point highlighted in red."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GrowFromCenterExample(Scene):\n    def construct(self):\n        squares = [Square() for _ in range(2)]\n        VGroup(*squares).set_x(0).arrange(buff=2)\n        self.play(GrowFromCenter(squares[0]))\n        self.play(GrowFromCenter(squares[1], point_color=RED))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a square centered on the screen. Rotate the square 45 degrees, then transform it into a circle. Finally, change the circle\u2019s fill to pink with 50% transparency."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnimatedSquareToCircle(Scene):\n    def construct(self):\n        circle = Circle()  # create a circle\n        square = Square()  # create a square\n\n        self.play(Create(square))  # show the square on screen\n        self.play(square.animate.rotate(PI / 4))  # rotate the square\n        self.play(Transform(square, circle))  # transform the square into a circle\n        self.play(\n            square.animate.set_fill(PINK, opacity=0.5)\n        )  # color the circle on screen\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a square centered on the screen. Rotate the square 45 degrees, then transform it into a circle. Finally, change the circle\u2019s fill to pink with 50% transparency."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnimatedSquareToCircle(Scene):\n    def construct(self):\n        circle = Circle()  # create a circle\n        square = Square()  # create a square\n\n        self.play(Create(square))  # show the square on screen\n        self.play(square.animate.rotate(PI / 4))  # rotate the square\n        self.play(Transform(square, circle))  # transform the square into a circle\n        self.play(\n            square.animate.set_fill(PINK, opacity=0.5)\n        )  # color the circle on screen\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a square centered on the screen. Rotate the square 45 degrees, then transform it into a circle. Finally, change the circle\u2019s fill to pink with 50% transparency."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnimatedSquareToCircle(Scene):\n    def construct(self):\n        circle = Circle()  # create a circle\n        square = Square()  # create a square\n\n        self.play(Create(square))  # show the square on screen\n        self.play(square.animate.rotate(PI / 4))  # rotate the square\n        self.play(Transform(square, circle))  # transform the square into a circle\n        self.play(\n            square.animate.set_fill(PINK, opacity=0.5)\n        )  # color the circle on screen\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two mathematical expressions stacked vertically. Both show a right arrow labeled with \\( x^6y^8 \\), but the top one is rendered using `MathTex` (optimized for math), and the bottom one uses `Tex` with inline math formatting."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MathTeXDemo(Scene):\n    def construct(self):\n        rtarrow0 = MathTex(r\"\\xrightarrow{x^6y^8}\", font_size=96)\n        rtarrow1 = Tex(r\"$\\xrightarrow{x^6y^8}$\", font_size=96)\n\n        self.add(VGroup(rtarrow0, rtarrow1).arrange(DOWN))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two mathematical expressions stacked vertically. Both show a right arrow labeled with \\( x^6y^8 \\), but the top one is rendered using `MathTex` (optimized for math), and the bottom one uses `Tex` with inline math formatting."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MathTeXDemo(Scene):\n    def construct(self):\n        rtarrow0 = MathTex(r\"\\xrightarrow{x^6y^8}\", font_size=96)\n        rtarrow1 = Tex(r\"$\\xrightarrow{x^6y^8}$\", font_size=96)\n\n        self.add(VGroup(rtarrow0, rtarrow1).arrange(DOWN))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display two mathematical expressions stacked vertically. Both show a right arrow labeled with \\( x^6y^8 \\), but the top one is rendered using `MathTex` (optimized for math), and the bottom one uses `Tex` with inline math formatting."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MathTeXDemo(Scene):\n    def construct(self):\n        rtarrow0 = MathTex(r\"\\xrightarrow{x^6y^8}\", font_size=96)\n        rtarrow1 = Tex(r\"$\\xrightarrow{x^6y^8}$\", font_size=96)\n\n        self.add(VGroup(rtarrow0, rtarrow1).arrange(DOWN))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three dots arranged horizontally across the screen: a small dot on the left, a default-sized dot in the center, and another default-sized dot on the right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DotExample(Scene):\n    def construct(self):\n        dot1 = Dot(point=LEFT, radius=0.08)\n        dot2 = Dot(point=ORIGIN)\n        dot3 = Dot(point=RIGHT)\n        self.add(dot1,dot2,dot3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three dots arranged horizontally across the screen: a small dot on the left, a default-sized dot in the center, and another default-sized dot on the right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DotExample(Scene):\n    def construct(self):\n        dot1 = Dot(point=LEFT, radius=0.08)\n        dot2 = Dot(point=ORIGIN)\n        dot3 = Dot(point=RIGHT)\n        self.add(dot1,dot2,dot3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display three dots arranged horizontally across the screen: a small dot on the left, a default-sized dot in the center, and another default-sized dot on the right."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DotExample(Scene):\n    def construct(self):\n        dot1 = Dot(point=LEFT, radius=0.08)\n        dot2 = Dot(point=ORIGIN)\n        dot3 = Dot(point=RIGHT)\n        self.add(dot1,dot2,dot3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a decimal table with two rows:\n\n- The first row shows the values of \\( x = [-2, -1, 0, 1, 2] \\).\n- The second row shows the corresponding values of \\( f(x) = e^x \\), each rounded to two decimal places.\n\nThe rows are labeled with LaTeX-style expressions \u201c\\( x \\)\u201d and \u201c\\( f(x) = e^x \\)\u201d, and there is extra horizontal spacing between the columns. The table is centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DecimalTableExample(Scene):\n    def construct(self):\n        x_vals = [-2,-1,0,1,2]\n        y_vals = np.exp(x_vals)\n        t0 = DecimalTable(\n            [x_vals, y_vals],\n            row_labels=[MathTex(\"x\"), MathTex(\"f(x)=e^{x}\")],\n            h_buff=1,\n            element_to_mobject_config={\"num_decimal_places\": 2})\n        self.add(t0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a decimal table with two rows:\n\n- The first row shows the values of \\( x = [-2, -1, 0, 1, 2] \\).\n- The second row shows the corresponding values of \\( f(x) = e^x \\), each rounded to two decimal places.\n\nThe rows are labeled with LaTeX-style expressions \u201c\\( x \\)\u201d and \u201c\\( f(x) = e^x \\)\u201d, and there is extra horizontal spacing between the columns. The table is centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DecimalTableExample(Scene):\n    def construct(self):\n        x_vals = [-2,-1,0,1,2]\n        y_vals = np.exp(x_vals)\n        t0 = DecimalTable(\n            [x_vals, y_vals],\n            row_labels=[MathTex(\"x\"), MathTex(\"f(x)=e^{x}\")],\n            h_buff=1,\n            element_to_mobject_config={\"num_decimal_places\": 2})\n        self.add(t0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a square rotated 45 degrees (appearing as a diamond) centered on the screen. Transform the square into a pink circle with 50% transparency, then fade the circle out."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SquareToCircle(Scene):\n    def construct(self):\n        circle = Circle()  # create a circle\n        circle.set_fill(PINK, opacity=0.5)  # set color and transparency\n\n        square = Square()  # create a square\n        square.rotate(PI / 4)  # rotate a certain amount\n\n        self.play(Create(square))  # animate the creation of the square\n        self.play(Transform(square, circle))  # interpolate the square into the circle\n        self.play(FadeOut(square))  # fade out animation\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a square rotated 45 degrees (appearing as a diamond) centered on the screen. Transform the square into a pink circle with 50% transparency, then fade the circle out."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SquareToCircle(Scene):\n    def construct(self):\n        circle = Circle()  # create a circle\n        circle.set_fill(PINK, opacity=0.5)  # set color and transparency\n\n        square = Square()  # create a square\n        square.rotate(PI / 4)  # rotate a certain amount\n\n        self.play(Create(square))  # animate the creation of the square\n        self.play(Transform(square, circle))  # interpolate the square into the circle\n        self.play(FadeOut(square))  # fade out animation\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a square rotated 45 degrees (appearing as a diamond) centered on the screen. Transform the square into a pink circle with 50% transparency, then fade the circle out."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SquareToCircle(Scene):\n    def construct(self):\n        circle = Circle()  # create a circle\n        circle.set_fill(PINK, opacity=0.5)  # set color and transparency\n\n        square = Square()  # create a square\n        square.rotate(PI / 4)  # rotate a certain amount\n\n        self.play(Create(square))  # animate the creation of the square\n        self.play(Transform(square, circle))  # interpolate the square into the circle\n        self.play(FadeOut(square))  # fade out animation\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a circle containing the text \u201chello!\u201d centered inside it. The circle and text are drawn together. Then, the text is smoothly removed using an animation, leaving only the circle visible. Afterward, the scene pauses briefly."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CircleWithContent(VGroup):\n    def __init__(self, content):\n        super().__init__()\n        self.circle = Circle()\n        self.content = content\n        self.add(self.circle, content)\n        content.move_to(self.circle.get_center())\n\n    def clear_content(self):\n        self.remove(self.content)\n        self.content = None\n\n    @override_animate(clear_content)\n    def _clear_content_animation(self, anim_args=None):\n        if anim_args is None:\n            anim_args = {}\n        anim = Uncreate(self.content, **anim_args)\n        self.clear_content()\n        return anim\n\nclass AnimationOverrideExample(Scene):\n    def construct(self):\n        t = Text(\"hello!\")\n        my_mobject = CircleWithContent(t)\n        self.play(Create(my_mobject))\n        self.play(my_mobject.animate.clear_content())\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a circle containing the text \u201chello!\u201d centered inside it. The circle and text are drawn together. Then, the text is smoothly removed using an animation, leaving only the circle visible. Afterward, the scene pauses briefly."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CircleWithContent(VGroup):\n    def __init__(self, content):\n        super().__init__()\n        self.circle = Circle()\n        self.content = content\n        self.add(self.circle, content)\n        content.move_to(self.circle.get_center())\n\n    def clear_content(self):\n        self.remove(self.content)\n        self.content = None\n\n    @override_animate(clear_content)\n    def _clear_content_animation(self, anim_args=None):\n        if anim_args is None:\n            anim_args = {}\n        anim = Uncreate(self.content, **anim_args)\n        self.clear_content()\n        return anim\n\nclass AnimationOverrideExample(Scene):\n    def construct(self):\n        t = Text(\"hello!\")\n        my_mobject = CircleWithContent(t)\n        self.play(Create(my_mobject))\n        self.play(my_mobject.animate.clear_content())\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a circle containing the text \u201chello!\u201d centered inside it. The circle and text are drawn together. Then, the text is smoothly removed using an animation, leaving only the circle visible. Afterward, the scene pauses briefly."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CircleWithContent(VGroup):\n    def __init__(self, content):\n        super().__init__()\n        self.circle = Circle()\n        self.content = content\n        self.add(self.circle, content)\n        content.move_to(self.circle.get_center())\n\n    def clear_content(self):\n        self.remove(self.content)\n        self.content = None\n\n    @override_animate(clear_content)\n    def _clear_content_animation(self, anim_args=None):\n        if anim_args is None:\n            anim_args = {}\n        anim = Uncreate(self.content, **anim_args)\n        self.clear_content()\n        return anim\n\nclass AnimationOverrideExample(Scene):\n    def construct(self):\n        t = Text(\"hello!\")\n        my_mobject = CircleWithContent(t)\n        self.play(Create(my_mobject))\n        self.play(my_mobject.animate.clear_content())\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 table with row and column labels. The row labels \u201cR1\u201d and \u201cR2\u201d are each assigned a randomly chosen bright color, making them stand out from the rest of the table."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetRowLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        lab = table.get_row_labels()\n        for item in lab:\n            item.set_color(random_bright_color())\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 table with row and column labels. The row labels \u201cR1\u201d and \u201cR2\u201d are each assigned a randomly chosen bright color, making them stand out from the rest of the table."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetRowLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        lab = table.get_row_labels()\n        for item in lab:\n            item.set_color(random_bright_color())\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a coordinate grid with a red sine curve plotted across it. A blue dot moves smoothly along the curve from left to right, while a yellow tangent line dynamically updates to stay tangent to the curve at the dot\u2019s position. The animation visually demonstrates how the tangent line changes as it follows the sine wave."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TangentAnimation(Scene):\n    def construct(self):\n        ax = Axes()\n        sine = ax.plot(np.sin, color=RED)\n        alpha = ValueTracker(0)\n        point = always_redraw(\n            lambda: Dot(\n                sine.point_from_proportion(alpha.get_value()),\n                color=BLUE\n            )\n        )\n        tangent = always_redraw(\n            lambda: TangentLine(\n                sine,\n                alpha=alpha.get_value(),\n                color=YELLOW,\n                length=4\n            )\n        )\n        self.add(ax, sine, point, tangent)\n        self.play(alpha.animate.set_value(1), rate_func=linear, run_time=2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a coordinate grid with a red sine curve plotted across it. A blue dot moves smoothly along the curve from left to right, while a yellow tangent line dynamically updates to stay tangent to the curve at the dot\u2019s position. The animation visually demonstrates how the tangent line changes as it follows the sine wave."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TangentAnimation(Scene):\n    def construct(self):\n        ax = Axes()\n        sine = ax.plot(np.sin, color=RED)\n        alpha = ValueTracker(0)\n        point = always_redraw(\n            lambda: Dot(\n                sine.point_from_proportion(alpha.get_value()),\n                color=BLUE\n            )\n        )\n        tangent = always_redraw(\n            lambda: TangentLine(\n                sine,\n                alpha=alpha.get_value(),\n                color=YELLOW,\n                length=4\n            )\n        )\n        self.add(ax, sine, point, tangent)\n        self.play(alpha.animate.set_value(1), rate_func=linear, run_time=2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a coordinate grid with a red sine curve plotted across it. A blue dot moves smoothly along the curve from left to right, while a yellow tangent line dynamically updates to stay tangent to the curve at the dot\u2019s position. The animation visually demonstrates how the tangent line changes as it follows the sine wave."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TangentAnimation(Scene):\n    def construct(self):\n        ax = Axes()\n        sine = ax.plot(np.sin, color=RED)\n        alpha = ValueTracker(0)\n        point = always_redraw(\n            lambda: Dot(\n                sine.point_from_proportion(alpha.get_value()),\n                color=BLUE\n            )\n        )\n        tangent = always_redraw(\n            lambda: TangentLine(\n                sine,\n                alpha=alpha.get_value(),\n                color=YELLOW,\n                length=4\n            )\n        )\n        self.add(ax, sine, point, tangent)\n        self.play(alpha.animate.set_value(1), rate_func=linear, run_time=2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of axes with labeled coordinates, then show a small circle positioned in the upper right quadrant. A matrix label appears to the right of the circle, showing the circle\u2019s coordinates relative to the axes. A dot marks the rightmost point of the circle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PointToCoordsExample(Scene):\n    def construct(self):\n        ax = Axes(x_range=[0, 10, 2]).add_coordinates()\n        circ = Circle(radius=0.5).shift(UR * 2)\n\n        # get the coordinates of the circle with respect to the axes\n        coords = np.around(ax.point_to_coords(circ.get_right()), decimals=2)\n\n        label = (\n            Matrix([[coords[0]], [coords[1]]]).scale(0.75).next_to(circ, RIGHT)\n        )\n\n        self.add(ax, circ, label, Dot(circ.get_right()))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of axes with labeled coordinates, then show a small circle positioned in the upper right quadrant. A matrix label appears to the right of the circle, showing the circle\u2019s coordinates relative to the axes. A dot marks the rightmost point of the circle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PointToCoordsExample(Scene):\n    def construct(self):\n        ax = Axes(x_range=[0, 10, 2]).add_coordinates()\n        circ = Circle(radius=0.5).shift(UR * 2)\n\n        # get the coordinates of the circle with respect to the axes\n        coords = np.around(ax.point_to_coords(circ.get_right()), decimals=2)\n\n        label = (\n            Matrix([[coords[0]], [coords[1]]]).scale(0.75).next_to(circ, RIGHT)\n        )\n\n        self.add(ax, circ, label, Dot(circ.get_right()))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two arrows arranged vertically: one pointing horizontally from left to right, and the other diagonally from bottom right to top left. Animate the first arrow growing from left to right. Then animate the second arrow growing along its diagonal path with its starting point highlighted in red."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GrowArrowExample(Scene):\n    def construct(self):\n        arrows = [Arrow(2 * LEFT, 2 * RIGHT), Arrow(2 * DR, 2 * UL)]\n        VGroup(*arrows).set_x(0).arrange(buff=2)\n        self.play(GrowArrow(arrows[0]))\n        self.play(GrowArrow(arrows[1], point_color=RED))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two arrows arranged vertically: one pointing horizontally from left to right, and the other diagonally from bottom right to top left. Animate the first arrow growing from left to right. Then animate the second arrow growing along its diagonal path with its starting point highlighted in red."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GrowArrowExample(Scene):\n    def construct(self):\n        arrows = [Arrow(2 * LEFT, 2 * RIGHT), Arrow(2 * DR, 2 * UL)]\n        VGroup(*arrows).set_x(0).arrange(buff=2)\n        self.play(GrowArrow(arrows[0]))\n        self.play(GrowArrow(arrows[1], point_color=RED))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display two arrows arranged vertically: one pointing horizontally from left to right, and the other diagonally from bottom right to top left. Animate the first arrow growing from left to right. Then animate the second arrow growing along its diagonal path with its starting point highlighted in red."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GrowArrowExample(Scene):\n    def construct(self):\n        arrows = [Arrow(2 * LEFT, 2 * RIGHT), Arrow(2 * DR, 2 * UL)]\n        VGroup(*arrows).set_x(0).arrange(buff=2)\n        self.play(GrowArrow(arrows[0]))\n        self.play(GrowArrow(arrows[1], point_color=RED))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \"Hello World!\" at the center of the screen, then animate it shrinking rapidly into a single point at the center, creating a disappearing effect as if it's collapsing inward."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShrinkToCenterExample(Scene):\n    def construct(self):\n        self.play(ShrinkToCenter(Text(\"Hello World!\")))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \"Hello World!\" at the center of the screen, then animate it shrinking rapidly into a single point at the center, creating a disappearing effect as if it's collapsing inward."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShrinkToCenterExample(Scene):\n    def construct(self):\n        self.play(ShrinkToCenter(Text(\"Hello World!\")))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the text \"Hello World!\" at the center of the screen, then animate it shrinking rapidly into a single point at the center, creating a disappearing effect as if it's collapsing inward."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShrinkToCenterExample(Scene):\n    def construct(self):\n        self.play(ShrinkToCenter(Text(\"Hello World!\")))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a coordinate grid using a number plane. Then, create a brace between two points: one at the origin and the other at position (1, 2). The brace appears connecting these two points diagonally, and the scene pauses for two seconds to show the result."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BraceBPExample(Scene):\n    def construct(self):\n        p1 = [0,0,0]\n        p2 = [1,2,0]\n        brace = BraceBetweenPoints(p1,p2)\n        self.play(Create(NumberPlane()))\n        self.play(Create(brace))\n        self.wait(2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a coordinate grid using a number plane. Then, create a brace between two points: one at the origin and the other at position (1, 2). The brace appears connecting these two points diagonally, and the scene pauses for two seconds to show the result."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BraceBPExample(Scene):\n    def construct(self):\n        p1 = [0,0,0]\n        p2 = [1,2,0]\n        brace = BraceBetweenPoints(p1,p2)\n        self.play(Create(NumberPlane()))\n        self.play(Create(brace))\n        self.wait(2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a coordinate grid using a number plane. Then, create a brace between two points: one at the origin and the other at position (1, 2). The brace appears connecting these two points diagonally, and the scene pauses for two seconds to show the result."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BraceBPExample(Scene):\n    def construct(self):\n        p1 = [0,0,0]\n        p2 = [1,2,0]\n        brace = BraceBetweenPoints(p1,p2)\n        self.play(Create(NumberPlane()))\n        self.play(Create(brace))\n        self.wait(2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the x and y axes with labels for \\(\\pi\\), \\(2\\pi\\), \\(3\\pi\\), and \\(4\\pi\\) on the x-axis. Show a unit circle centered at (-4, 0). Move a yellow dot around the circle, with a blue line connecting the origin to the dot and a yellow line from the dot to the sine curve which is drawn dynamically on the plane as the dot moves around the circle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SineCurveUnitCircle(Scene):\n    # contributed by heejin_park, https://infograph.tistory.com/230\n    def construct(self):\n        self.show_axis()\n        self.show_circle()\n        self.move_dot_and_draw_curve()\n        self.wait()\n\n    def show_axis(self):\n        x_start = np.array([-6,0,0])\n        x_end = np.array([6,0,0])\n\n        y_start = np.array([-4,-2,0])\n        y_end = np.array([-4,2,0])\n\n        x_axis = Line(x_start, x_end)\n        y_axis = Line(y_start, y_end)\n\n        self.add(x_axis, y_axis)\n        self.add_x_labels()\n\n        self.origin_point = np.array([-4,0,0])\n        self.curve_start = np.array([-3,0,0])\n\n    def add_x_labels(self):\n        x_labels = [\n            MathTex(r\"\\pi\"), MathTex(r\"2 \\pi\"),\n            MathTex(r\"3 \\pi\"), MathTex(r\"4 \\pi\"),\n        ]\n\n        for i in range(len(x_labels)):\n            x_labels[i].next_to(np.array([-1 + 2*i, 0, 0]), DOWN)\n            self.add(x_labels[i])\n\n    def show_circle(self):\n        circle = Circle(radius=1)\n        circle.move_to(self.origin_point)\n        self.add(circle)\n        self.circle = circle\n\n    def move_dot_and_draw_curve(self):\n        orbit = self.circle\n        origin_point = self.origin_point\n\n        dot = Dot(radius=0.08, color=YELLOW)\n        dot.move_to(orbit.point_from_proportion(0))\n        self.t_offset = 0\n        rate = 0.25\n\n        def go_around_circle(mob, dt):\n            self.t_offset += (dt * rate)\n            # print(self.t_offset)\n            mob.move_to(orbit.point_from_proportion(self.t_offset % 1))\n\n        def get_line_to_circle():\n            return Line(origin_point, dot.get_center(), color=BLUE)\n\n        def get_line_to_curve():\n            x = self.curve_start[0] + self.t_offset * 4\n            y = dot.get_center()[1]\n            return Line(dot.get_center(), np.array([x,y,0]), color=YELLOW_A, stroke_width=2 )\n\n\n        self.curve = VGroup()\n        self.curve.add(Line(self.curve_start,self.curve_start))\n        def get_curve():\n            last_line = self.curve[-1]\n            x = self.curve_start[0] + self.t_offset * 4\n            y = dot.get_center()[1]\n            new_line = Line(last_line.get_end(),np.array([x,y,0]), color=YELLOW_D)\n            self.curve.add(new_line)\n\n            return self.curve\n\n        dot.add_updater(go_around_circle)\n\n        origin_to_circle_line = always_redraw(get_line_to_circle)\n        dot_to_curve_line = always_redraw(get_line_to_curve)\n        sine_curve_line = always_redraw(get_curve)\n\n        self.add(dot)\n        self.add(orbit, origin_to_circle_line, dot_to_curve_line, sine_curve_line)\n        self.wait(8.5)\n\n        dot.remove_updater(go_around_circle)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the x and y axes with labels for \\(\\pi\\), \\(2\\pi\\), \\(3\\pi\\), and \\(4\\pi\\) on the x-axis. Show a unit circle centered at (-4, 0). Move a yellow dot around the circle, with a blue line connecting the origin to the dot and a yellow line from the dot to the sine curve which is drawn dynamically on the plane as the dot moves around the circle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SineCurveUnitCircle(Scene):\n    # contributed by heejin_park, https://infograph.tistory.com/230\n    def construct(self):\n        self.show_axis()\n        self.show_circle()\n        self.move_dot_and_draw_curve()\n        self.wait()\n\n    def show_axis(self):\n        x_start = np.array([-6,0,0])\n        x_end = np.array([6,0,0])\n\n        y_start = np.array([-4,-2,0])\n        y_end = np.array([-4,2,0])\n\n        x_axis = Line(x_start, x_end)\n        y_axis = Line(y_start, y_end)\n\n        self.add(x_axis, y_axis)\n        self.add_x_labels()\n\n        self.origin_point = np.array([-4,0,0])\n        self.curve_start = np.array([-3,0,0])\n\n    def add_x_labels(self):\n        x_labels = [\n            MathTex(r\"\\pi\"), MathTex(r\"2 \\pi\"),\n            MathTex(r\"3 \\pi\"), MathTex(r\"4 \\pi\"),\n        ]\n\n        for i in range(len(x_labels)):\n            x_labels[i].next_to(np.array([-1 + 2*i, 0, 0]), DOWN)\n            self.add(x_labels[i])\n\n    def show_circle(self):\n        circle = Circle(radius=1)\n        circle.move_to(self.origin_point)\n        self.add(circle)\n        self.circle = circle\n\n    def move_dot_and_draw_curve(self):\n        orbit = self.circle\n        origin_point = self.origin_point\n\n        dot = Dot(radius=0.08, color=YELLOW)\n        dot.move_to(orbit.point_from_proportion(0))\n        self.t_offset = 0\n        rate = 0.25\n\n        def go_around_circle(mob, dt):\n            self.t_offset += (dt * rate)\n            # print(self.t_offset)\n            mob.move_to(orbit.point_from_proportion(self.t_offset % 1))\n\n        def get_line_to_circle():\n            return Line(origin_point, dot.get_center(), color=BLUE)\n\n        def get_line_to_curve():\n            x = self.curve_start[0] + self.t_offset * 4\n            y = dot.get_center()[1]\n            return Line(dot.get_center(), np.array([x,y,0]), color=YELLOW_A, stroke_width=2 )\n\n\n        self.curve = VGroup()\n        self.curve.add(Line(self.curve_start,self.curve_start))\n        def get_curve():\n            last_line = self.curve[-1]\n            x = self.curve_start[0] + self.t_offset * 4\n            y = dot.get_center()[1]\n            new_line = Line(last_line.get_end(),np.array([x,y,0]), color=YELLOW_D)\n            self.curve.add(new_line)\n\n            return self.curve\n\n        dot.add_updater(go_around_circle)\n\n        origin_to_circle_line = always_redraw(get_line_to_circle)\n        dot_to_curve_line = always_redraw(get_line_to_curve)\n        sine_curve_line = always_redraw(get_curve)\n\n        self.add(dot)\n        self.add(orbit, origin_to_circle_line, dot_to_curve_line, sine_curve_line)\n        self.wait(8.5)\n\n        dot.remove_updater(go_around_circle)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the x and y axes with labels for \\(\\pi\\), \\(2\\pi\\), \\(3\\pi\\), and \\(4\\pi\\) on the x-axis. Show a unit circle centered at (-4, 0). Move a yellow dot around the circle, with a blue line connecting the origin to the dot and a yellow line from the dot to the sine curve which is drawn dynamically on the plane as the dot moves around the circle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SineCurveUnitCircle(Scene):\n    # contributed by heejin_park, https://infograph.tistory.com/230\n    def construct(self):\n        self.show_axis()\n        self.show_circle()\n        self.move_dot_and_draw_curve()\n        self.wait()\n\n    def show_axis(self):\n        x_start = np.array([-6,0,0])\n        x_end = np.array([6,0,0])\n\n        y_start = np.array([-4,-2,0])\n        y_end = np.array([-4,2,0])\n\n        x_axis = Line(x_start, x_end)\n        y_axis = Line(y_start, y_end)\n\n        self.add(x_axis, y_axis)\n        self.add_x_labels()\n\n        self.origin_point = np.array([-4,0,0])\n        self.curve_start = np.array([-3,0,0])\n\n    def add_x_labels(self):\n        x_labels = [\n            MathTex(r\"\\pi\"), MathTex(r\"2 \\pi\"),\n            MathTex(r\"3 \\pi\"), MathTex(r\"4 \\pi\"),\n        ]\n\n        for i in range(len(x_labels)):\n            x_labels[i].next_to(np.array([-1 + 2*i, 0, 0]), DOWN)\n            self.add(x_labels[i])\n\n    def show_circle(self):\n        circle = Circle(radius=1)\n        circle.move_to(self.origin_point)\n        self.add(circle)\n        self.circle = circle\n\n    def move_dot_and_draw_curve(self):\n        orbit = self.circle\n        origin_point = self.origin_point\n\n        dot = Dot(radius=0.08, color=YELLOW)\n        dot.move_to(orbit.point_from_proportion(0))\n        self.t_offset = 0\n        rate = 0.25\n\n        def go_around_circle(mob, dt):\n            self.t_offset += (dt * rate)\n            # print(self.t_offset)\n            mob.move_to(orbit.point_from_proportion(self.t_offset % 1))\n\n        def get_line_to_circle():\n            return Line(origin_point, dot.get_center(), color=BLUE)\n\n        def get_line_to_curve():\n            x = self.curve_start[0] + self.t_offset * 4\n            y = dot.get_center()[1]\n            return Line(dot.get_center(), np.array([x,y,0]), color=YELLOW_A, stroke_width=2 )\n\n\n        self.curve = VGroup()\n        self.curve.add(Line(self.curve_start,self.curve_start))\n        def get_curve():\n            last_line = self.curve[-1]\n            x = self.curve_start[0] + self.t_offset * 4\n            y = dot.get_center()[1]\n            new_line = Line(last_line.get_end(),np.array([x,y,0]), color=YELLOW_D)\n            self.curve.add(new_line)\n\n            return self.curve\n\n        dot.add_updater(go_around_circle)\n\n        origin_to_circle_line = always_redraw(get_line_to_circle)\n        dot_to_curve_line = always_redraw(get_line_to_curve)\n        sine_curve_line = always_redraw(get_curve)\n\n        self.add(dot)\n        self.add(orbit, origin_to_circle_line, dot_to_curve_line, sine_curve_line)\n        self.wait(8.5)\n\n        dot.remove_updater(go_around_circle)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a set of coordinate axes with a cyan-colored parametric curve in the shape of a cardioid. The curve is traced using the parametric equations involving exponential and trigonometric functions, forming a heart-like shape that loops around the origin."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ParametricCurveExample(Scene):\n    def construct(self):\n        ax = Axes()\n        cardioid = ax.plot_parametric_curve(\n            lambda t: np.array(\n                [\n                    np.exp(1) * np.cos(t) * (1 - np.cos(t)),\n                    np.exp(1) * np.sin(t) * (1 - np.cos(t)),\n                    0,\n                ]\n            ),\n            t_range=[0, 2 * PI],\n            color=\"#0FF1CE\",\n        )\n        self.add(ax, cardioid)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a set of coordinate axes with a cyan-colored parametric curve in the shape of a cardioid. The curve is traced using the parametric equations involving exponential and trigonometric functions, forming a heart-like shape that loops around the origin."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ParametricCurveExample(Scene):\n    def construct(self):\n        ax = Axes()\n        cardioid = ax.plot_parametric_curve(\n            lambda t: np.array(\n                [\n                    np.exp(1) * np.cos(t) * (1 - np.cos(t)),\n                    np.exp(1) * np.sin(t) * (1 - np.cos(t)),\n                    0,\n                ]\n            ),\n            t_range=[0, 2 * PI],\n            color=\"#0FF1CE\",\n        )\n        self.add(ax, cardioid)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a set of coordinate axes with a cyan-colored parametric curve in the shape of a cardioid. The curve is traced using the parametric equations involving exponential and trigonometric functions, forming a heart-like shape that loops around the origin."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ParametricCurveExample(Scene):\n    def construct(self):\n        ax = Axes()\n        cardioid = ax.plot_parametric_curve(\n            lambda t: np.array(\n                [\n                    np.exp(1) * np.cos(t) * (1 - np.cos(t)),\n                    np.exp(1) * np.sin(t) * (1 - np.cos(t)),\n                    0,\n                ]\n            ),\n            t_range=[0, 2 * PI],\n            color=\"#0FF1CE\",\n        )\n        self.add(ax, cardioid)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the word \u201cHello\u201d in large text on the screen, animating it being written out in reverse order, from the last letter to the first, while keeping the text visible after the animation completes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShowWriteReversed(Scene):\n    def construct(self):\n        self.play(Write(Text(\"Hello\", font_size=144), reverse=True, remover=False))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the word \u201cHello\u201d in large text on the screen, animating it being written out in reverse order, from the last letter to the first, while keeping the text visible after the animation completes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShowWriteReversed(Scene):\n    def construct(self):\n        self.play(Write(Text(\"Hello\", font_size=144), reverse=True, remover=False))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three elements arranged around the edges of the screen:\n\n- A text reading \u201cI am at the top!\u201d is positioned at the top edge.\n- A circle, initially shifted downward, is moved to the right edge with no buffer space.\n- Another text reading \u201cI am moving to the side!\u201d is placed at the left edge.\n\nAll elements appear together, with their final positions aligned to the specified screen edges."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ToEdgeExample(Scene):\n    def construct(self):\n        tex_top = Tex(\"I am at the top!\")\n        tex_top.to_edge(UP)\n        tex_side = Tex(\"I am moving to the side!\")\n        c = Circle().shift(2*DOWN)\n        self.add(tex_top, tex_side, c)\n        tex_side.to_edge(LEFT)\n        c.to_edge(RIGHT, buff=0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three elements arranged around the edges of the screen:\n\n- A text reading \u201cI am at the top!\u201d is positioned at the top edge.\n- A circle, initially shifted downward, is moved to the right edge with no buffer space.\n- Another text reading \u201cI am moving to the side!\u201d is placed at the left edge.\n\nAll elements appear together, with their final positions aligned to the specified screen edges."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ToEdgeExample(Scene):\n    def construct(self):\n        tex_top = Tex(\"I am at the top!\")\n        tex_top.to_edge(UP)\n        tex_side = Tex(\"I am moving to the side!\")\n        c = Circle().shift(2*DOWN)\n        self.add(tex_top, tex_side, c)\n        tex_side.to_edge(LEFT)\n        c.to_edge(RIGHT, buff=0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D cone oriented diagonally in space, pointing in the direction of the vector (1, 1, 2). The cone is placed within a 3D coordinate system defined by axes. The camera is set at a vertical angle of \\( \\frac{5\\pi}{11} \\) and a horizontal angle of \\( \\frac{\\pi}{9} \\), providing a tilted and dynamic view of the cone's shape and orientation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleCone(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        cone = Cone(direction=X_AXIS+Y_AXIS+2*Z_AXIS, resolution=8)\n        self.set_camera_orientation(phi=5*PI/11, theta=PI/9)\n        self.add(axes, cone)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D cone oriented diagonally in space, pointing in the direction of the vector (1, 1, 2). The cone is placed within a 3D coordinate system defined by axes. The camera is set at a vertical angle of \\( \\frac{5\\pi}{11} \\) and a horizontal angle of \\( \\frac{\\pi}{9} \\), providing a tilted and dynamic view of the cone's shape and orientation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleCone(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        cone = Cone(direction=X_AXIS+Y_AXIS+2*Z_AXIS, resolution=8)\n        self.set_camera_orientation(phi=5*PI/11, theta=PI/9)\n        self.add(axes, cone)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two large circles side by side\u2014one red on the left and one green on the right. Both have thick outlines. The animation scales both circles down to a quarter of their original size: the red circle\u2019s outline remains thick, while the green circle\u2019s outline scales down proportionally with the shape."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectScaleExample(Scene):\n    def construct(self):\n        c1 = Circle(1, RED).set_x(-1)\n        c2 = Circle(1, GREEN).set_x(1)\n\n        vg = VGroup(c1, c2)\n        vg.set_stroke(width=50)\n        self.add(vg)\n\n        self.play(\n            c1.animate.scale(.25),\n            c2.animate.scale(.25,\n                scale_stroke=True)\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two large circles side by side\u2014one red on the left and one green on the right. Both have thick outlines. The animation scales both circles down to a quarter of their original size: the red circle\u2019s outline remains thick, while the green circle\u2019s outline scales down proportionally with the shape."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectScaleExample(Scene):\n    def construct(self):\n        c1 = Circle(1, RED).set_x(-1)\n        c2 = Circle(1, GREEN).set_x(1)\n\n        vg = VGroup(c1, c2)\n        vg.set_stroke(width=50)\n        self.add(vg)\n\n        self.play(\n            c1.animate.scale(.25),\n            c2.animate.scale(.25,\n                scale_stroke=True)\n        )\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display five different types of tables arranged in two groups:\n\n- **Top Group (scaled down and aligned at the top):**\n  - A labeled table with two rows and two columns, including row and column headers and a top-left label. The cell at row 2, column 2 is highlighted in green.\n  - A decimal table showing values of \\(x\\) and \\(f(x) = e^x\\) for five evenly spaced \\(x\\)-values from -2 to 2. The cell at row 2, column 2 is highlighted in red.\n\n- **Bottom Group (scaled down and aligned at the bottom):**\n  - A math table with addition values, where the first row and column act as headers. The first three horizontal and vertical grid lines are colored blue and layered above the table.\n  - A table of geometric objects (circles and crosses), arranged in a 3\u00d73 grid. A red diagonal line crosses the table from bottom-left to top-right. It is a completed Tic-tac-toe game, 'O' has won.\n  - An integer table filled with numbers from 1 to 20 arranged in a 5\u00d74 grid, with outer lines included.\n\nAll tables are neatly arranged with spacing between them and displayed together on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TableExamples(Scene):\n    def construct(self):\n        t0 = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            top_left_entry=Text(\"TOP\"))\n        t0.add_highlighted_cell((2,2), color=GREEN)\n        x_vals = np.linspace(-2,2,5)\n        y_vals = np.exp(x_vals)\n        t1 = DecimalTable(\n            [x_vals, y_vals],\n            row_labels=[MathTex(\"x\"), MathTex(\"f(x)\")],\n            include_outer_lines=True)\n        t1.add(t1.get_cell((2,2), color=RED))\n        t2 = MathTable(\n            [[\"+\", 0, 5, 10],\n            [0, 0, 5, 10],\n            [2, 2, 7, 12],\n            [4, 4, 9, 14]],\n            include_outer_lines=True)\n        t2.get_horizontal_lines()[:3].set_color(BLUE)\n        t2.get_vertical_lines()[:3].set_color(BLUE)\n        t2.get_horizontal_lines()[:3].set_z_index(1)\n        cross = VGroup(\n            Line(UP + LEFT, DOWN + RIGHT),\n            Line(UP + RIGHT, DOWN + LEFT))\n        a = Circle().set_color(RED).scale(0.5)\n        b = cross.set_color(BLUE).scale(0.5)\n        t3 = MobjectTable(\n            [[a.copy(),b.copy(),a.copy()],\n            [b.copy(),a.copy(),a.copy()],\n            [a.copy(),b.copy(),b.copy()]])\n        t3.add(Line(\n            t3.get_corner(DL), t3.get_corner(UR)\n        ).set_color(RED))\n        vals = np.arange(1,21).reshape(5,4)\n        t4 = IntegerTable(\n            vals,\n            include_outer_lines=True\n        )\n        g1 = Group(t0, t1).scale(0.5).arrange(buff=1).to_edge(UP, buff=1)\n        g2 = Group(t2, t3, t4).scale(0.5).arrange(buff=1).to_edge(DOWN, buff=1)\n        self.add(g1, g2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display five different types of tables arranged in two groups:\n\n- **Top Group (scaled down and aligned at the top):**\n  - A labeled table with two rows and two columns, including row and column headers and a top-left label. The cell at row 2, column 2 is highlighted in green.\n  - A decimal table showing values of \\(x\\) and \\(f(x) = e^x\\) for five evenly spaced \\(x\\)-values from -2 to 2. The cell at row 2, column 2 is highlighted in red.\n\n- **Bottom Group (scaled down and aligned at the bottom):**\n  - A math table with addition values, where the first row and column act as headers. The first three horizontal and vertical grid lines are colored blue and layered above the table.\n  - A table of geometric objects (circles and crosses), arranged in a 3\u00d73 grid. A red diagonal line crosses the table from bottom-left to top-right. It is a completed Tic-tac-toe game, 'O' has won.\n  - An integer table filled with numbers from 1 to 20 arranged in a 5\u00d74 grid, with outer lines included.\n\nAll tables are neatly arranged with spacing between them and displayed together on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TableExamples(Scene):\n    def construct(self):\n        t0 = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            top_left_entry=Text(\"TOP\"))\n        t0.add_highlighted_cell((2,2), color=GREEN)\n        x_vals = np.linspace(-2,2,5)\n        y_vals = np.exp(x_vals)\n        t1 = DecimalTable(\n            [x_vals, y_vals],\n            row_labels=[MathTex(\"x\"), MathTex(\"f(x)\")],\n            include_outer_lines=True)\n        t1.add(t1.get_cell((2,2), color=RED))\n        t2 = MathTable(\n            [[\"+\", 0, 5, 10],\n            [0, 0, 5, 10],\n            [2, 2, 7, 12],\n            [4, 4, 9, 14]],\n            include_outer_lines=True)\n        t2.get_horizontal_lines()[:3].set_color(BLUE)\n        t2.get_vertical_lines()[:3].set_color(BLUE)\n        t2.get_horizontal_lines()[:3].set_z_index(1)\n        cross = VGroup(\n            Line(UP + LEFT, DOWN + RIGHT),\n            Line(UP + RIGHT, DOWN + LEFT))\n        a = Circle().set_color(RED).scale(0.5)\n        b = cross.set_color(BLUE).scale(0.5)\n        t3 = MobjectTable(\n            [[a.copy(),b.copy(),a.copy()],\n            [b.copy(),a.copy(),a.copy()],\n            [a.copy(),b.copy(),b.copy()]])\n        t3.add(Line(\n            t3.get_corner(DL), t3.get_corner(UR)\n        ).set_color(RED))\n        vals = np.arange(1,21).reshape(5,4)\n        t4 = IntegerTable(\n            vals,\n            include_outer_lines=True\n        )\n        g1 = Group(t0, t1).scale(0.5).arrange(buff=1).to_edge(UP, buff=1)\n        g2 = Group(t2, t3, t4).scale(0.5).arrange(buff=1).to_edge(DOWN, buff=1)\n        self.add(g1, g2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display five different types of tables arranged in two groups:\n\n- **Top Group (scaled down and aligned at the top):**\n  - A labeled table with two rows and two columns, including row and column headers and a top-left label. The cell at row 2, column 2 is highlighted in green.\n  - A decimal table showing values of \\(x\\) and \\(f(x) = e^x\\) for five evenly spaced \\(x\\)-values from -2 to 2. The cell at row 2, column 2 is highlighted in red.\n\n- **Bottom Group (scaled down and aligned at the bottom):**\n  - A math table with addition values, where the first row and column act as headers. The first three horizontal and vertical grid lines are colored blue and layered above the table.\n  - A table of geometric objects (circles and crosses), arranged in a 3\u00d73 grid. A red diagonal line crosses the table from bottom-left to top-right. It is a completed Tic-tac-toe game, 'O' has won.\n  - An integer table filled with numbers from 1 to 20 arranged in a 5\u00d74 grid, with outer lines included.\n\nAll tables are neatly arranged with spacing between them and displayed together on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TableExamples(Scene):\n    def construct(self):\n        t0 = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            top_left_entry=Text(\"TOP\"))\n        t0.add_highlighted_cell((2,2), color=GREEN)\n        x_vals = np.linspace(-2,2,5)\n        y_vals = np.exp(x_vals)\n        t1 = DecimalTable(\n            [x_vals, y_vals],\n            row_labels=[MathTex(\"x\"), MathTex(\"f(x)\")],\n            include_outer_lines=True)\n        t1.add(t1.get_cell((2,2), color=RED))\n        t2 = MathTable(\n            [[\"+\", 0, 5, 10],\n            [0, 0, 5, 10],\n            [2, 2, 7, 12],\n            [4, 4, 9, 14]],\n            include_outer_lines=True)\n        t2.get_horizontal_lines()[:3].set_color(BLUE)\n        t2.get_vertical_lines()[:3].set_color(BLUE)\n        t2.get_horizontal_lines()[:3].set_z_index(1)\n        cross = VGroup(\n            Line(UP + LEFT, DOWN + RIGHT),\n            Line(UP + RIGHT, DOWN + LEFT))\n        a = Circle().set_color(RED).scale(0.5)\n        b = cross.set_color(BLUE).scale(0.5)\n        t3 = MobjectTable(\n            [[a.copy(),b.copy(),a.copy()],\n            [b.copy(),a.copy(),a.copy()],\n            [a.copy(),b.copy(),b.copy()]])\n        t3.add(Line(\n            t3.get_corner(DL), t3.get_corner(UR)\n        ).set_color(RED))\n        vals = np.arange(1,21).reshape(5,4)\n        t4 = IntegerTable(\n            vals,\n            include_outer_lines=True\n        )\n        g1 = Group(t0, t1).scale(0.5).arrange(buff=1).to_edge(UP, buff=1)\n        g2 = Group(t2, t3, t4).scale(0.5).arrange(buff=1).to_edge(DOWN, buff=1)\n        self.add(g1, g2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D coordinate system and render a colorful surface defined by the equation \\( z = 2\\sin(x) + 2\\cos(y) \\). The surface spans from \\(-3\\) to \\(3\\) along both the x- and y-axes and is colored using a gradient from blue to red. The camera is angled to provide a clear view of the surface\u2019s undulating, wave-like shape."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PlotSurfaceExample(ThreeDScene):\n    def construct(self):\n        resolution_fa = 16\n        self.set_camera_orientation(phi=75 * DEGREES, theta=-60 * DEGREES)\n        axes = ThreeDAxes(x_range=(-3, 3, 1), y_range=(-3, 3, 1), z_range=(-5, 5, 1))\n        def param_trig(u, v):\n            x = u\n            y = v\n            z = 2 * np.sin(x) + 2 * np.cos(y)\n            return z\n        trig_plane = axes.plot_surface(\n            param_trig,\n            resolution=(resolution_fa, resolution_fa),\n            u_range = (-3, 3),\n            v_range = (-3, 3),\n            colorscale = [BLUE, GREEN, YELLOW, ORANGE, RED],\n            )\n        self.add(axes, trig_plane)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D coordinate system and render a colorful surface defined by the equation \\( z = 2\\sin(x) + 2\\cos(y) \\). The surface spans from \\(-3\\) to \\(3\\) along both the x- and y-axes and is colored using a gradient from blue to red. The camera is angled to provide a clear view of the surface\u2019s undulating, wave-like shape."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PlotSurfaceExample(ThreeDScene):\n    def construct(self):\n        resolution_fa = 16\n        self.set_camera_orientation(phi=75 * DEGREES, theta=-60 * DEGREES)\n        axes = ThreeDAxes(x_range=(-3, 3, 1), y_range=(-3, 3, 1), z_range=(-5, 5, 1))\n        def param_trig(u, v):\n            x = u\n            y = v\n            z = 2 * np.sin(x) + 2 * np.cos(y)\n            return z\n        trig_plane = axes.plot_surface(\n            param_trig,\n            resolution=(resolution_fa, resolution_fa),\n            u_range = (-3, 3),\n            v_range = (-3, 3),\n            colorscale = [BLUE, GREEN, YELLOW, ORANGE, RED],\n            )\n        self.add(axes, trig_plane)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 3D coordinate system and render a colorful surface defined by the equation \\( z = 2\\sin(x) + 2\\cos(y) \\). The surface spans from \\(-3\\) to \\(3\\) along both the x- and y-axes and is colored using a gradient from blue to red. The camera is angled to provide a clear view of the surface\u2019s undulating, wave-like shape."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PlotSurfaceExample(ThreeDScene):\n    def construct(self):\n        resolution_fa = 16\n        self.set_camera_orientation(phi=75 * DEGREES, theta=-60 * DEGREES)\n        axes = ThreeDAxes(x_range=(-3, 3, 1), y_range=(-3, 3, 1), z_range=(-5, 5, 1))\n        def param_trig(u, v):\n            x = u\n            y = v\n            z = 2 * np.sin(x) + 2 * np.cos(y)\n            return z\n        trig_plane = axes.plot_surface(\n            param_trig,\n            resolution=(resolution_fa, resolution_fa),\n            u_range = (-3, 3),\n            v_range = (-3, 3),\n            colorscale = [BLUE, GREEN, YELLOW, ORANGE, RED],\n            )\n        self.add(axes, trig_plane)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a graph with nine labeled nodes arranged in two concentric shells. The inner shell contains nodes 1, 2, and 3, forming a triangle. The outer shell contains nodes 4 through 9, each connected to one or more nodes in the inner shell. The layout emphasizes a layered structure, with connections radiating between the inner and outer shells to form a visually organized network."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShellLayout(Scene):\n    def construct(self):\n        nlist = [[1, 2, 3], [4, 5, 6, 7, 8, 9]]\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6, 7, 8, 9],\n            [(1, 2), (2, 3), (3, 1), (4, 1), (4, 2), (5, 2), (6, 2), (6, 3), (7, 3), (8, 3), (8, 1), (9, 1)],\n            layout=\"shell\",\n            layout_config={\"nlist\": nlist},\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a graph with nine labeled nodes arranged in two concentric shells. The inner shell contains nodes 1, 2, and 3, forming a triangle. The outer shell contains nodes 4 through 9, each connected to one or more nodes in the inner shell. The layout emphasizes a layered structure, with connections radiating between the inner and outer shells to form a visually organized network."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ShellLayout(Scene):\n    def construct(self):\n        nlist = [[1, 2, 3], [4, 5, 6, 7, 8, 9]]\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6, 7, 8, 9],\n            [(1, 2), (2, 3), (3, 1), (4, 1), (4, 2), (5, 2), (6, 2), (6, 3), (7, 3), (8, 3), (8, 1), (9, 1)],\n            layout=\"shell\",\n            layout_config={\"nlist\": nlist},\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Set the background color of the scene to white using two equivalent configuration methods: one by directly assigning to config.background_color, and the other by using dictionary-style access with config[\"background_color\"]."}, {"from": "assistant", "value": "```python\nfrom manim import *\nconfig.background_color = WHITE\nconfig[\"background_color\"] = WHITE\n\nclass AnimationScene(Scene):\n    def construct(self):\n        \n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that set the background color of the scene to white using two equivalent configuration methods: one by directly assigning to config.background_color, and the other by using dictionary-style access with config[\"background_color\"]."}, {"from": "assistant", "value": "```python\nfrom manim import *\nconfig.background_color = WHITE\nconfig[\"background_color\"] = WHITE\n\nclass AnimationScene(Scene):\n    def construct(self):\n        \n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to set the background color of the scene to white using two equivalent configuration methods: one by directly assigning to config.background_color, and the other by using dictionary-style access with config[\"background_color\"]."}, {"from": "assistant", "value": "```python\nfrom manim import *\nconfig.background_color = WHITE\nconfig[\"background_color\"] = WHITE\n\nclass AnimationScene(Scene):\n    def construct(self):\n        \n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a red semi-transparent square on the left and a green semi-transparent triangle on the right. After a brief pause, the camera smoothly pans to center on the square, then transitions to center on the triangle, creating a dynamic shift in focus between the two shapes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingCameraCenter(MovingCameraScene):\n    def construct(self):\n        s = Square(color=RED, fill_opacity=0.5).move_to(2 * LEFT)\n        t = Triangle(color=GREEN, fill_opacity=0.5).move_to(2 * RIGHT)\n        self.wait(0.3)\n        self.add(s, t)\n        self.play(self.camera.frame.animate.move_to(s))\n        self.wait(0.3)\n        self.play(self.camera.frame.animate.move_to(t))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a red semi-transparent square on the left and a green semi-transparent triangle on the right. After a brief pause, the camera smoothly pans to center on the square, then transitions to center on the triangle, creating a dynamic shift in focus between the two shapes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingCameraCenter(MovingCameraScene):\n    def construct(self):\n        s = Square(color=RED, fill_opacity=0.5).move_to(2 * LEFT)\n        t = Triangle(color=GREEN, fill_opacity=0.5).move_to(2 * RIGHT)\n        self.wait(0.3)\n        self.add(s, t)\n        self.play(self.camera.frame.animate.move_to(s))\n        self.wait(0.3)\n        self.play(self.camera.frame.animate.move_to(t))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a red semi-transparent square on the left and a green semi-transparent triangle on the right. After a brief pause, the camera smoothly pans to center on the square, then transitions to center on the triangle, creating a dynamic shift in focus between the two shapes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingCameraCenter(MovingCameraScene):\n    def construct(self):\n        s = Square(color=RED, fill_opacity=0.5).move_to(2 * LEFT)\n        t = Triangle(color=GREEN, fill_opacity=0.5).move_to(2 * RIGHT)\n        self.wait(0.3)\n        self.add(s, t)\n        self.play(self.camera.frame.animate.move_to(s))\n        self.wait(0.3)\n        self.play(self.camera.frame.animate.move_to(t))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display four instances of the letter \"F\" arranged horizontally with large spacing between them. The first \"F\" is at normal size, the second is twice as large, the third is half the size, and the fourth is flipped due to being scaled by a negative factor."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectScaleExample(Scene):\n    def construct(self):\n        f1 = Text(\"F\")\n        f2 = Text(\"F\").scale(2)\n        f3 = Text(\"F\").scale(0.5)\n        f4 = Text(\"F\").scale(-1)\n\n        vgroup = VGroup(f1, f2, f3, f4).arrange(6 * RIGHT)\n        self.add(vgroup)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display four instances of the letter \"F\" arranged horizontally with large spacing between them. The first \"F\" is at normal size, the second is twice as large, the third is half the size, and the fourth is flipped due to being scaled by a negative factor."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectScaleExample(Scene):\n    def construct(self):\n        f1 = Text(\"F\")\n        f2 = Text(\"F\").scale(2)\n        f3 = Text(\"F\").scale(0.5)\n        f4 = Text(\"F\").scale(-1)\n\n        vgroup = VGroup(f1, f2, f3, f4).arrange(6 * RIGHT)\n        self.add(vgroup)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display four instances of the letter \"F\" arranged horizontally with large spacing between them. The first \"F\" is at normal size, the second is twice as large, the third is half the size, and the fourth is flipped due to being scaled by a negative factor."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectScaleExample(Scene):\n    def construct(self):\n        f1 = Text(\"F\")\n        f2 = Text(\"F\").scale(2)\n        f3 = Text(\"F\").scale(0.5)\n        f4 = Text(\"F\").scale(-1)\n\n        vgroup = VGroup(f1, f2, f3, f4).arrange(6 * RIGHT)\n        self.add(vgroup)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the word \u201cInserting\u201d in purple text on the left side of the screen, with a grey cursor positioned at the start. Animate the text being typed out character by character with the cursor moving along, then make the cursor blink twice."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass InsertingTextExample(Scene):\n    def construct(self):\n        text = Text(\"Inserting\", color=PURPLE).scale(1.5).to_edge(LEFT)\n        cursor = Rectangle(\n            color = GREY_A,\n            fill_color = GREY_A,\n            fill_opacity = 1.0,\n            height = 1.1,\n            width = 0.5,\n        ).move_to(text[0]) # Position the cursor\n\n        self.play(TypeWithCursor(text, cursor))\n        self.play(Blink(cursor, blinks=2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the word \u201cInserting\u201d in purple text on the left side of the screen, with a grey cursor positioned at the start. Animate the text being typed out character by character with the cursor moving along, then make the cursor blink twice."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass InsertingTextExample(Scene):\n    def construct(self):\n        text = Text(\"Inserting\", color=PURPLE).scale(1.5).to_edge(LEFT)\n        cursor = Rectangle(\n            color = GREY_A,\n            fill_color = GREY_A,\n            fill_opacity = 1.0,\n            height = 1.1,\n            width = 0.5,\n        ).move_to(text[0]) # Position the cursor\n\n        self.play(TypeWithCursor(text, cursor))\n        self.play(Blink(cursor, blinks=2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a green filled circle, and a blue filled square grouped together. Then animate the entire group spiraling into view onto the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpiralInExample(Scene):\n    def construct(self):\n        pi = MathTex(r\"\\pi\").scale(7)\n        pi.shift(2.25 * LEFT + 1.5 * UP)\n        circle = Circle(color=GREEN_C, fill_opacity=1).shift(LEFT)\n        square = Square(color=BLUE_D, fill_opacity=1).shift(UP)\n        shapes = VGroup(pi, circle, square)\n        self.play(SpiralIn(shapes))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a green filled circle, and a blue filled square grouped together. Then animate the entire group spiraling into view onto the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpiralInExample(Scene):\n    def construct(self):\n        pi = MathTex(r\"\\pi\").scale(7)\n        pi.shift(2.25 * LEFT + 1.5 * UP)\n        circle = Circle(color=GREEN_C, fill_opacity=1).shift(LEFT)\n        square = Square(color=BLUE_D, fill_opacity=1).shift(UP)\n        shapes = VGroup(pi, circle, square)\n        self.play(SpiralIn(shapes))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display five lines of styled text arranged vertically:\n\n1. The first line shows \"foo\" in bold, \"bar\" in italics, and \"foobar\" in bold italics.\n2. The second line shows \"foo\" with a strikethrough, \"bar\" underlined, \"big\" in larger font, and \"small\" in smaller font.\n3. The third line displays chemical formulas: \"H\u2082O\" with the \"2\" as a subscript, and \"H\u2083O\u207a\" with the \"3\" as a subscript and \"+\" as a superscript.\n4. The fourth line reads \"type help for help\" with \"help\" in monospaced font.\n5. The fifth line shows \"foo\" with a double underline and \"bar\" with a red squiggly underline indicating an error.\n\nAll lines are centered and stacked vertically on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BasicMarkupExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\"<b>foo</b> <i>bar</i> <b><i>foobar</i></b>\")\n        text2 = MarkupText(\"<s>foo</s> <u>bar</u> <big>big</big> <small>small</small>\")\n        text3 = MarkupText(\"H<sub>2</sub>O and H<sub>3</sub>O<sup>+</sup>\")\n        text4 = MarkupText(\"type <tt>help</tt> for help\")\n        text5 = MarkupText(\n            '<span underline=\"double\">foo</span> <span underline=\"error\">bar</span>'\n        )\n        group = VGroup(text1, text2, text3, text4, text5).arrange(DOWN)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display five lines of styled text arranged vertically:\n\n1. The first line shows \"foo\" in bold, \"bar\" in italics, and \"foobar\" in bold italics.\n2. The second line shows \"foo\" with a strikethrough, \"bar\" underlined, \"big\" in larger font, and \"small\" in smaller font.\n3. The third line displays chemical formulas: \"H\u2082O\" with the \"2\" as a subscript, and \"H\u2083O\u207a\" with the \"3\" as a subscript and \"+\" as a superscript.\n4. The fourth line reads \"type help for help\" with \"help\" in monospaced font.\n5. The fifth line shows \"foo\" with a double underline and \"bar\" with a red squiggly underline indicating an error.\n\nAll lines are centered and stacked vertically on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BasicMarkupExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\"<b>foo</b> <i>bar</i> <b><i>foobar</i></b>\")\n        text2 = MarkupText(\"<s>foo</s> <u>bar</u> <big>big</big> <small>small</small>\")\n        text3 = MarkupText(\"H<sub>2</sub>O and H<sub>3</sub>O<sup>+</sup>\")\n        text4 = MarkupText(\"type <tt>help</tt> for help\")\n        text5 = MarkupText(\n            '<span underline=\"double\">foo</span> <span underline=\"error\">bar</span>'\n        )\n        group = VGroup(text1, text2, text3, text4, text5).arrange(DOWN)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display five lines of styled text arranged vertically:\n\n1. The first line shows \"foo\" in bold, \"bar\" in italics, and \"foobar\" in bold italics.\n2. The second line shows \"foo\" with a strikethrough, \"bar\" underlined, \"big\" in larger font, and \"small\" in smaller font.\n3. The third line displays chemical formulas: \"H\u2082O\" with the \"2\" as a subscript, and \"H\u2083O\u207a\" with the \"3\" as a subscript and \"+\" as a superscript.\n4. The fourth line reads \"type help for help\" with \"help\" in monospaced font.\n5. The fifth line shows \"foo\" with a double underline and \"bar\" with a red squiggly underline indicating an error.\n\nAll lines are centered and stacked vertically on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BasicMarkupExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\"<b>foo</b> <i>bar</i> <b><i>foobar</i></b>\")\n        text2 = MarkupText(\"<s>foo</s> <u>bar</u> <big>big</big> <small>small</small>\")\n        text3 = MarkupText(\"H<sub>2</sub>O and H<sub>3</sub>O<sup>+</sup>\")\n        text4 = MarkupText(\"type <tt>help</tt> for help\")\n        text5 = MarkupText(\n            '<span underline=\"double\">foo</span> <span underline=\"error\">bar</span>'\n        )\n        group = VGroup(text1, text2, text3, text4, text5).arrange(DOWN)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a graph with seven labeled nodes arranged using a custom grid-like layout. The nodes are positioned in a staggered 4-column format, centered both horizontally and vertically. Edges connect the nodes to form a branching structure with additional horizontal connections, creating a visually structured and symmetric network."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CustomLayoutExample(Scene):\n    def construct(self):\n        import numpy as np\n        import networkx as nx\n\n        # create custom layout\n        def custom_layout(\n            graph: nx.Graph,\n            scale: float | tuple[float, float, float] = 2,\n            n: int | None = None,\n            *args: Any,\n            **kwargs: Any,\n        ):\n            nodes = sorted(list(graph))\n            height = len(nodes) // n\n            return {\n                node: (scale * np.array([\n                    (i % n) - (n-1)/2,\n                    -(i // n) + height/2,\n                    0\n                ])) for i, node in enumerate(graph)\n            }\n\n        # draw graph\n        n = 4\n        graph = Graph(\n            [i for i in range(4 * 2 - 1)],\n            [(0, 1), (0, 4), (1, 2), (1, 5), (2, 3), (2, 6), (4, 5), (5, 6)],\n            labels=True,\n            layout=custom_layout,\n            layout_config={'n': n}\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a graph with seven labeled nodes arranged using a custom grid-like layout. The nodes are positioned in a staggered 4-column format, centered both horizontally and vertically. Edges connect the nodes to form a branching structure with additional horizontal connections, creating a visually structured and symmetric network."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CustomLayoutExample(Scene):\n    def construct(self):\n        import numpy as np\n        import networkx as nx\n\n        # create custom layout\n        def custom_layout(\n            graph: nx.Graph,\n            scale: float | tuple[float, float, float] = 2,\n            n: int | None = None,\n            *args: Any,\n            **kwargs: Any,\n        ):\n            nodes = sorted(list(graph))\n            height = len(nodes) // n\n            return {\n                node: (scale * np.array([\n                    (i % n) - (n-1)/2,\n                    -(i // n) + height/2,\n                    0\n                ])) for i, node in enumerate(graph)\n            }\n\n        # draw graph\n        n = 4\n        graph = Graph(\n            [i for i in range(4 * 2 - 1)],\n            [(0, 1), (0, 4), (1, 2), (1, 5), (2, 3), (2, 6), (4, 5), (5, 6)],\n            labels=True,\n            layout=custom_layout,\n            layout_config={'n': n}\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a blue square. Move the square to the left. Change its fill color to orange. Scale the square down to 30% of its original size. Rotate the square by 0.4 radians."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingAround(Scene):\n    def construct(self):\n        square = Square(color=BLUE, fill_opacity=1)\n\n        self.play(square.animate.shift(LEFT))\n        self.play(square.animate.set_fill(ORANGE))\n        self.play(square.animate.scale(0.3))\n        self.play(square.animate.rotate(0.4))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a blue square. Move the square to the left. Change its fill color to orange. Scale the square down to 30% of its original size. Rotate the square by 0.4 radians."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingAround(Scene):\n    def construct(self):\n        square = Square(color=BLUE, fill_opacity=1)\n\n        self.play(square.animate.shift(LEFT))\n        self.play(square.animate.set_fill(ORANGE))\n        self.play(square.animate.scale(0.3))\n        self.play(square.animate.rotate(0.4))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a blue square. Move the square to the left. Change its fill color to orange. Scale the square down to 30% of its original size. Rotate the square by 0.4 radians."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingAround(Scene):\n    def construct(self):\n        square = Square(color=BLUE, fill_opacity=1)\n\n        self.play(square.animate.shift(LEFT))\n        self.play(square.animate.set_fill(ORANGE))\n        self.play(square.animate.scale(0.3))\n        self.play(square.animate.rotate(0.4))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 integer matrix:  \n\\[\n\\left(\n\\begin{array}{cc}\n3.7 & 2 \\\\\n42.2 & 12 \\\\\n\\end{array}\n\\right)\n\\]  \nAlthough the matrix is created using `IntegerMatrix`, it includes decimal values like 3.7 and 42.2. The matrix is enclosed in parentheses and appears on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass IntegerMatrixExample(Scene):\n    def construct(self):\n        m0 = IntegerMatrix(\n            [[3.7, 2], [42.2, 12]],\n            left_bracket=\"(\",\n            right_bracket=\")\")\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 integer matrix:  \n\\[\n\\left(\n\\begin{array}{cc}\n3.7 & 2 \\\\\n42.2 & 12 \\\\\n\\end{array}\n\\right)\n\\]  \nAlthough the matrix is created using `IntegerMatrix`, it includes decimal values like 3.7 and 42.2. The matrix is enclosed in parentheses and appears on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass IntegerMatrixExample(Scene):\n    def construct(self):\n        m0 = IntegerMatrix(\n            [[3.7, 2], [42.2, 12]],\n            left_bracket=\"(\",\n            right_bracket=\")\")\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three squares arranged in a row. Animate the first square spinning into view from nothing with a default rotation. Then animate the second square spinning in with a full 360-degree rotation. Finally, animate the third square spinning into view with its center point highlighted in red."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpinInFromNothingExample(Scene):\n    def construct(self):\n        squares = [Square() for _ in range(3)]\n        VGroup(*squares).set_x(0).arrange(buff=2)\n        self.play(SpinInFromNothing(squares[0]))\n        self.play(SpinInFromNothing(squares[1], angle=2 * PI))\n        self.play(SpinInFromNothing(squares[2], point_color=RED))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three squares arranged in a row. Animate the first square spinning into view from nothing with a default rotation. Then animate the second square spinning in with a full 360-degree rotation. Finally, animate the third square spinning into view with its center point highlighted in red."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpinInFromNothingExample(Scene):\n    def construct(self):\n        squares = [Square() for _ in range(3)]\n        VGroup(*squares).set_x(0).arrange(buff=2)\n        self.play(SpinInFromNothing(squares[0]))\n        self.play(SpinInFromNothing(squares[1], angle=2 * PI))\n        self.play(SpinInFromNothing(squares[2], point_color=RED))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display three squares arranged in a row. Animate the first square spinning into view from nothing with a default rotation. Then animate the second square spinning in with a full 360-degree rotation. Finally, animate the third square spinning into view with its center point highlighted in red."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SpinInFromNothingExample(Scene):\n    def construct(self):\n        squares = [Square() for _ in range(3)]\n        VGroup(*squares).set_x(0).arrange(buff=2)\n        self.play(SpinInFromNothing(squares[0]))\n        self.play(SpinInFromNothing(squares[1], angle=2 * PI))\n        self.play(SpinInFromNothing(squares[2], point_color=RED))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a coordinate grid with default x- and y-axes. The x-axis is labeled with a scaled-down LaTeX-rendered label \"x-axis,\" and the y-axis is labeled with a smaller plain text label \"y-axis.\" Both labels are positioned near the ends of their respective axes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetAxisLabelsExample(Scene):\n    def construct(self):\n        ax = Axes()\n        labels = ax.get_axis_labels(\n            Tex(\"x-axis\").scale(0.7), Text(\"y-axis\").scale(0.45)\n        )\n        self.add(ax, labels)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a coordinate grid with default x- and y-axes. The x-axis is labeled with a scaled-down LaTeX-rendered label \"x-axis,\" and the y-axis is labeled with a smaller plain text label \"y-axis.\" Both labels are positioned near the ends of their respective axes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetAxisLabelsExample(Scene):\n    def construct(self):\n        ax = Axes()\n        labels = ax.get_axis_labels(\n            Tex(\"x-axis\").scale(0.7), Text(\"y-axis\").scale(0.45)\n        )\n        self.add(ax, labels)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a coordinate grid with default x- and y-axes. The x-axis is labeled with a scaled-down LaTeX-rendered label \"x-axis,\" and the y-axis is labeled with a smaller plain text label \"y-axis.\" Both labels are positioned near the ends of their respective axes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetAxisLabelsExample(Scene):\n    def construct(self):\n        ax = Axes()\n        labels = ax.get_axis_labels(\n            Tex(\"x-axis\").scale(0.7), Text(\"y-axis\").scale(0.45)\n        )\n        self.add(ax, labels)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D coordinate system with a straight line extending from the origin (0, 0, 0) to the point (2, 2, 2). The line is rendered in 3D space, showing its diagonal orientation across all three axes. The camera is set at a 75\u00b0 vertical angle and a 30\u00b0 horizontal angle, providing a tilted perspective that clearly reveals the line\u2019s direction and depth."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleLine3D(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        line = Line3D(start=np.array([0, 0, 0]), end=np.array([2, 2, 2]))\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(axes, line)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D coordinate system with a straight line extending from the origin (0, 0, 0) to the point (2, 2, 2). The line is rendered in 3D space, showing its diagonal orientation across all three axes. The camera is set at a 75\u00b0 vertical angle and a 30\u00b0 horizontal angle, providing a tilted perspective that clearly reveals the line\u2019s direction and depth."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleLine3D(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        line = Line3D(start=np.array([0, 0, 0]), end=np.array([2, 2, 2]))\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(axes, line)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 3D coordinate system with a straight line extending from the origin (0, 0, 0) to the point (2, 2, 2). The line is rendered in 3D space, showing its diagonal orientation across all three axes. The camera is set at a 75\u00b0 vertical angle and a 30\u00b0 horizontal angle, providing a tilted perspective that clearly reveals the line\u2019s direction and depth."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleLine3D(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        line = Line3D(start=np.array([0, 0, 0]), end=np.array([2, 2, 2]))\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(axes, line)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a red circle defined by three specific points: one to the left, one diagonally up-left, and one directly above. The three defining points are marked with black dots, and a coordinate grid (NumberPlane) is shown in the background."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CircleFromPointsExample(Scene):\n    def construct(self):\n        circle = Circle.from_three_points(LEFT, LEFT + UP, UP * 2, color=RED)\n        dots = VGroup(\n            Dot(LEFT),\n            Dot(LEFT + UP),\n            Dot(UP * 2),\n        )\n        self.add(NumberPlane(), circle, dots)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a red circle defined by three specific points: one to the left, one diagonally up-left, and one directly above. The three defining points are marked with black dots, and a coordinate grid (NumberPlane) is shown in the background."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CircleFromPointsExample(Scene):\n    def construct(self):\n        circle = Circle.from_three_points(LEFT, LEFT + UP, UP * 2, color=RED)\n        dots = VGroup(\n            Dot(LEFT),\n            Dot(LEFT + UP),\n            Dot(UP * 2),\n        )\n        self.add(NumberPlane(), circle, dots)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a red circle defined by three specific points: one to the left, one diagonally up-left, and one directly above. The three defining points are marked with black dots, and a coordinate grid (NumberPlane) is shown in the background."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CircleFromPointsExample(Scene):\n    def construct(self):\n        circle = Circle.from_three_points(LEFT, LEFT + UP, UP * 2, color=RED)\n        dots = VGroup(\n            Dot(LEFT),\n            Dot(LEFT + UP),\n            Dot(UP * 2),\n        )\n        self.add(NumberPlane(), circle, dots)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \"Hello \u4f60\u597d \\LaTeX\" in large font, using a LaTeX template that supports both Latin and Chinese characters (via the `ctex` package), with the LaTeX logo typeset properly."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaTeXTemplateLibrary(Scene):\n    def construct(self):\n        tex = Tex('Hello \u4f60\u597d \\\\LaTeX', tex_template=TexTemplateLibrary.ctex, font_size=144)\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \"Hello \u4f60\u597d \\LaTeX\" in large font, using a LaTeX template that supports both Latin and Chinese characters (via the `ctex` package), with the LaTeX logo typeset properly."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaTeXTemplateLibrary(Scene):\n    def construct(self):\n        tex = Tex('Hello \u4f60\u597d \\\\LaTeX', tex_template=TexTemplateLibrary.ctex, font_size=144)\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the text \"Hello \u4f60\u597d \\LaTeX\" in large font, using a LaTeX template that supports both Latin and Chinese characters (via the `ctex` package), with the LaTeX logo typeset properly."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LaTeXTemplateLibrary(Scene):\n    def construct(self):\n        tex = Tex('Hello \u4f60\u597d \\\\LaTeX', tex_template=TexTemplateLibrary.ctex, font_size=144)\n        self.add(tex)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a green dot in the upper right. Then animate four squares arranged in a row, each growing outward from a different point: the first from the center of the screen, the second from the top left, the third from the bottom right with its starting point highlighted in red, and the fourth from the position of the green dot, using the dot\u2019s color as the highlight."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GrowFromPointExample(Scene):\n    def construct(self):\n        dot = Dot(3 * UR, color=GREEN)\n        squares = [Square() for _ in range(4)]\n        VGroup(*squares).set_x(0).arrange(buff=1)\n        self.add(dot)\n        self.play(GrowFromPoint(squares[0], ORIGIN))\n        self.play(GrowFromPoint(squares[1], [-2, 2, 0]))\n        self.play(GrowFromPoint(squares[2], [3, -2, 0], RED))\n        self.play(GrowFromPoint(squares[3], dot, dot.get_color()))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a green dot in the upper right. Then animate four squares arranged in a row, each growing outward from a different point: the first from the center of the screen, the second from the top left, the third from the bottom right with its starting point highlighted in red, and the fourth from the position of the green dot, using the dot\u2019s color as the highlight."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GrowFromPointExample(Scene):\n    def construct(self):\n        dot = Dot(3 * UR, color=GREEN)\n        squares = [Square() for _ in range(4)]\n        VGroup(*squares).set_x(0).arrange(buff=1)\n        self.add(dot)\n        self.play(GrowFromPoint(squares[0], ORIGIN))\n        self.play(GrowFromPoint(squares[1], [-2, 2, 0]))\n        self.play(GrowFromPoint(squares[2], [3, -2, 0], RED))\n        self.play(GrowFromPoint(squares[3], dot, dot.get_color()))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a green dot in the upper right. Then animate four squares arranged in a row, each growing outward from a different point: the first from the center of the screen, the second from the top left, the third from the bottom right with its starting point highlighted in red, and the fourth from the position of the green dot, using the dot\u2019s color as the highlight."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GrowFromPointExample(Scene):\n    def construct(self):\n        dot = Dot(3 * UR, color=GREEN)\n        squares = [Square() for _ in range(4)]\n        VGroup(*squares).set_x(0).arrange(buff=1)\n        self.add(dot)\n        self.play(GrowFromPoint(squares[0], ORIGIN))\n        self.play(GrowFromPoint(squares[1], [-2, 2, 0]))\n        self.play(GrowFromPoint(squares[2], [3, -2, 0], RED))\n        self.play(GrowFromPoint(squares[3], dot, dot.get_color()))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two polygons:\n\n1. An isosceles triangle on the left side of the screen, with its base at the top and the vertex pointing downward.\n2. A complex six-pointed polygon on the right side, outlined in purple, formed by connecting six specified points that create a shape resembling a square with additional triangular extensions."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PolygonExample(Scene):\n    def construct(self):\n        isosceles = Polygon([-5, 1.5, 0], [-2, 1.5, 0], [-3.5, -2, 0])\n        position_list = [\n            [4, 1, 0],  # middle right\n            [4, -2.5, 0],  # bottom right\n            [0, -2.5, 0],  # bottom left\n            [0, 3, 0],  # top left\n            [2, 1, 0],  # middle\n            [4, 3, 0],  # top right\n        ]\n        square_and_triangles = Polygon(*position_list, color=PURPLE_B)\n        self.add(isosceles, square_and_triangles)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two polygons:\n\n1. An isosceles triangle on the left side of the screen, with its base at the top and the vertex pointing downward.\n2. A complex six-pointed polygon on the right side, outlined in purple, formed by connecting six specified points that create a shape resembling a square with additional triangular extensions."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PolygonExample(Scene):\n    def construct(self):\n        isosceles = Polygon([-5, 1.5, 0], [-2, 1.5, 0], [-3.5, -2, 0])\n        position_list = [\n            [4, 1, 0],  # middle right\n            [4, -2.5, 0],  # bottom right\n            [0, -2.5, 0],  # bottom left\n            [0, 3, 0],  # top left\n            [2, 1, 0],  # middle\n            [4, 3, 0],  # top right\n        ]\n        square_and_triangles = Polygon(*position_list, color=PURPLE_B)\n        self.add(isosceles, square_and_triangles)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display two polygons:\n\n1. An isosceles triangle on the left side of the screen, with its base at the top and the vertex pointing downward.\n2. A complex six-pointed polygon on the right side, outlined in purple, formed by connecting six specified points that create a shape resembling a square with additional triangular extensions."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PolygonExample(Scene):\n    def construct(self):\n        isosceles = Polygon([-5, 1.5, 0], [-2, 1.5, 0], [-3.5, -2, 0])\n        position_list = [\n            [4, 1, 0],  # middle right\n            [4, -2.5, 0],  # bottom right\n            [0, -2.5, 0],  # bottom left\n            [0, 3, 0],  # top left\n            [2, 1, 0],  # middle\n            [4, 3, 0],  # top right\n        ]\n        square_and_triangles = Polygon(*position_list, color=PURPLE_B)\n        self.add(isosceles, square_and_triangles)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D dodecahedron\u2014a twelve-faced polyhedron\u2014centered in the scene. The camera is angled at 75\u00b0 vertically and 30\u00b0 horizontally to provide a clear, tilted view of the shape, showcasing its three-dimensional structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DodecahedronScene(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        obj = Dodecahedron()\n        self.add(obj)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D dodecahedron\u2014a twelve-faced polyhedron\u2014centered in the scene. The camera is angled at 75\u00b0 vertically and 30\u00b0 horizontally to provide a clear, tilted view of the shape, showcasing its three-dimensional structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DodecahedronScene(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        obj = Dodecahedron()\n        self.add(obj)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 3D dodecahedron\u2014a twelve-faced polyhedron\u2014centered in the scene. The camera is angled at 75\u00b0 vertically and 30\u00b0 horizontally to provide a clear, tilted view of the shape, showcasing its three-dimensional structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DodecahedronScene(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        obj = Dodecahedron()\n        self.add(obj)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a green dot at the center of the screen. After a short pause, zooming functionality is activated (though not animated), preparing a magnified view. Then, the dot smoothly shifts to the left while the zoomed-in view follows the motion, highlighting the movement in detail."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UseZoomedScene(ZoomedScene):\n    def construct(self):\n        dot = Dot().set_color(GREEN)\n        self.add(dot)\n        self.wait(1)\n        self.activate_zooming(animate=False)\n        self.wait(1)\n        self.play(dot.animate.shift(LEFT))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a green dot at the center of the screen. After a short pause, zooming functionality is activated (though not animated), preparing a magnified view. Then, the dot smoothly shifts to the left while the zoomed-in view follows the motion, highlighting the movement in detail."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UseZoomedScene(ZoomedScene):\n    def construct(self):\n        dot = Dot().set_color(GREEN)\n        self.add(dot)\n        self.wait(1)\n        self.activate_zooming(animate=False)\n        self.wait(1)\n        self.play(dot.animate.shift(LEFT))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a green dot at the center of the screen. After a short pause, zooming functionality is activated (though not animated), preparing a magnified view. Then, the dot smoothly shifts to the left while the zoomed-in view follows the motion, highlighting the movement in detail."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UseZoomedScene(ZoomedScene):\n    def construct(self):\n        dot = Dot().set_color(GREEN)\n        self.add(dot)\n        self.wait(1)\n        self.activate_zooming(animate=False)\n        self.wait(1)\n        self.play(dot.animate.shift(LEFT))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 table with row and column labels. The first vertical line in the table is colored red, highlighting the leftmost boundary between columns (between row headings and cells)"}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetVerticalLinesExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.get_vertical_lines()[0].set_color(RED)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 table with row and column labels. The first vertical line in the table is colored red, highlighting the leftmost boundary between columns (between row headings and cells)"}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetVerticalLinesExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.get_vertical_lines()[0].set_color(RED)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 2\u00d72 table with row and column labels. The first vertical line in the table is colored red, highlighting the leftmost boundary between columns (between row headings and cells)"}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetVerticalLinesExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.get_vertical_lines()[0].set_color(RED)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a vertical list of the text \u201cOpen Sans\u201d in various font weights, arranged from lightest to heaviest. Each line uses the corresponding weight style (e.g., Thin, Light, Regular, Bold, Black) to visually demonstrate the differences in font thickness. The entire group is scaled down to fit neatly on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DifferentWeight(Scene):\n    def construct(self):\n        import manimpango\n\n        g = VGroup()\n        weight_list = dict(\n            sorted(\n                {\n                    weight: manimpango.Weight(weight).value\n                    for weight in manimpango.Weight\n                }.items(),\n                key=lambda x: x[1],\n            )\n        )\n        for weight in weight_list:\n            g += Text(weight.name, weight=weight.name, font=\"Open Sans\")\n        self.add(g.arrange(DOWN).scale(0.5))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a vertical list of the text \u201cOpen Sans\u201d in various font weights, arranged from lightest to heaviest. Each line uses the corresponding weight style (e.g., Thin, Light, Regular, Bold, Black) to visually demonstrate the differences in font thickness. The entire group is scaled down to fit neatly on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DifferentWeight(Scene):\n    def construct(self):\n        import manimpango\n\n        g = VGroup()\n        weight_list = dict(\n            sorted(\n                {\n                    weight: manimpango.Weight(weight).value\n                    for weight in manimpango.Weight\n                }.items(),\n                key=lambda x: x[1],\n            )\n        )\n        for weight in weight_list:\n            g += Text(weight.name, weight=weight.name, font=\"Open Sans\")\n        self.add(g.arrange(DOWN).scale(0.5))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a vertical list of the text \u201cOpen Sans\u201d in various font weights, arranged from lightest to heaviest. Each line uses the corresponding weight style (e.g., Thin, Light, Regular, Bold, Black) to visually demonstrate the differences in font thickness. The entire group is scaled down to fit neatly on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DifferentWeight(Scene):\n    def construct(self):\n        import manimpango\n\n        g = VGroup()\n        weight_list = dict(\n            sorted(\n                {\n                    weight: manimpango.Weight(weight).value\n                    for weight in manimpango.Weight\n                }.items(),\n                key=lambda x: x[1],\n            )\n        )\n        for weight in weight_list:\n            g += Text(weight.name, weight=weight.name, font=\"Open Sans\")\n        self.add(g.arrange(DOWN).scale(0.5))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a coordinate grid with axes visible. A linear transformation is applied using the matrix \\(\\begin{bmatrix} 1 & 1 \\\\ 0 & 1 \\end{bmatrix}\\), which shears the grid horizontally. Ghost vectors are left behind to show the original positions before the transformation, helping visualize the effect of the matrix on the space."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LinearTransformationSceneExample(LinearTransformationScene):\n    def __init__(self, **kwargs):\n        LinearTransformationScene.__init__(\n            self,\n            show_coordinates=True,\n            leave_ghost_vectors=True,\n            **kwargs\n        )\n\n    def construct(self):\n        matrix = [[1, 1], [0, 1]]\n        self.apply_matrix(matrix)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a coordinate grid with axes visible. A linear transformation is applied using the matrix \\(\\begin{bmatrix} 1 & 1 \\\\ 0 & 1 \\end{bmatrix}\\), which shears the grid horizontally. Ghost vectors are left behind to show the original positions before the transformation, helping visualize the effect of the matrix on the space."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LinearTransformationSceneExample(LinearTransformationScene):\n    def __init__(self, **kwargs):\n        LinearTransformationScene.__init__(\n            self,\n            show_coordinates=True,\n            leave_ghost_vectors=True,\n            **kwargs\n        )\n\n    def construct(self):\n        matrix = [[1, 1], [0, 1]]\n        self.apply_matrix(matrix)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display 3D axes. Show a red checkerboard-patterned sphere. Place the light source above the sphere. Set the camera orientation to a specific angle. "}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ThreeDLightSourcePosition(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        sphere = Surface(\n            lambda u, v: np.array([\n                1.5 * np.cos(u) * np.cos(v),\n                1.5 * np.cos(u) * np.sin(v),\n                1.5 * np.sin(u)\n            ]), v_range=[0, TAU], u_range=[-PI / 2, PI / 2],\n            checkerboard_colors=[RED_D, RED_E], resolution=(15, 32)\n        )\n        self.renderer.camera.light_source.move_to(3*IN) # changes the source of the light\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(axes, sphere)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display 3D axes. Show a red checkerboard-patterned sphere. Place the light source above the sphere. Set the camera orientation to a specific angle. "}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ThreeDLightSourcePosition(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        sphere = Surface(\n            lambda u, v: np.array([\n                1.5 * np.cos(u) * np.cos(v),\n                1.5 * np.cos(u) * np.sin(v),\n                1.5 * np.sin(u)\n            ]), v_range=[0, TAU], u_range=[-PI / 2, PI / 2],\n            checkerboard_colors=[RED_D, RED_E], resolution=(15, 32)\n        )\n        self.renderer.camera.light_source.move_to(3*IN) # changes the source of the light\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(axes, sphere)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a blue dot on the left and a red dot on the right, each with a short horizontal line extending from them. A smooth cubic B\u00e9zier curve connects the ends of these lines, arching from the blue dot\u2019s line to the red dot\u2019s line, forming a flowing S-shaped path across the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BezierSplineExample(Scene):\n    def construct(self):\n        p1 = np.array([-3, 1, 0])\n        p1b = p1 + [1, 0, 0]\n        d1 = Dot(point=p1).set_color(BLUE)\n        l1 = Line(p1, p1b)\n        p2 = np.array([3, -1, 0])\n        p2b = p2 - [1, 0, 0]\n        d2 = Dot(point=p2).set_color(RED)\n        l2 = Line(p2, p2b)\n        bezier = CubicBezier(p1b, p1b + 3 * RIGHT, p2b - 3 * RIGHT, p2b)\n        self.add(l1, d1, l2, d2, bezier)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a blue dot on the left and a red dot on the right, each with a short horizontal line extending from them. A smooth cubic B\u00e9zier curve connects the ends of these lines, arching from the blue dot\u2019s line to the red dot\u2019s line, forming a flowing S-shaped path across the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BezierSplineExample(Scene):\n    def construct(self):\n        p1 = np.array([-3, 1, 0])\n        p1b = p1 + [1, 0, 0]\n        d1 = Dot(point=p1).set_color(BLUE)\n        l1 = Line(p1, p1b)\n        p2 = np.array([3, -1, 0])\n        p2b = p2 - [1, 0, 0]\n        d2 = Dot(point=p2).set_color(RED)\n        l2 = Line(p2, p2b)\n        bezier = CubicBezier(p1b, p1b + 3 * RIGHT, p2b - 3 * RIGHT, p2b)\n        self.add(l1, d1, l2, d2, bezier)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D blue cube with semi-transparent faces (70% opacity) and a side length of 3 units, centered in the scene. The camera is angled at 75\u00b0 vertically and -45\u00b0 horizontally, providing a clear, tilted view that reveals multiple faces of the cube simultaneously. A 3D coordinate axis system is also present in the scene for spatial reference."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CubeExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75*DEGREES, theta=-45*DEGREES)\n\n        axes = ThreeDAxes()\n        cube = Cube(side_length=3, fill_opacity=0.7, fill_color=BLUE)\n        self.add(cube)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D blue cube with semi-transparent faces (70% opacity) and a side length of 3 units, centered in the scene. The camera is angled at 75\u00b0 vertically and -45\u00b0 horizontally, providing a clear, tilted view that reveals multiple faces of the cube simultaneously. A 3D coordinate axis system is also present in the scene for spatial reference."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CubeExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75*DEGREES, theta=-45*DEGREES)\n\n        axes = ThreeDAxes()\n        cube = Cube(side_length=3, fill_opacity=0.7, fill_color=BLUE)\n        self.add(cube)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 3D blue cube with semi-transparent faces (70% opacity) and a side length of 3 units, centered in the scene. The camera is angled at 75\u00b0 vertically and -45\u00b0 horizontally, providing a clear, tilted view that reveals multiple faces of the cube simultaneously. A 3D coordinate axis system is also present in the scene for spatial reference."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CubeExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75*DEGREES, theta=-45*DEGREES)\n\n        axes = ThreeDAxes()\n        cube = Cube(side_length=3, fill_opacity=0.7, fill_color=BLUE)\n        self.add(cube)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display 3D axes and a circle. Set the camera orientation to a specific angle. Begin rotating the camera around the scene horizontally at a slow rate. Stop the camera rotation and reset the camera to the original orientation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ThreeDCameraRotation(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        circle=Circle()\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(circle,axes)\n        self.begin_ambient_camera_rotation(rate=0.1)\n        self.wait()\n        self.stop_ambient_camera_rotation()\n        self.move_camera(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display 3D axes and a circle. Set the camera orientation to a specific angle. Begin rotating the camera around the scene horizontally at a slow rate. Stop the camera rotation and reset the camera to the original orientation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ThreeDCameraRotation(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        circle=Circle()\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(circle,axes)\n        self.begin_ambient_camera_rotation(rate=0.1)\n        self.wait()\n        self.stop_ambient_camera_rotation()\n        self.move_camera(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the text \"Hello World\" in blue at the center of the screen. The camera then smoothly zooms in to slightly enlarge the view around the text. After a brief pause, the camera smoothly zooms back out to its original framing, restoring the initial view."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ChangingCameraWidthAndRestore(MovingCameraScene):\n    def construct(self):\n        text = Text(\"Hello World\").set_color(BLUE)\n        self.add(text)\n        self.camera.frame.save_state()\n        self.play(self.camera.frame.animate.set(width=text.width * 1.2))\n        self.wait(0.3)\n        self.play(Restore(self.camera.frame))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the text \"Hello World\" in blue at the center of the screen. The camera then smoothly zooms in to slightly enlarge the view around the text. After a brief pause, the camera smoothly zooms back out to its original framing, restoring the initial view."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ChangingCameraWidthAndRestore(MovingCameraScene):\n    def construct(self):\n        text = Text(\"Hello World\").set_color(BLUE)\n        self.add(text)\n        self.camera.frame.save_state()\n        self.play(self.camera.frame.animate.set(width=text.width * 1.2))\n        self.wait(0.3)\n        self.play(Restore(self.camera.frame))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a number plane. Show a dot at the origin (0, 0) with the label \"(0, 0)\" below it. Draw an arrow from the origin to the point (2, 2) with the label \"(2, 2)\" next to the arrow's tip."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass VectorArrow(Scene):\n    def construct(self):\n        dot = Dot(ORIGIN)\n        arrow = Arrow(ORIGIN, [2, 2, 0], buff=0)\n        numberplane = NumberPlane()\n        origin_text = Text('(0, 0)').next_to(dot, DOWN)\n        tip_text = Text('(2, 2)').next_to(arrow.get_end(), RIGHT)\n        self.add(numberplane, dot, arrow, origin_text, tip_text)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a number plane. Show a dot at the origin (0, 0) with the label \"(0, 0)\" below it. Draw an arrow from the origin to the point (2, 2) with the label \"(2, 2)\" next to the arrow's tip."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass VectorArrow(Scene):\n    def construct(self):\n        dot = Dot(ORIGIN)\n        arrow = Arrow(ORIGIN, [2, 2, 0], buff=0)\n        numberplane = NumberPlane()\n        origin_text = Text('(0, 0)').next_to(dot, DOWN)\n        tip_text = Text('(2, 2)').next_to(arrow.get_end(), RIGHT)\n        self.add(numberplane, dot, arrow, origin_text, tip_text)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the word \"Colors\" in large font, with each letter randomly assigned a different bright color."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass IterateColor(Scene):\n    def construct(self):\n        text = Text(\"Colors\", font_size=96)\n        for letter in text:\n            letter.set_color(random_bright_color())\n        self.add(text)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the word \"Colors\" in large font, with each letter randomly assigned a different bright color."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass IterateColor(Scene):\n    def construct(self):\n        text = Text(\"Colors\", font_size=96)\n        for letter in text:\n            letter.set_color(random_bright_color())\n        self.add(text)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display four diagrams arranged horizontally, each showing two intersecting lines forming right angles. In each diagram, a right angle is marked with a curved arc and a dot at the vertex. The arcs vary in size, position, color, and styling\u2014some use different quadrants, stroke widths, and dot colors\u2014demonstrating different ways to annotate right angles."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RightArcAngleExample(Scene):\n    def construct(self):\n        line1 = Line( LEFT, RIGHT )\n        line2 = Line( DOWN, UP )\n        rightarcangles = [\n            Angle(line1, line2, dot=True),\n            Angle(line1, line2, radius=0.4, quadrant=(1,-1), dot=True, other_angle=True),\n            Angle(line1, line2, radius=0.5, quadrant=(-1,1), stroke_width=8, dot=True, dot_color=YELLOW, dot_radius=0.04, other_angle=True),\n            Angle(line1, line2, radius=0.7, quadrant=(-1,-1), color=RED, dot=True, dot_color=GREEN, dot_radius=0.08),\n        ]\n        plots = VGroup()\n        for angle in rightarcangles:\n            plot=VGroup(line1.copy(),line2.copy(), angle)\n            plots.add(plot)\n        plots.arrange(buff=1.5)\n        self.add(plots)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display four diagrams arranged horizontally, each showing two intersecting lines forming right angles. In each diagram, a right angle is marked with a curved arc and a dot at the vertex. The arcs vary in size, position, color, and styling\u2014some use different quadrants, stroke widths, and dot colors\u2014demonstrating different ways to annotate right angles."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RightArcAngleExample(Scene):\n    def construct(self):\n        line1 = Line( LEFT, RIGHT )\n        line2 = Line( DOWN, UP )\n        rightarcangles = [\n            Angle(line1, line2, dot=True),\n            Angle(line1, line2, radius=0.4, quadrant=(1,-1), dot=True, other_angle=True),\n            Angle(line1, line2, radius=0.5, quadrant=(-1,1), stroke_width=8, dot=True, dot_color=YELLOW, dot_radius=0.04, other_angle=True),\n            Angle(line1, line2, radius=0.7, quadrant=(-1,-1), color=RED, dot=True, dot_color=GREEN, dot_radius=0.08),\n        ]\n        plots = VGroup()\n        for angle in rightarcangles:\n            plot=VGroup(line1.copy(),line2.copy(), angle)\n            plots.add(plot)\n        plots.arrange(buff=1.5)\n        self.add(plots)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display four diagrams arranged horizontally, each showing two intersecting lines forming right angles. In each diagram, a right angle is marked with a curved arc and a dot at the vertex. The arcs vary in size, position, color, and styling\u2014some use different quadrants, stroke widths, and dot colors\u2014demonstrating different ways to annotate right angles."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RightArcAngleExample(Scene):\n    def construct(self):\n        line1 = Line( LEFT, RIGHT )\n        line2 = Line( DOWN, UP )\n        rightarcangles = [\n            Angle(line1, line2, dot=True),\n            Angle(line1, line2, radius=0.4, quadrant=(1,-1), dot=True, other_angle=True),\n            Angle(line1, line2, radius=0.5, quadrant=(-1,1), stroke_width=8, dot=True, dot_color=YELLOW, dot_radius=0.04, other_angle=True),\n            Angle(line1, line2, radius=0.7, quadrant=(-1,-1), color=RED, dot=True, dot_color=GREEN, dot_radius=0.08),\n        ]\n        plots = VGroup()\n        for angle in rightarcangles:\n            plot=VGroup(line1.copy(),line2.copy(), angle)\n            plots.add(plot)\n        plots.arrange(buff=1.5)\n        self.add(plots)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a bulleted list with three items\u2014\u201cItem 1,\u201d \u201cItem 2,\u201d and \u201cItem 3\u201d\u2014arranged within a 2\u00d72 area. Each item is colored differently: \u201cItem 1\u201d in red, \u201cItem 2\u201d in green, and \u201cItem 3\u201d in blue. The list appears centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BulletedListExample(Scene):\n    def construct(self):\n        blist = BulletedList(\"Item 1\", \"Item 2\", \"Item 3\", height=2, width=2)\n        blist.set_color_by_tex(\"Item 1\", RED)\n        blist.set_color_by_tex(\"Item 2\", GREEN)\n        blist.set_color_by_tex(\"Item 3\", BLUE)\n        self.add(blist)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a bulleted list with three items\u2014\u201cItem 1,\u201d \u201cItem 2,\u201d and \u201cItem 3\u201d\u2014arranged within a 2\u00d72 area. Each item is colored differently: \u201cItem 1\u201d in red, \u201cItem 2\u201d in green, and \u201cItem 3\u201d in blue. The list appears centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BulletedListExample(Scene):\n    def construct(self):\n        blist = BulletedList(\"Item 1\", \"Item 2\", \"Item 3\", height=2, width=2)\n        blist.set_color_by_tex(\"Item 1\", RED)\n        blist.set_color_by_tex(\"Item 2\", GREEN)\n        blist.set_color_by_tex(\"Item 3\", BLUE)\n        self.add(blist)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a bulleted list with three items\u2014\u201cItem 1,\u201d \u201cItem 2,\u201d and \u201cItem 3\u201d\u2014arranged within a 2\u00d72 area. Each item is colored differently: \u201cItem 1\u201d in red, \u201cItem 2\u201d in green, and \u201cItem 3\u201d in blue. The list appears centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BulletedListExample(Scene):\n    def construct(self):\n        blist = BulletedList(\"Item 1\", \"Item 2\", \"Item 3\", height=2, width=2)\n        blist.set_color_by_tex(\"Item 1\", RED)\n        blist.set_color_by_tex(\"Item 2\", GREEN)\n        blist.set_color_by_tex(\"Item 3\", BLUE)\n        self.add(blist)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 matrix  \n\\[\n\\begin{bmatrix}\n2 & 3 \\\\\n1 & 5\n\\end{bmatrix}\n\\]  \nwith each entry individually colored:  \n- 2 in blue  \n- 3 in green  \n- 1 in yellow  \n- 5 in red  \n\nThe matrix appears on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetEntriesExample(Scene):\n    def construct(self):\n        m0 = Matrix([[2, 3], [1, 5]])\n        ent = m0.get_entries()\n        colors = [BLUE, GREEN, YELLOW, RED]\n        for k in range(len(colors)):\n            ent[k].set_color(colors[k])\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 matrix  \n\\[\n\\begin{bmatrix}\n2 & 3 \\\\\n1 & 5\n\\end{bmatrix}\n\\]  \nwith each entry individually colored:  \n- 2 in blue  \n- 3 in green  \n- 1 in yellow  \n- 5 in red  \n\nThe matrix appears on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetEntriesExample(Scene):\n    def construct(self):\n        m0 = Matrix([[2, 3], [1, 5]])\n        ent = m0.get_entries()\n        colors = [BLUE, GREEN, YELLOW, RED]\n        for k in range(len(colors)):\n            ent[k].set_color(colors[k])\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 2\u00d72 matrix  \n\\[\n\\begin{bmatrix}\n2 & 3 \\\\\n1 & 5\n\\end{bmatrix}\n\\]  \nwith each entry individually colored:  \n- 2 in blue  \n- 3 in green  \n- 1 in yellow  \n- 5 in red  \n\nThe matrix appears on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetEntriesExample(Scene):\n    def construct(self):\n        m0 = Matrix([[2, 3], [1, 5]])\n        ent = m0.get_entries()\n        colors = [BLUE, GREEN, YELLOW, RED]\n        for k in range(len(colors)):\n            ent[k].set_color(colors[k])\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a square at the center of the screen, then animate it with a smooth transformation: first, the top and bottom edges ripple slightly in a sine wave pattern, and then the entire square continues to undulate with a traveling wave effect across its shape, creating a dynamic, wavy distortion over time, almost like how a flag would wave at wind."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass HomotopyExample(Scene):\n    def construct(self):\n        square = Square()\n\n        def homotopy(x, y, z, t):\n            if t <= 0.25:\n                progress = t / 0.25\n                return (x, y + progress * 0.2 * np.sin(x), z)\n            else:\n                wave_progress = (t - 0.25) / 0.75\n                return (x, y + 0.2 * np.sin(x + 10 * wave_progress), z)\n\n        self.play(Homotopy(homotopy, square, rate_func= linear, run_time=2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a square at the center of the screen, then animate it with a smooth transformation: first, the top and bottom edges ripple slightly in a sine wave pattern, and then the entire square continues to undulate with a traveling wave effect across its shape, creating a dynamic, wavy distortion over time, almost like how a flag would wave at wind."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass HomotopyExample(Scene):\n    def construct(self):\n        square = Square()\n\n        def homotopy(x, y, z, t):\n            if t <= 0.25:\n                progress = t / 0.25\n                return (x, y + progress * 0.2 * np.sin(x), z)\n            else:\n                wave_progress = (t - 0.25) / 0.75\n                return (x, y + 0.2 * np.sin(x + 10 * wave_progress), z)\n\n        self.play(Homotopy(homotopy, square, rate_func= linear, run_time=2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a solid red square on the left and a solid blue circle overlapping it slightly from the top right. On the right side of the screen, show a green shape representing the difference\u2014where the overlapping part of the circle has been subtracted from the square."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DifferenceExample(Scene):\n    def construct(self):\n        sq = Square(color=RED, fill_opacity=1)\n        sq.move_to([-2, 0, 0])\n        cr = Circle(color=BLUE, fill_opacity=1)\n        cr.move_to([-1.3, 0.7, 0])\n        un = Difference(sq, cr, color=GREEN, fill_opacity=1)\n        un.move_to([1.5, 0, 0])\n        self.add(sq, cr, un)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a solid red square on the left and a solid blue circle overlapping it slightly from the top right. On the right side of the screen, show a green shape representing the difference\u2014where the overlapping part of the circle has been subtracted from the square."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DifferenceExample(Scene):\n    def construct(self):\n        sq = Square(color=RED, fill_opacity=1)\n        sq.move_to([-2, 0, 0])\n        cr = Circle(color=BLUE, fill_opacity=1)\n        cr.move_to([-1.3, 0.7, 0])\n        un = Difference(sq, cr, color=GREEN, fill_opacity=1)\n        un.move_to([1.5, 0, 0])\n        self.add(sq, cr, un)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a vector field using arrows, where each arrow\u2019s direction and length are determined by a sine and cosine-based function. A gray reference circle appears on the left, followed by a red circle and a dot placed on the same position. Both the circle and the dot begin to move dynamically through the vector field, following its flow. The circle uses a pointwise nudge effect, while the dot follows a smoother path, creating a visual contrast in how each object responds to the field over time."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Nudging(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[1] / 2) * RIGHT + np.cos(pos[0] / 2) * UP\n        vector_field = ArrowVectorField(\n            func, x_range=[-7, 7, 1], y_range=[-4, 4, 1], length_func=lambda x: x / 2\n        )\n        self.add(vector_field)\n        circle = Circle(radius=2).shift(LEFT)\n        self.add(circle.copy().set_color(GRAY))\n        dot = Dot().move_to(circle)\n\n        vector_field.nudge(circle, -2, 60, True)\n        vector_field.nudge(dot, -2, 60)\n\n        circle.add_updater(vector_field.get_nudge_updater(pointwise=True))\n        dot.add_updater(vector_field.get_nudge_updater())\n        self.add(circle, dot)\n        self.wait(6)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a vector field using arrows, where each arrow\u2019s direction and length are determined by a sine and cosine-based function. A gray reference circle appears on the left, followed by a red circle and a dot placed on the same position. Both the circle and the dot begin to move dynamically through the vector field, following its flow. The circle uses a pointwise nudge effect, while the dot follows a smoother path, creating a visual contrast in how each object responds to the field over time."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Nudging(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[1] / 2) * RIGHT + np.cos(pos[0] / 2) * UP\n        vector_field = ArrowVectorField(\n            func, x_range=[-7, 7, 1], y_range=[-4, 4, 1], length_func=lambda x: x / 2\n        )\n        self.add(vector_field)\n        circle = Circle(radius=2).shift(LEFT)\n        self.add(circle.copy().set_color(GRAY))\n        dot = Dot().move_to(circle)\n\n        vector_field.nudge(circle, -2, 60, True)\n        vector_field.nudge(dot, -2, 60)\n\n        circle.add_updater(vector_field.get_nudge_updater(pointwise=True))\n        dot.add_updater(vector_field.get_nudge_updater())\n        self.add(circle, dot)\n        self.wait(6)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a vector field using arrows, where each arrow\u2019s direction and length are determined by a sine and cosine-based function. A gray reference circle appears on the left, followed by a red circle and a dot placed on the same position. Both the circle and the dot begin to move dynamically through the vector field, following its flow. The circle uses a pointwise nudge effect, while the dot follows a smoother path, creating a visual contrast in how each object responds to the field over time."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass Nudging(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[1] / 2) * RIGHT + np.cos(pos[0] / 2) * UP\n        vector_field = ArrowVectorField(\n            func, x_range=[-7, 7, 1], y_range=[-4, 4, 1], length_func=lambda x: x / 2\n        )\n        self.add(vector_field)\n        circle = Circle(radius=2).shift(LEFT)\n        self.add(circle.copy().set_color(GRAY))\n        dot = Dot().move_to(circle)\n\n        vector_field.nudge(circle, -2, 60, True)\n        vector_field.nudge(dot, -2, 60)\n\n        circle.add_updater(vector_field.get_nudge_updater(pointwise=True))\n        dot.add_updater(vector_field.get_nudge_updater())\n        self.add(circle, dot)\n        self.wait(6)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display four squares arranged in a row. Animate each square growing outward from a different edge: the first from the bottom, the second from the right, the third from the upper right corner, and the fourth from the top with its starting edge highlighted in red."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GrowFromEdgeExample(Scene):\n    def construct(self):\n        squares = [Square() for _ in range(4)]\n        VGroup(*squares).set_x(0).arrange(buff=1)\n        self.play(GrowFromEdge(squares[0], DOWN))\n        self.play(GrowFromEdge(squares[1], RIGHT))\n        self.play(GrowFromEdge(squares[2], UR))\n        self.play(GrowFromEdge(squares[3], UP, point_color=RED))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display four squares arranged in a row. Animate each square growing outward from a different edge: the first from the bottom, the second from the right, the third from the upper right corner, and the fourth from the top with its starting edge highlighted in red."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GrowFromEdgeExample(Scene):\n    def construct(self):\n        squares = [Square() for _ in range(4)]\n        VGroup(*squares).set_x(0).arrange(buff=1)\n        self.play(GrowFromEdge(squares[0], DOWN))\n        self.play(GrowFromEdge(squares[1], RIGHT))\n        self.play(GrowFromEdge(squares[2], UR))\n        self.play(GrowFromEdge(squares[3], UP, point_color=RED))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 3D scene with the camera angled slightly from above and to the side. Show three colored spheres: a small red sphere positioned to the right, a large green sphere placed in the lower-left area, and a large blue sphere located in the upper-left area. All spheres appear simultaneously and remain static in the scene."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleSphere(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=PI / 6, theta=PI / 6)\n        sphere1 = Sphere(\n            center=(3, 0, 0),\n            radius=1,\n            resolution=(20, 20),\n            u_range=[0.001, PI - 0.001],\n            v_range=[0, TAU]\n        )\n        sphere1.set_color(RED)\n        self.add(sphere1)\n        sphere2 = Sphere(center=(-1, -3, 0), radius=2, resolution=(18, 18))\n        sphere2.set_color(GREEN)\n        self.add(sphere2)\n        sphere3 = Sphere(center=(-1, 2, 0), radius=2, resolution=(16, 16))\n        sphere3.set_color(BLUE)\n        self.add(sphere3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 3D scene with the camera angled slightly from above and to the side. Show three colored spheres: a small red sphere positioned to the right, a large green sphere placed in the lower-left area, and a large blue sphere located in the upper-left area. All spheres appear simultaneously and remain static in the scene."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleSphere(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=PI / 6, theta=PI / 6)\n        sphere1 = Sphere(\n            center=(3, 0, 0),\n            radius=1,\n            resolution=(20, 20),\n            u_range=[0.001, PI - 0.001],\n            v_range=[0, TAU]\n        )\n        sphere1.set_color(RED)\n        self.add(sphere1)\n        sphere2 = Sphere(center=(-1, -3, 0), radius=2, resolution=(18, 18))\n        sphere2.set_color(GREEN)\n        self.add(sphere2)\n        sphere3 = Sphere(center=(-1, 2, 0), radius=2, resolution=(16, 16))\n        sphere3.set_color(BLUE)\n        self.add(sphere3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 3D scene with the camera angled slightly from above and to the side. Show three colored spheres: a small red sphere positioned to the right, a large green sphere placed in the lower-left area, and a large blue sphere located in the upper-left area. All spheres appear simultaneously and remain static in the scene."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleSphere(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=PI / 6, theta=PI / 6)\n        sphere1 = Sphere(\n            center=(3, 0, 0),\n            radius=1,\n            resolution=(20, 20),\n            u_range=[0.001, PI - 0.001],\n            v_range=[0, TAU]\n        )\n        sphere1.set_color(RED)\n        self.add(sphere1)\n        sphere2 = Sphere(center=(-1, -3, 0), radius=2, resolution=(18, 18))\n        sphere2.set_color(GREEN)\n        self.add(sphere2)\n        sphere3 = Sphere(center=(-1, 2, 0), radius=2, resolution=(16, 16))\n        sphere3.set_color(BLUE)\n        self.add(sphere3)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a white dot shifted to the upper left. Firstly, display a purple rectangle around the dot and word \"Frame\" around that dot. The display a small red-framed inset springing up below, showing a close-up of whatever the purpose box encloses. Show \"Zoomed camera\" under this red-framed inset. The inset operates as a maginifier to the earlier purple rectangle. The inset briefly doubles in size for emphasis before the purple box drifts downward, shifting the zoom focus. Finally, fold the inset back into the purple rectangle gently erasing both frames, leaving only the original dot."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingZoomedSceneAround(ZoomedScene):\n# contributed by TheoremofBeethoven, www.youtube.com/c/TheoremofBeethoven\n    def __init__(self, **kwargs):\n        ZoomedScene.__init__(\n            self,\n            zoom_factor=0.3,\n            zoomed_display_height=1,\n            zoomed_display_width=6,\n            image_frame_stroke_width=20,\n            zoomed_camera_config={\n                \"default_frame_stroke_width\": 3,\n                },\n            **kwargs\n        )\n\n    def construct(self):\n        dot = Dot().shift(UL * 2)\n        image = ImageMobject(np.uint8([[0, 100, 30, 200],\n                                       [255, 0, 5, 33]]))\n        image.height = 7\n        frame_text = Text(\"Frame\", color=PURPLE, font_size=67)\n        zoomed_camera_text = Text(\"Zoomed camera\", color=RED, font_size=67)\n\n        self.add(image, dot)\n        zoomed_camera = self.zoomed_camera\n        zoomed_display = self.zoomed_display\n        frame = zoomed_camera.frame\n        zoomed_display_frame = zoomed_display.display_frame\n\n        frame.move_to(dot)\n        frame.set_color(PURPLE)\n        zoomed_display_frame.set_color(RED)\n        zoomed_display.shift(DOWN)\n\n        zd_rect = BackgroundRectangle(zoomed_display, fill_opacity=0, buff=MED_SMALL_BUFF)\n        self.add_foreground_mobject(zd_rect)\n\n        unfold_camera = UpdateFromFunc(zd_rect, lambda rect: rect.replace(zoomed_display))\n\n        frame_text.next_to(frame, DOWN)\n\n        self.play(Create(frame), FadeIn(frame_text, shift=UP))\n        self.activate_zooming()\n\n        self.play(self.get_zoomed_display_pop_out_animation(), unfold_camera)\n        zoomed_camera_text.next_to(zoomed_display_frame, DOWN)\n        self.play(FadeIn(zoomed_camera_text, shift=UP))\n        # Scale in        x   y  z\n        scale_factor = [0.5, 1.5, 0]\n        self.play(\n            frame.animate.scale(scale_factor),\n            zoomed_display.animate.scale(scale_factor),\n            FadeOut(zoomed_camera_text),\n            FadeOut(frame_text)\n        )\n        self.wait()\n        self.play(ScaleInPlace(zoomed_display, 2))\n        self.wait()\n        self.play(frame.animate.shift(2.5 * DOWN))\n        self.wait()\n        self.play(self.get_zoomed_display_pop_out_animation(), unfold_camera, rate_func=lambda t: smooth(1 - t))\n        self.play(Uncreate(zoomed_display_frame), FadeOut(frame))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a white dot shifted to the upper left. Firstly, display a purple rectangle around the dot and word \"Frame\" around that dot. The display a small red-framed inset springing up below, showing a close-up of whatever the purpose box encloses. Show \"Zoomed camera\" under this red-framed inset. The inset operates as a maginifier to the earlier purple rectangle. The inset briefly doubles in size for emphasis before the purple box drifts downward, shifting the zoom focus. Finally, fold the inset back into the purple rectangle gently erasing both frames, leaving only the original dot."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingZoomedSceneAround(ZoomedScene):\n# contributed by TheoremofBeethoven, www.youtube.com/c/TheoremofBeethoven\n    def __init__(self, **kwargs):\n        ZoomedScene.__init__(\n            self,\n            zoom_factor=0.3,\n            zoomed_display_height=1,\n            zoomed_display_width=6,\n            image_frame_stroke_width=20,\n            zoomed_camera_config={\n                \"default_frame_stroke_width\": 3,\n                },\n            **kwargs\n        )\n\n    def construct(self):\n        dot = Dot().shift(UL * 2)\n        image = ImageMobject(np.uint8([[0, 100, 30, 200],\n                                       [255, 0, 5, 33]]))\n        image.height = 7\n        frame_text = Text(\"Frame\", color=PURPLE, font_size=67)\n        zoomed_camera_text = Text(\"Zoomed camera\", color=RED, font_size=67)\n\n        self.add(image, dot)\n        zoomed_camera = self.zoomed_camera\n        zoomed_display = self.zoomed_display\n        frame = zoomed_camera.frame\n        zoomed_display_frame = zoomed_display.display_frame\n\n        frame.move_to(dot)\n        frame.set_color(PURPLE)\n        zoomed_display_frame.set_color(RED)\n        zoomed_display.shift(DOWN)\n\n        zd_rect = BackgroundRectangle(zoomed_display, fill_opacity=0, buff=MED_SMALL_BUFF)\n        self.add_foreground_mobject(zd_rect)\n\n        unfold_camera = UpdateFromFunc(zd_rect, lambda rect: rect.replace(zoomed_display))\n\n        frame_text.next_to(frame, DOWN)\n\n        self.play(Create(frame), FadeIn(frame_text, shift=UP))\n        self.activate_zooming()\n\n        self.play(self.get_zoomed_display_pop_out_animation(), unfold_camera)\n        zoomed_camera_text.next_to(zoomed_display_frame, DOWN)\n        self.play(FadeIn(zoomed_camera_text, shift=UP))\n        # Scale in        x   y  z\n        scale_factor = [0.5, 1.5, 0]\n        self.play(\n            frame.animate.scale(scale_factor),\n            zoomed_display.animate.scale(scale_factor),\n            FadeOut(zoomed_camera_text),\n            FadeOut(frame_text)\n        )\n        self.wait()\n        self.play(ScaleInPlace(zoomed_display, 2))\n        self.wait()\n        self.play(frame.animate.shift(2.5 * DOWN))\n        self.wait()\n        self.play(self.get_zoomed_display_pop_out_animation(), unfold_camera, rate_func=lambda t: smooth(1 - t))\n        self.play(Uncreate(zoomed_display_frame), FadeOut(frame))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a square being drawn on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CreateScene(Scene):\n    def construct(self):\n        self.play(Create(Square()))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a square being drawn on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CreateScene(Scene):\n    def construct(self):\n        self.play(Create(Square()))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a square being drawn on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CreateScene(Scene):\n    def construct(self):\n        self.play(Create(Square()))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display six identical squares arranged in a grid with two rows and three columns, with a small space between each square, all centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleBoxes(Scene):\n    def construct(self):\n        boxes=VGroup(*[Square() for s in range(0,6)])\n        boxes.arrange_in_grid(rows=2, buff=0.1)\n        self.add(boxes)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display six identical squares arranged in a grid with two rows and three columns, with a small space between each square, all centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ExampleBoxes(Scene):\n    def construct(self):\n        boxes=VGroup(*[Square() for s in range(0,6)])\n        boxes.arrange_in_grid(rows=2, buff=0.1)\n        self.add(boxes)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three coordinate axes arranged in a triangular layout: one in the upper left, one in the upper right, and one along the bottom. Each axis shows a plot of the logarithmic function \\( y = \\log(x) \\), but with different rendering styles:\n\n- The top-left graph shows a smooth red curve with default interpolation.\n- The top-right graph displays a choppy orange curve due to disabled smoothing.\n- The bottom graph presents a highly detailed green curve using a very fine step size for better accuracy.\n\nThis scene visually compares the effects of interpolation and sampling density on graph quality."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PlotExample(Scene):\n    def construct(self):\n        # construct the axes\n        ax_1 = Axes(\n            x_range=[0.001, 6],\n            y_range=[-8, 2],\n            x_length=5,\n            y_length=3,\n            tips=False,\n        )\n        ax_2 = ax_1.copy()\n        ax_3 = ax_1.copy()\n\n        # position the axes\n        ax_1.to_corner(UL)\n        ax_2.to_corner(UR)\n        ax_3.to_edge(DOWN)\n        axes = VGroup(ax_1, ax_2, ax_3)\n\n        # create the logarithmic curves\n        def log_func(x):\n            return np.log(x)\n\n        # a curve without adjustments; poor interpolation.\n        curve_1 = ax_1.plot(log_func, color=PURE_RED)\n\n        # disabling interpolation makes the graph look choppy as not enough\n        # inputs are available\n        curve_2 = ax_2.plot(log_func, use_smoothing=False, color=ORANGE)\n\n        # taking more inputs of the curve by specifying a step for the\n        # x_range yields expected results, but increases rendering time.\n        curve_3 = ax_3.plot(\n            log_func, x_range=(0.001, 6, 0.001), color=PURE_GREEN\n        )\n\n        curves = VGroup(curve_1, curve_2, curve_3)\n\n        self.add(axes, curves)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three coordinate axes arranged in a triangular layout: one in the upper left, one in the upper right, and one along the bottom. Each axis shows a plot of the logarithmic function \\( y = \\log(x) \\), but with different rendering styles:\n\n- The top-left graph shows a smooth red curve with default interpolation.\n- The top-right graph displays a choppy orange curve due to disabled smoothing.\n- The bottom graph presents a highly detailed green curve using a very fine step size for better accuracy.\n\nThis scene visually compares the effects of interpolation and sampling density on graph quality."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PlotExample(Scene):\n    def construct(self):\n        # construct the axes\n        ax_1 = Axes(\n            x_range=[0.001, 6],\n            y_range=[-8, 2],\n            x_length=5,\n            y_length=3,\n            tips=False,\n        )\n        ax_2 = ax_1.copy()\n        ax_3 = ax_1.copy()\n\n        # position the axes\n        ax_1.to_corner(UL)\n        ax_2.to_corner(UR)\n        ax_3.to_edge(DOWN)\n        axes = VGroup(ax_1, ax_2, ax_3)\n\n        # create the logarithmic curves\n        def log_func(x):\n            return np.log(x)\n\n        # a curve without adjustments; poor interpolation.\n        curve_1 = ax_1.plot(log_func, color=PURE_RED)\n\n        # disabling interpolation makes the graph look choppy as not enough\n        # inputs are available\n        curve_2 = ax_2.plot(log_func, use_smoothing=False, color=ORANGE)\n\n        # taking more inputs of the curve by specifying a step for the\n        # x_range yields expected results, but increases rendering time.\n        curve_3 = ax_3.plot(\n            log_func, x_range=(0.001, 6, 0.001), color=PURE_GREEN\n        )\n\n        curves = VGroup(curve_1, curve_2, curve_3)\n\n        self.add(axes, curves)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a graph with four connected nodes in a default layout. After being created, each node animates to a new position forming a square: node 1 moves to the upper right, node 2 to the upper left, node 3 to the lower right, and node 4 to the lower left. The edges adjust accordingly to maintain the connections between the repositioned nodes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingVertices(Scene):\n    def construct(self):\n        vertices = [1, 2, 3, 4]\n        edges = [(1, 2), (2, 3), (3, 4), (1, 3), (1, 4)]\n        g = Graph(vertices, edges)\n        self.play(Create(g))\n        self.wait()\n        self.play(g[1].animate.move_to([1, 1, 0]),\n                  g[2].animate.move_to([-1, 1, 0]),\n                  g[3].animate.move_to([1, -1, 0]),\n                  g[4].animate.move_to([-1, -1, 0]))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a graph with four connected nodes in a default layout. After being created, each node animates to a new position forming a square: node 1 moves to the upper right, node 2 to the upper left, node 3 to the lower right, and node 4 to the lower left. The edges adjust accordingly to maintain the connections between the repositioned nodes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingVertices(Scene):\n    def construct(self):\n        vertices = [1, 2, 3, 4]\n        edges = [(1, 2), (2, 3), (3, 4), (1, 3), (1, 4)]\n        g = Graph(vertices, edges)\n        self.play(Create(g))\n        self.wait()\n        self.play(g[1].animate.move_to([1, 1, 0]),\n                  g[2].animate.move_to([-1, 1, 0]),\n                  g[3].animate.move_to([1, -1, 0]),\n                  g[4].animate.move_to([-1, -1, 0]))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a graph with four connected nodes in a default layout. After being created, each node animates to a new position forming a square: node 1 moves to the upper right, node 2 to the upper left, node 3 to the lower right, and node 4 to the lower left. The edges adjust accordingly to maintain the connections between the repositioned nodes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingVertices(Scene):\n    def construct(self):\n        vertices = [1, 2, 3, 4]\n        edges = [(1, 2), (2, 3), (3, 4), (1, 3), (1, 4)]\n        g = Graph(vertices, edges)\n        self.play(Create(g))\n        self.wait()\n        self.play(g[1].animate.move_to([1, 1, 0]),\n                  g[2].animate.move_to([-1, 1, 0]),\n                  g[3].animate.move_to([1, -1, 0]),\n                  g[4].animate.move_to([-1, -1, 0]))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a square centered on the screen. Animate the square moving upward over a duration of three seconds. Then pause for one second."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RunTime(Scene):\n    def construct(self):\n        square = Square()\n        self.add(square)\n        self.play(square.animate.shift(UP), run_time=3)\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a square centered on the screen. Animate the square moving upward over a duration of three seconds. Then pause for one second."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RunTime(Scene):\n    def construct(self):\n        square = Square()\n        self.add(square)\n        self.play(square.animate.shift(UP), run_time=3)\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display two green lines intersecting at the origin, forming a narrow angle. The angle between them is filled with a solid green sector, bordered by two curved arcs. The filled region is highlighted in orange outline, creating a visual emphasis on the measured angle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FilledAngle(Scene):\n    def construct(self):\n        l1 = Line(ORIGIN, 2 * UP + RIGHT).set_color(GREEN)\n        l2 = (\n            Line(ORIGIN, 2 * UP + RIGHT)\n            .set_color(GREEN)\n            .rotate(-20 * DEGREES, about_point=ORIGIN)\n        )\n        norm = l1.get_length()\n        a1 = Angle(l1, l2, other_angle=True, radius=norm - 0.5).set_color(GREEN)\n        a2 = Angle(l1, l2, other_angle=True, radius=norm).set_color(GREEN)\n        q1 = a1.points #  save all coordinates of points of angle a1\n        q2 = a2.reverse_direction().points  #  save all coordinates of points of angle a1 (in reversed direction)\n        pnts = np.concatenate([q1, q2, q1[0].reshape(1, 3)])  # adds points and ensures that path starts and ends at same point\n        mfill = VMobject().set_color(ORANGE)\n        mfill.set_points_as_corners(pnts).set_fill(GREEN, opacity=1)\n        self.add(l1, l2)\n        self.add(mfill)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display two green lines intersecting at the origin, forming a narrow angle. The angle between them is filled with a solid green sector, bordered by two curved arcs. The filled region is highlighted in orange outline, creating a visual emphasis on the measured angle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FilledAngle(Scene):\n    def construct(self):\n        l1 = Line(ORIGIN, 2 * UP + RIGHT).set_color(GREEN)\n        l2 = (\n            Line(ORIGIN, 2 * UP + RIGHT)\n            .set_color(GREEN)\n            .rotate(-20 * DEGREES, about_point=ORIGIN)\n        )\n        norm = l1.get_length()\n        a1 = Angle(l1, l2, other_angle=True, radius=norm - 0.5).set_color(GREEN)\n        a2 = Angle(l1, l2, other_angle=True, radius=norm).set_color(GREEN)\n        q1 = a1.points #  save all coordinates of points of angle a1\n        q2 = a2.reverse_direction().points  #  save all coordinates of points of angle a1 (in reversed direction)\n        pnts = np.concatenate([q1, q2, q1[0].reshape(1, 3)])  # adds points and ensures that path starts and ends at same point\n        mfill = VMobject().set_color(ORANGE)\n        mfill.set_points_as_corners(pnts).set_fill(GREEN, opacity=1)\n        self.add(l1, l2)\n        self.add(mfill)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a number plane with a grid of horizontal and vertical lines. The grid lines are styled with a teal color, medium thickness, and semi-transparent appearance, creating a visually distinct coordinate background."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass NumberPlaneExample(Scene):\n    def construct(self):\n        number_plane = NumberPlane(\n            background_line_style={\n                \"stroke_color\": TEAL,\n                \"stroke_width\": 4,\n                \"stroke_opacity\": 0.6\n            }\n        )\n        self.add(number_plane)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a number plane with a grid of horizontal and vertical lines. The grid lines are styled with a teal color, medium thickness, and semi-transparent appearance, creating a visually distinct coordinate background."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass NumberPlaneExample(Scene):\n    def construct(self):\n        number_plane = NumberPlane(\n            background_line_style={\n                \"stroke_color\": TEAL,\n                \"stroke_width\": 4,\n                \"stroke_opacity\": 0.6\n            }\n        )\n        self.add(number_plane)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a number plane with a grid of horizontal and vertical lines. The grid lines are styled with a teal color, medium thickness, and semi-transparent appearance, creating a visually distinct coordinate background."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass NumberPlaneExample(Scene):\n    def construct(self):\n        number_plane = NumberPlane(\n            background_line_style={\n                \"stroke_color\": TEAL,\n                \"stroke_width\": 4,\n                \"stroke_opacity\": 0.6\n            }\n        )\n        self.add(number_plane)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a coordinate grid with labeled axes, where the x-axis ranges from 0 to 10 and the y-axis uses a logarithmic scale. A curve representing the function \\( y = x^2 \\) is plotted from just above 0 to 10. The graph visually demonstrates how the quadratic function behaves when the vertical axis is scaled logarithmically."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LogScalingExample(Scene):\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 10, 1],\n            y_range=[-2, 6, 1],\n            tips=False,\n            axis_config={\"include_numbers\": True},\n            y_axis_config={\"scaling\": LogBase(custom_labels=True)},\n        )\n\n        # x_min must be > 0 because log is undefined at 0.\n        graph = ax.plot(lambda x: x ** 2, x_range=[0.001, 10], use_smoothing=False)\n        self.add(ax, graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a coordinate grid with labeled axes, where the x-axis ranges from 0 to 10 and the y-axis uses a logarithmic scale. A curve representing the function \\( y = x^2 \\) is plotted from just above 0 to 10. The graph visually demonstrates how the quadratic function behaves when the vertical axis is scaled logarithmically."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LogScalingExample(Scene):\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 10, 1],\n            y_range=[-2, 6, 1],\n            tips=False,\n            axis_config={\"include_numbers\": True},\n            y_axis_config={\"scaling\": LogBase(custom_labels=True)},\n        )\n\n        # x_min must be > 0 because log is undefined at 0.\n        graph = ax.plot(lambda x: x ** 2, x_range=[0.001, 10], use_smoothing=False)\n        self.add(ax, graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 table with row and column labels. The column heading text is colored red-blue gradient, the first row\u2019s text is colored gree, and all other labels are coloured white, creating a clear visual distinction between rows and labels."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SetRowColorsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")]\n        ).set_row_colors([RED,BLUE], GREEN)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 table with row and column labels. The column heading text is colored red-blue gradient, the first row\u2019s text is colored gree, and all other labels are coloured white, creating a clear visual distinction between rows and labels."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SetRowColorsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")]\n        ).set_row_colors([RED,BLUE], GREEN)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 2\u00d72 table with row and column labels. The column heading text is colored red-blue gradient, the first row\u2019s text is colored gree, and all other labels are coloured white, creating a clear visual distinction between rows and labels."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SetRowColorsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")]\n        ).set_row_colors([RED,BLUE], GREEN)\n        self.add(table)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a rectangle being drawn over 3 seconds. Then, one second later, the first line of text \"I was added with Add!\" appears. After another second, the remaining two lines \"Me too!\" and \"And me!\" appear simultaneously, all within the rectangle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DefaultAddScene(Scene):\n    def construct(self):\n        text_1 = Text(\"I was added with Add!\")\n        text_2 = Text(\"Me too!\")\n        text_3 = Text(\"And me!\")\n        texts = VGroup(text_1, text_2, text_3).arrange(DOWN)\n        rect = SurroundingRectangle(texts, buff=0.5)\n\n        self.play(\n            Create(rect, run_time=3.0),\n            Succession(\n                Wait(1.0),\n                # You can Add a Mobject in the middle of an animation...\n                Add(text_1),\n                Wait(1.0),\n                # ...or multiple Mobjects at once!\n                Add(text_2, text_3),\n            ),\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a rectangle being drawn over 3 seconds. Then, one second later, the first line of text \"I was added with Add!\" appears. After another second, the remaining two lines \"Me too!\" and \"And me!\" appear simultaneously, all within the rectangle."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DefaultAddScene(Scene):\n    def construct(self):\n        text_1 = Text(\"I was added with Add!\")\n        text_2 = Text(\"Me too!\")\n        text_3 = Text(\"And me!\")\n        texts = VGroup(text_1, text_2, text_3).arrange(DOWN)\n        rect = SurroundingRectangle(texts, buff=0.5)\n\n        self.play(\n            Create(rect, run_time=3.0),\n            Succession(\n                Wait(1.0),\n                # You can Add a Mobject in the middle of an animation...\n                Add(text_1),\n                Wait(1.0),\n                # ...or multiple Mobjects at once!\n                Add(text_2, text_3),\n            ),\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a vertical list of eight horizontal arrows, each with a different tip style, aligned from top to bottom. Each arrow points from left to right and is accompanied by a smaller, scaled-down version to its right. To the left of each large arrow is a blue label in monospaced font indicating the name of the tip style. The top arrow is yellow with the label \"Default (YELLOW)\", while the rest use default coloring and various tip shapes such as triangle, square, circle, and stealth."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArrowTipsShowcase(Scene):\n    def construct(self):\n        tip_names = [\n            'Default (YELLOW)', 'ArrowTriangleTip', 'Default', 'ArrowSquareTip',\n            'ArrowSquareFilledTip', 'ArrowCircleTip', 'ArrowCircleFilledTip', 'StealthTip'\n        ]\n\n        big_arrows = [\n            Arrow(start=[-4, 3.5, 0], end=[2, 3.5, 0], color=YELLOW),\n            Arrow(start=[-4, 2.5, 0], end=[2, 2.5, 0], tip_shape=ArrowTriangleTip),\n            Arrow(start=[-4, 1.5, 0], end=[2, 1.5, 0]),\n            Arrow(start=[-4, 0.5, 0], end=[2, 0.5, 0], tip_shape=ArrowSquareTip),\n\n            Arrow([-4, -0.5, 0], [2, -0.5, 0], tip_shape=ArrowSquareFilledTip),\n            Arrow([-4, -1.5, 0], [2, -1.5, 0], tip_shape=ArrowCircleTip),\n            Arrow([-4, -2.5, 0], [2, -2.5, 0], tip_shape=ArrowCircleFilledTip),\n            Arrow([-4, -3.5, 0], [2, -3.5, 0], tip_shape=StealthTip)\n        ]\n\n        small_arrows = (\n            arrow.copy().scale(0.5, scale_tips=True).next_to(arrow, RIGHT) for arrow in big_arrows\n        )\n\n        labels = (\n            Text(tip_names[i], font='monospace', font_size=20, color=BLUE).next_to(big_arrows[i], LEFT) for i in range(len(big_arrows))\n        )\n\n        self.add(*big_arrows, *small_arrows, *labels)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a vertical list of eight horizontal arrows, each with a different tip style, aligned from top to bottom. Each arrow points from left to right and is accompanied by a smaller, scaled-down version to its right. To the left of each large arrow is a blue label in monospaced font indicating the name of the tip style. The top arrow is yellow with the label \"Default (YELLOW)\", while the rest use default coloring and various tip shapes such as triangle, square, circle, and stealth."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArrowTipsShowcase(Scene):\n    def construct(self):\n        tip_names = [\n            'Default (YELLOW)', 'ArrowTriangleTip', 'Default', 'ArrowSquareTip',\n            'ArrowSquareFilledTip', 'ArrowCircleTip', 'ArrowCircleFilledTip', 'StealthTip'\n        ]\n\n        big_arrows = [\n            Arrow(start=[-4, 3.5, 0], end=[2, 3.5, 0], color=YELLOW),\n            Arrow(start=[-4, 2.5, 0], end=[2, 2.5, 0], tip_shape=ArrowTriangleTip),\n            Arrow(start=[-4, 1.5, 0], end=[2, 1.5, 0]),\n            Arrow(start=[-4, 0.5, 0], end=[2, 0.5, 0], tip_shape=ArrowSquareTip),\n\n            Arrow([-4, -0.5, 0], [2, -0.5, 0], tip_shape=ArrowSquareFilledTip),\n            Arrow([-4, -1.5, 0], [2, -1.5, 0], tip_shape=ArrowCircleTip),\n            Arrow([-4, -2.5, 0], [2, -2.5, 0], tip_shape=ArrowCircleFilledTip),\n            Arrow([-4, -3.5, 0], [2, -3.5, 0], tip_shape=StealthTip)\n        ]\n\n        small_arrows = (\n            arrow.copy().scale(0.5, scale_tips=True).next_to(arrow, RIGHT) for arrow in big_arrows\n        )\n\n        labels = (\n            Text(tip_names[i], font='monospace', font_size=20, color=BLUE).next_to(big_arrows[i], LEFT) for i in range(len(big_arrows))\n        )\n\n        self.add(*big_arrows, *small_arrows, *labels)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the phrase \"fl ligature\" twice in large font, stacked vertically with some spacing. The top version uses a typographic ligature for \"fl\", while the bottom version disables ligatures, showing the \"f\" and \"l\" as separate characters."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DisableLigature(Scene):\n    def construct(self):\n        li = Text(\"fl ligature\",font_size=96)\n        nli = Text(\"fl ligature\", disable_ligatures=True, font_size=96)\n        self.add(Group(li, nli).arrange(DOWN, buff=.8))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the phrase \"fl ligature\" twice in large font, stacked vertically with some spacing. The top version uses a typographic ligature for \"fl\", while the bottom version disables ligatures, showing the \"f\" and \"l\" as separate characters."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DisableLigature(Scene):\n    def construct(self):\n        li = Text(\"fl ligature\",font_size=96)\n        nli = Text(\"fl ligature\", disable_ligatures=True, font_size=96)\n        self.add(Group(li, nli).arrange(DOWN, buff=.8))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display the phrase \"fl ligature\" twice in large font, stacked vertically with some spacing. The top version uses a typographic ligature for \"fl\", while the bottom version disables ligatures, showing the \"f\" and \"l\" as separate characters."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DisableLigature(Scene):\n    def construct(self):\n        li = Text(\"fl ligature\",font_size=96)\n        nli = Text(\"fl ligature\", disable_ligatures=True, font_size=96)\n        self.add(Group(li, nli).arrange(DOWN, buff=.8))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a group of concentric circles, each with increasing radius and a different color from dark brown through various shades of blue, teal, green, and yellow. The circles are centered on the screen, creating a layered, iris-like visual effect."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArcShapeIris(Scene):\n    def construct(self):\n        colors = [DARK_BROWN, BLUE_E, BLUE_D, BLUE_A, TEAL_B, GREEN_B, YELLOW_E]\n        radius = [1 + rad * 0.1 for rad in range(len(colors))]\n\n        circles_group = VGroup()\n\n        # zip(radius, color) makes the iterator [(radius[i], color[i]) for i in range(radius)]\n        circles_group.add(*[Circle(radius=rad, stroke_width=10, color=col)\n                            for rad, col in zip(radius, colors)])\n        self.add(circles_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a group of concentric circles, each with increasing radius and a different color from dark brown through various shades of blue, teal, green, and yellow. The circles are centered on the screen, creating a layered, iris-like visual effect."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArcShapeIris(Scene):\n    def construct(self):\n        colors = [DARK_BROWN, BLUE_E, BLUE_D, BLUE_A, TEAL_B, GREEN_B, YELLOW_E]\n        radius = [1 + rad * 0.1 for rad in range(len(colors))]\n\n        circles_group = VGroup()\n\n        # zip(radius, color) makes the iterator [(radius[i], color[i]) for i in range(radius)]\n        circles_group.add(*[Circle(radius=rad, stroke_width=10, color=col)\n                            for rad, col in zip(radius, colors)])\n        self.add(circles_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a group of concentric circles, each with increasing radius and a different color from dark brown through various shades of blue, teal, green, and yellow. The circles are centered on the screen, creating a layered, iris-like visual effect."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ArcShapeIris(Scene):\n    def construct(self):\n        colors = [DARK_BROWN, BLUE_E, BLUE_D, BLUE_A, TEAL_B, GREEN_B, YELLOW_E]\n        radius = [1 + rad * 0.1 for rad in range(len(colors))]\n\n        circles_group = VGroup()\n\n        # zip(radius, color) makes the iterator [(radius[i], color[i]) for i in range(radius)]\n        circles_group.add(*[Circle(radius=rad, stroke_width=10, color=col)\n                            for rad, col in zip(radius, colors)])\n        self.add(circles_group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a directed graph with four numbered nodes connected by arrows representing edges. Initially, the graph appears in a default layout. Then, each node animates to a new position in 3D space: node 1 moves to the upper right, node 2 to the upper left and slightly forward, node 3 to the lower right and back, and node 4 to the lower left. The edges adjust dynamically to maintain the connections between the repositioned nodes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingDiGraph(Scene):\n    def construct(self):\n        vertices = [1, 2, 3, 4]\n        edges = [(1, 2), (2, 3), (3, 4), (1, 3), (1, 4)]\n\n        g = DiGraph(vertices, edges)\n\n        self.add(g)\n        self.play(\n            g[1].animate.move_to([1, 1, 1]),\n            g[2].animate.move_to([-1, 1, 2]),\n            g[3].animate.move_to([1, -1, -1]),\n            g[4].animate.move_to([-1, -1, 0]),\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a directed graph with four numbered nodes connected by arrows representing edges. Initially, the graph appears in a default layout. Then, each node animates to a new position in 3D space: node 1 moves to the upper right, node 2 to the upper left and slightly forward, node 3 to the lower right and back, and node 4 to the lower left. The edges adjust dynamically to maintain the connections between the repositioned nodes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingDiGraph(Scene):\n    def construct(self):\n        vertices = [1, 2, 3, 4]\n        edges = [(1, 2), (2, 3), (3, 4), (1, 3), (1, 4)]\n\n        g = DiGraph(vertices, edges)\n\n        self.add(g)\n        self.play(\n            g[1].animate.move_to([1, 1, 1]),\n            g[2].animate.move_to([-1, 1, 2]),\n            g[3].animate.move_to([1, -1, -1]),\n            g[4].animate.move_to([-1, -1, 0]),\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a directed graph with four numbered nodes connected by arrows representing edges. Initially, the graph appears in a default layout. Then, each node animates to a new position in 3D space: node 1 moves to the upper right, node 2 to the upper left and slightly forward, node 3 to the lower right and back, and node 4 to the lower left. The edges adjust dynamically to maintain the connections between the repositioned nodes."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MovingDiGraph(Scene):\n    def construct(self):\n        vertices = [1, 2, 3, 4]\n        edges = [(1, 2), (2, 3), (3, 4), (1, 3), (1, 4)]\n\n        g = DiGraph(vertices, edges)\n\n        self.add(g)\n        self.play(\n            g[1].animate.move_to([1, 1, 1]),\n            g[2].animate.move_to([-1, 1, 2]),\n            g[3].animate.move_to([1, -1, -1]),\n            g[4].animate.move_to([-1, -1, 0]),\n        )\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a grayscale image created from a 2\u00d74 pixel array, where each pixel's brightness corresponds to its value. The image is scaled to a height of 7 units and shown centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ImageFromArray(Scene):\n    def construct(self):\n        image = ImageMobject(np.uint8([[0, 100, 30, 200],\n                                       [255, 0, 5, 33]]))\n        image.height = 7\n        self.add(image)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a grayscale image created from a 2\u00d74 pixel array, where each pixel's brightness corresponds to its value. The image is scaled to a height of 7 units and shown centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ImageFromArray(Scene):\n    def construct(self):\n        image = ImageMobject(np.uint8([[0, 100, 30, 200],\n                                       [255, 0, 5, 33]]))\n        image.height = 7\n        self.add(image)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a grayscale image created from a 2\u00d74 pixel array, where each pixel's brightness corresponds to its value. The image is scaled to a height of 7 units and shown centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ImageFromArray(Scene):\n    def construct(self):\n        image = ImageMobject(np.uint8([[0, 100, 30, 200],\n                                       [255, 0, 5, 33]]))\n        image.height = 7\n        self.add(image)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a semi-transparent, multicolored background rectangle spanning most of the screen. In front of it, show two 2\u00d72 tables side by side: the first has individual background rectangles behind each cell, and the second has a single background rectangle behind the entire table. Both tables are scaled down and arranged with spacing between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BackgroundRectanglesExample(Scene):\n    def construct(self):\n        background = Rectangle(height=6.5, width=13)\n        background.set_fill(opacity=.5)\n        background.set_color([TEAL, RED, YELLOW])\n        self.add(background)\n        t0 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            add_background_rectangles_to_entries=True)\n        t1 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            include_background_rectangle=True)\n        g = Group(t0, t1).scale(0.7).arrange(buff=0.5)\n        self.add(g)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a semi-transparent, multicolored background rectangle spanning most of the screen. In front of it, show two 2\u00d72 tables side by side: the first has individual background rectangles behind each cell, and the second has a single background rectangle behind the entire table. Both tables are scaled down and arranged with spacing between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BackgroundRectanglesExample(Scene):\n    def construct(self):\n        background = Rectangle(height=6.5, width=13)\n        background.set_fill(opacity=.5)\n        background.set_color([TEAL, RED, YELLOW])\n        self.add(background)\n        t0 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            add_background_rectangles_to_entries=True)\n        t1 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            include_background_rectangle=True)\n        g = Group(t0, t1).scale(0.7).arrange(buff=0.5)\n        self.add(g)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a semi-transparent, multicolored background rectangle spanning most of the screen. In front of it, show two 2\u00d72 tables side by side: the first has individual background rectangles behind each cell, and the second has a single background rectangle behind the entire table. Both tables are scaled down and arranged with spacing between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass BackgroundRectanglesExample(Scene):\n    def construct(self):\n        background = Rectangle(height=6.5, width=13)\n        background.set_fill(opacity=.5)\n        background.set_color([TEAL, RED, YELLOW])\n        self.add(background)\n        t0 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            add_background_rectangles_to_entries=True)\n        t1 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            include_background_rectangle=True)\n        g = Group(t0, t1).scale(0.7).arrange(buff=0.5)\n        self.add(g)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three large rectangles vertically aligned on the left side of the screen. After they fade in, each rectangle transforms into a small filled circle on the right side using different fade styles:\n\n- The top rectangle stretches as it fades into the circle.\n- The middle rectangle fades into the circle without stretching and without dimming to match the target.\n- The bottom rectangle fades into the circle without stretching but dims to match the target's brightness.\n\nFinally, all objects fade out together."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DifferentFadeTransforms(Scene):\n    def construct(self):\n        starts = [Rectangle(width=4, height=1) for _ in range(3)]\n        VGroup(*starts).arrange(DOWN, buff=1).shift(3*LEFT)\n        targets = [Circle(fill_opacity=1).scale(0.25) for _ in range(3)]\n        VGroup(*targets).arrange(DOWN, buff=1).shift(3*RIGHT)\n\n        self.play(*[FadeIn(s) for s in starts])\n        self.play(\n            FadeTransform(starts[0], targets[0], stretch=True),\n            FadeTransform(starts[1], targets[1], stretch=False, dim_to_match=0),\n            FadeTransform(starts[2], targets[2], stretch=False, dim_to_match=1)\n        )\n\n        self.play(*[FadeOut(mobj) for mobj in self.mobjects])\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three large rectangles vertically aligned on the left side of the screen. After they fade in, each rectangle transforms into a small filled circle on the right side using different fade styles:\n\n- The top rectangle stretches as it fades into the circle.\n- The middle rectangle fades into the circle without stretching and without dimming to match the target.\n- The bottom rectangle fades into the circle without stretching but dims to match the target's brightness.\n\nFinally, all objects fade out together."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DifferentFadeTransforms(Scene):\n    def construct(self):\n        starts = [Rectangle(width=4, height=1) for _ in range(3)]\n        VGroup(*starts).arrange(DOWN, buff=1).shift(3*LEFT)\n        targets = [Circle(fill_opacity=1).scale(0.25) for _ in range(3)]\n        VGroup(*targets).arrange(DOWN, buff=1).shift(3*RIGHT)\n\n        self.play(*[FadeIn(s) for s in starts])\n        self.play(\n            FadeTransform(starts[0], targets[0], stretch=True),\n            FadeTransform(starts[1], targets[1], stretch=False, dim_to_match=0),\n            FadeTransform(starts[2], targets[2], stretch=False, dim_to_match=1)\n        )\n\n        self.play(*[FadeOut(mobj) for mobj in self.mobjects])\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three rows of dashed shapes demonstrating different dash configurations:\n\n- **Top row**: Eleven white circles with increasing numbers of dashes, showing how dash count affects appearance.\n- **Middle row**: Eleven white circles with increasing dashed ratios, illustrating how the length of dashes relative to gaps changes.\n- **Bottom row**: Two versions of the function \\( f(t) = t^5 \\), both dashed\u2014one with evenly spaced dashes and the other with stretched segments.\n\nAll rows are neatly arranged and centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DashedVMobjectExample(Scene):\n    def construct(self):\n        r = 0.5\n\n        top_row = VGroup()  # Increasing num_dashes\n        for dashes in range(1, 12):\n            circ = DashedVMobject(Circle(radius=r, color=WHITE), num_dashes=dashes)\n            top_row.add(circ)\n\n        middle_row = VGroup()  # Increasing dashed_ratio\n        for ratio in np.arange(1 / 11, 1, 1 / 11):\n            circ = DashedVMobject(\n                Circle(radius=r, color=WHITE), dashed_ratio=ratio\n            )\n            middle_row.add(circ)\n\n        func1 = FunctionGraph(lambda t: t**5,[-1,1],color=WHITE)\n        func_even = DashedVMobject(func1,num_dashes=6,equal_lengths=True)\n        func_stretched = DashedVMobject(func1, num_dashes=6, equal_lengths=False)\n        bottom_row = VGroup(func_even,func_stretched)\n\n        top_row.arrange(buff=0.3)\n        middle_row.arrange()\n        bottom_row.arrange(buff=1)\n        everything = VGroup(top_row, middle_row, bottom_row).arrange(DOWN, buff=1)\n        self.add(everything)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three rows of dashed shapes demonstrating different dash configurations:\n\n- **Top row**: Eleven white circles with increasing numbers of dashes, showing how dash count affects appearance.\n- **Middle row**: Eleven white circles with increasing dashed ratios, illustrating how the length of dashes relative to gaps changes.\n- **Bottom row**: Two versions of the function \\( f(t) = t^5 \\), both dashed\u2014one with evenly spaced dashes and the other with stretched segments.\n\nAll rows are neatly arranged and centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass DashedVMobjectExample(Scene):\n    def construct(self):\n        r = 0.5\n\n        top_row = VGroup()  # Increasing num_dashes\n        for dashes in range(1, 12):\n            circ = DashedVMobject(Circle(radius=r, color=WHITE), num_dashes=dashes)\n            top_row.add(circ)\n\n        middle_row = VGroup()  # Increasing dashed_ratio\n        for ratio in np.arange(1 / 11, 1, 1 / 11):\n            circ = DashedVMobject(\n                Circle(radius=r, color=WHITE), dashed_ratio=ratio\n            )\n            middle_row.add(circ)\n\n        func1 = FunctionGraph(lambda t: t**5,[-1,1],color=WHITE)\n        func_even = DashedVMobject(func1,num_dashes=6,equal_lengths=True)\n        func_stretched = DashedVMobject(func1, num_dashes=6, equal_lengths=False)\n        bottom_row = VGroup(func_even,func_stretched)\n\n        top_row.arrange(buff=0.3)\n        middle_row.arrange()\n        bottom_row.arrange(buff=1)\n        everything = VGroup(top_row, middle_row, bottom_row).arrange(DOWN, buff=1)\n        self.add(everything)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display four sets of two intersecting lines forming right angles, each with a different style of right angle marker:\n\n1. The first uses the default size and position.\n2. The second has a smaller marker placed in a different quadrant.\n3. The third has a slightly larger marker with a thicker stroke in another quadrant.\n4. The fourth features the largest marker, colored red, positioned in a different quadrant.\n\nAll four sets are arranged horizontally with space between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RightAngleExample(Scene):\n    def construct(self):\n        line1 = Line( LEFT, RIGHT )\n        line2 = Line( DOWN, UP )\n        rightangles = [\n            RightAngle(line1, line2),\n            RightAngle(line1, line2, length=0.4, quadrant=(1,-1)),\n            RightAngle(line1, line2, length=0.5, quadrant=(-1,1), stroke_width=8),\n            RightAngle(line1, line2, length=0.7, quadrant=(-1,-1), color=RED),\n        ]\n        plots = VGroup()\n        for rightangle in rightangles:\n            plot=VGroup(line1.copy(),line2.copy(), rightangle)\n            plots.add(plot)\n        plots.arrange(buff=1.5)\n        self.add(plots)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display four sets of two intersecting lines forming right angles, each with a different style of right angle marker:\n\n1. The first uses the default size and position.\n2. The second has a smaller marker placed in a different quadrant.\n3. The third has a slightly larger marker with a thicker stroke in another quadrant.\n4. The fourth features the largest marker, colored red, positioned in a different quadrant.\n\nAll four sets are arranged horizontally with space between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RightAngleExample(Scene):\n    def construct(self):\n        line1 = Line( LEFT, RIGHT )\n        line2 = Line( DOWN, UP )\n        rightangles = [\n            RightAngle(line1, line2),\n            RightAngle(line1, line2, length=0.4, quadrant=(1,-1)),\n            RightAngle(line1, line2, length=0.5, quadrant=(-1,1), stroke_width=8),\n            RightAngle(line1, line2, length=0.7, quadrant=(-1,-1), color=RED),\n        ]\n        plots = VGroup()\n        for rightangle in rightangles:\n            plot=VGroup(line1.copy(),line2.copy(), rightangle)\n            plots.add(plot)\n        plots.arrange(buff=1.5)\n        self.add(plots)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display four sets of two intersecting lines forming right angles, each with a different style of right angle marker:\n\n1. The first uses the default size and position.\n2. The second has a smaller marker placed in a different quadrant.\n3. The third has a slightly larger marker with a thicker stroke in another quadrant.\n4. The fourth features the largest marker, colored red, positioned in a different quadrant.\n\nAll four sets are arranged horizontally with space between them."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass RightAngleExample(Scene):\n    def construct(self):\n        line1 = Line( LEFT, RIGHT )\n        line2 = Line( DOWN, UP )\n        rightangles = [\n            RightAngle(line1, line2),\n            RightAngle(line1, line2, length=0.4, quadrant=(1,-1)),\n            RightAngle(line1, line2, length=0.5, quadrant=(-1,1), stroke_width=8),\n            RightAngle(line1, line2, length=0.7, quadrant=(-1,-1), color=RED),\n        ]\n        plots = VGroup()\n        for rightangle in rightangles:\n            plot=VGroup(line1.copy(),line2.copy(), rightangle)\n            plots.add(plot)\n        plots.arrange(buff=1.5)\n        self.add(plots)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three five-pointed stars arranged horizontally:\n\n1. The first is a standard star with sharp corners.\n2. The second is a copy of the first with slightly rounded corners.\n3. The third is another copy with more prominently rounded corners, showing a smoother, softer star shape."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PolygramRoundCorners(Scene):\n    def construct(self):\n        star = Star(outer_radius=2)\n\n        shapes = VGroup(star)\n        shapes.add(star.copy().round_corners(radius=0.1))\n        shapes.add(star.copy().round_corners(radius=0.25))\n\n        shapes.arrange(RIGHT)\n        self.add(shapes)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three five-pointed stars arranged horizontally:\n\n1. The first is a standard star with sharp corners.\n2. The second is a copy of the first with slightly rounded corners.\n3. The third is another copy with more prominently rounded corners, showing a smoother, softer star shape."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PolygramRoundCorners(Scene):\n    def construct(self):\n        star = Star(outer_radius=2)\n\n        shapes = VGroup(star)\n        shapes.add(star.copy().round_corners(radius=0.1))\n        shapes.add(star.copy().round_corners(radius=0.25))\n\n        shapes.arrange(RIGHT)\n        self.add(shapes)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display three five-pointed stars arranged horizontally:\n\n1. The first is a standard star with sharp corners.\n2. The second is a copy of the first with slightly rounded corners.\n3. The third is another copy with more prominently rounded corners, showing a smoother, softer star shape."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PolygramRoundCorners(Scene):\n    def construct(self):\n        star = Star(outer_radius=2)\n\n        shapes = VGroup(star)\n        shapes.add(star.copy().round_corners(radius=0.1))\n        shapes.add(star.copy().round_corners(radius=0.25))\n\n        shapes.arrange(RIGHT)\n        self.add(shapes)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a mathematical expression representing the Taylor series expansion of \\( e^x \\). All instances of the variable \\( x \\) are correctly isolated and colored yellow using LaTeX substring isolation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CorrectLaTeXSubstringColoring(Scene):\n    def construct(self):\n        equation = MathTex(\n            r\"e^x = x^0 + x^1 + \\frac{1}{2} x^2 + \\frac{1}{6} x^3 + \\cdots + \\frac{1}{n!} x^n + \\cdots\",\n            substrings_to_isolate=\"x\"\n        )\n        equation.set_color_by_tex(\"x\", YELLOW)\n        self.add(equation)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a mathematical expression representing the Taylor series expansion of \\( e^x \\). All instances of the variable \\( x \\) are correctly isolated and colored yellow using LaTeX substring isolation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass CorrectLaTeXSubstringColoring(Scene):\n    def construct(self):\n        equation = MathTex(\n            r\"e^x = x^0 + x^1 + \\frac{1}{2} x^2 + \\frac{1}{6} x^3 + \\cdots + \\frac{1}{n!} x^n + \\cdots\",\n            substrings_to_isolate=\"x\"\n        )\n        equation.set_color_by_tex(\"x\", YELLOW)\n        self.add(equation)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the Tamil greeting \"\u0bb5\u0ba3\u0b95\u0bcd\u0b95\u0bae\u0bcd\" (meaning \"Hello\") in a sans-serif font. The text is written onto the screen with a smooth animation effect, then remains visible for two seconds."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PangoRender(Scene):\n    def construct(self):\n        morning = Text(\"\u0bb5\u0ba3\u0b95\u0bcd\u0b95\u0bae\u0bcd\", font=\"sans-serif\")\n        self.play(Write(morning))\n        self.wait(2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the Tamil greeting \"\u0bb5\u0ba3\u0b95\u0bcd\u0b95\u0bae\u0bcd\" (meaning \"Hello\") in a sans-serif font. The text is written onto the screen with a smooth animation effect, then remains visible for two seconds."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass PangoRender(Scene):\n    def construct(self):\n        morning = Text(\"\u0bb5\u0ba3\u0b95\u0bcd\u0b95\u0bae\u0bcd\", font=\"sans-serif\")\n        self.play(Write(morning))\n        self.wait(2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display five horizontal groups of four dots each, labeled with different `lag_ratio` values: 0, 0.1, 0.5, 1, and 2. Each group shifts downward with a staggered animation based on its `lag_ratio`\u2014lower values animate more simultaneously, while higher values animate more sequentially. Then, all groups shift upward together with a slight delay between each group due to a recursive `lag_ratio`."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LagRatios(Scene):\n    def construct(self):\n        ratios = [0, 0.1, 0.5, 1, 2]  # demonstrated lag_ratios\n\n        # Create dot groups\n        group = VGroup(*[Dot() for _ in range(4)]).arrange_submobjects()\n        groups = VGroup(*[group.copy() for _ in ratios]).arrange_submobjects(buff=1)\n        self.add(groups)\n\n        # Label groups\n        self.add(Text(\"lag_ratio = \", font_size=36).next_to(groups, UP, buff=1.5))\n        for group, ratio in zip(groups, ratios):\n            self.add(Text(str(ratio), font_size=36).next_to(group, UP))\n\n        #Animate groups with different lag_ratios\n        self.play(AnimationGroup(*[\n            group.animate(lag_ratio=ratio, run_time=1.5).shift(DOWN * 2)\n            for group, ratio in zip(groups, ratios)\n        ]))\n\n        # lag_ratio also works recursively on nested submobjects:\n        self.play(groups.animate(run_time=1, lag_ratio=0.1).shift(UP * 2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display five horizontal groups of four dots each, labeled with different `lag_ratio` values: 0, 0.1, 0.5, 1, and 2. Each group shifts downward with a staggered animation based on its `lag_ratio`\u2014lower values animate more simultaneously, while higher values animate more sequentially. Then, all groups shift upward together with a slight delay between each group due to a recursive `lag_ratio`."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LagRatios(Scene):\n    def construct(self):\n        ratios = [0, 0.1, 0.5, 1, 2]  # demonstrated lag_ratios\n\n        # Create dot groups\n        group = VGroup(*[Dot() for _ in range(4)]).arrange_submobjects()\n        groups = VGroup(*[group.copy() for _ in ratios]).arrange_submobjects(buff=1)\n        self.add(groups)\n\n        # Label groups\n        self.add(Text(\"lag_ratio = \", font_size=36).next_to(groups, UP, buff=1.5))\n        for group, ratio in zip(groups, ratios):\n            self.add(Text(str(ratio), font_size=36).next_to(group, UP))\n\n        #Animate groups with different lag_ratios\n        self.play(AnimationGroup(*[\n            group.animate(lag_ratio=ratio, run_time=1.5).shift(DOWN * 2)\n            for group, ratio in zip(groups, ratios)\n        ]))\n\n        # lag_ratio also works recursively on nested submobjects:\n        self.play(groups.animate(run_time=1, lag_ratio=0.1).shift(UP * 2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display five horizontal groups of four dots each, labeled with different `lag_ratio` values: 0, 0.1, 0.5, 1, and 2. Each group shifts downward with a staggered animation based on its `lag_ratio`\u2014lower values animate more simultaneously, while higher values animate more sequentially. Then, all groups shift upward together with a slight delay between each group due to a recursive `lag_ratio`."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass LagRatios(Scene):\n    def construct(self):\n        ratios = [0, 0.1, 0.5, 1, 2]  # demonstrated lag_ratios\n\n        # Create dot groups\n        group = VGroup(*[Dot() for _ in range(4)]).arrange_submobjects()\n        groups = VGroup(*[group.copy() for _ in ratios]).arrange_submobjects(buff=1)\n        self.add(groups)\n\n        # Label groups\n        self.add(Text(\"lag_ratio = \", font_size=36).next_to(groups, UP, buff=1.5))\n        for group, ratio in zip(groups, ratios):\n            self.add(Text(str(ratio), font_size=36).next_to(group, UP))\n\n        #Animate groups with different lag_ratios\n        self.play(AnimationGroup(*[\n            group.animate(lag_ratio=ratio, run_time=1.5).shift(DOWN * 2)\n            for group, ratio in zip(groups, ratios)\n        ]))\n\n        # lag_ratio also works recursively on nested submobjects:\n        self.play(groups.animate(run_time=1, lag_ratio=0.1).shift(UP * 2))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a red-filled square on the screen. Animate the square changing its fill color to white. Then, simultaneously move the square upward and rotate it 60 degrees. Pause for one second after each animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnimateExample(Scene):\n    def construct(self):\n        square = Square().set_fill(RED, opacity=1.0)\n        self.add(square)\n\n        # animate the change of color\n        self.play(square.animate.set_fill(WHITE))\n        self.wait(1)\n\n        # animate the change of position and the rotation at the same time\n        self.play(square.animate.shift(UP).rotate(PI / 3))\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a red-filled square on the screen. Animate the square changing its fill color to white. Then, simultaneously move the square upward and rotate it 60 degrees. Pause for one second after each animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnimateExample(Scene):\n    def construct(self):\n        square = Square().set_fill(RED, opacity=1.0)\n        self.add(square)\n\n        # animate the change of color\n        self.play(square.animate.set_fill(WHITE))\n        self.wait(1)\n\n        # animate the change of position and the rotation at the same time\n        self.play(square.animate.shift(UP).rotate(PI / 3))\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a red-filled square on the screen. Animate the square changing its fill color to white. Then, simultaneously move the square upward and rotate it 60 degrees. Pause for one second after each animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass AnimateExample(Scene):\n    def construct(self):\n        square = Square().set_fill(RED, opacity=1.0)\n        self.add(square)\n\n        # animate the change of color\n        self.play(square.animate.set_fill(WHITE))\n        self.wait(1)\n\n        # animate the change of position and the rotation at the same time\n        self.play(square.animate.shift(UP).rotate(PI / 3))\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display the word \u201cIndicate\u201d in large font on the screen, then animate it with a brief highlighting effect that draws attention to the text."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UsingIndicate(Scene):\n    def construct(self):\n        tex = Tex(\"Indicate\").scale(3)\n        self.play(Indicate(tex))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display the word \u201cIndicate\u201d in large font on the screen, then animate it with a brief highlighting effect that draws attention to the text."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UsingIndicate(Scene):\n    def construct(self):\n        tex = Tex(\"Indicate\").scale(3)\n        self.play(Indicate(tex))\n        self.wait()\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a hierarchical tree graph starting from a single root node. From this root, five child nodes branch out, each connected to its own grandchild, which in turn connects to a great-grandchild. The structure forms five vertical chains of four nodes each, all radiating from the central root, and is arranged using a tree layout to clearly show the parent-child relationships."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nimport networkx as nx\n\nclass Tree(Scene):\n    def construct(self):\n        G = nx.Graph()\n\n        G.add_node(\"ROOT\")\n\n        for i in range(5):\n            G.add_node(\"Child_%i\" % i)\n            G.add_node(\"Grandchild_%i\" % i)\n            G.add_node(\"Greatgrandchild_%i\" % i)\n\n            G.add_edge(\"ROOT\", \"Child_%i\" % i)\n            G.add_edge(\"Child_%i\" % i, \"Grandchild_%i\" % i)\n            G.add_edge(\"Grandchild_%i\" % i, \"Greatgrandchild_%i\" % i)\n\n        self.play(Create(\n            Graph(list(G.nodes), list(G.edges), layout=\"tree\", root_vertex=\"ROOT\")))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a hierarchical tree graph starting from a single root node. From this root, five child nodes branch out, each connected to its own grandchild, which in turn connects to a great-grandchild. The structure forms five vertical chains of four nodes each, all radiating from the central root, and is arranged using a tree layout to clearly show the parent-child relationships."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nimport networkx as nx\n\nclass Tree(Scene):\n    def construct(self):\n        G = nx.Graph()\n\n        G.add_node(\"ROOT\")\n\n        for i in range(5):\n            G.add_node(\"Child_%i\" % i)\n            G.add_node(\"Grandchild_%i\" % i)\n            G.add_node(\"Greatgrandchild_%i\" % i)\n\n            G.add_edge(\"ROOT\", \"Child_%i\" % i)\n            G.add_edge(\"Child_%i\" % i, \"Grandchild_%i\" % i)\n            G.add_edge(\"Grandchild_%i\" % i, \"Greatgrandchild_%i\" % i)\n\n        self.play(Create(\n            Graph(list(G.nodes), list(G.edges), layout=\"tree\", root_vertex=\"ROOT\")))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display four overlapping objects with different colors and vertical positions, each assigned a specific `z_index` to control their layering:\n\n- A red text reading \u201cz_index = 3\u201d appears at the top and is visually in front of all other objects.\n- A solid blue square is layered behind the text.\n- A blue LaTeX-style text reading \u201czIndex = 1\u201d appears below the square and is layered behind it.\n- A green filled circle, with no specified `z_index` (defaulting to 0), appears behind all other objects.\n\nThe visual stacking order is determined by the `z_index` values, from highest (front) to lowest (back)."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SetZIndex(Scene):\n    def construct(self):\n        text = Text('z_index = 3', color = PURE_RED).shift(UP).set_z_index(3)\n        square = Square(2, fill_opacity=1).set_z_index(2)\n        tex = Tex(r'zIndex = 1', color = PURE_BLUE).shift(DOWN).set_z_index(1)\n        circle = Circle(radius = 1.7, color = GREEN, fill_opacity = 1) # z_index = 0\n\n        # Displaying order is now defined by z_index values\n        self.add(text)\n        self.add(square)\n        self.add(tex)\n        self.add(circle)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display four overlapping objects with different colors and vertical positions, each assigned a specific `z_index` to control their layering:\n\n- A red text reading \u201cz_index = 3\u201d appears at the top and is visually in front of all other objects.\n- A solid blue square is layered behind the text.\n- A blue LaTeX-style text reading \u201czIndex = 1\u201d appears below the square and is layered behind it.\n- A green filled circle, with no specified `z_index` (defaulting to 0), appears behind all other objects.\n\nThe visual stacking order is determined by the `z_index` values, from highest (front) to lowest (back)."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SetZIndex(Scene):\n    def construct(self):\n        text = Text('z_index = 3', color = PURE_RED).shift(UP).set_z_index(3)\n        square = Square(2, fill_opacity=1).set_z_index(2)\n        tex = Tex(r'zIndex = 1', color = PURE_BLUE).shift(DOWN).set_z_index(1)\n        circle = Circle(radius = 1.7, color = GREEN, fill_opacity = 1) # z_index = 0\n\n        # Displaying order is now defined by z_index values\n        self.add(text)\n        self.add(square)\n        self.add(tex)\n        self.add(circle)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display five small grayscale images arranged in a row, each labeled with a different resampling algorithm: \"nearest,\" \"lanczos,\" \"linear,\" \"cubic,\" and \"box.\" Each image is a 4\u00d74 pixel grid with increasing brightness along the diagonal, and each one is rendered using its respective interpolation method to demonstrate visual differences."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ImageInterpolationEx(Scene):\n    def construct(self):\n        img = ImageMobject(np.uint8([[63, 0, 0, 0],\n                                        [0, 127, 0, 0],\n                                        [0, 0, 191, 0],\n                                        [0, 0, 0, 255]\n                                        ]))\n\n        img.height = 2\n        img1 = img.copy()\n        img2 = img.copy()\n        img3 = img.copy()\n        img4 = img.copy()\n        img5 = img.copy()\n\n        img1.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"nearest\"])\n        img2.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"lanczos\"])\n        img3.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"linear\"])\n        img4.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"cubic\"])\n        img5.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"box\"])\n        img1.add(Text(\"nearest\").scale(0.5).next_to(img1,UP))\n        img2.add(Text(\"lanczos\").scale(0.5).next_to(img2,UP))\n        img3.add(Text(\"linear\").scale(0.5).next_to(img3,UP))\n        img4.add(Text(\"cubic\").scale(0.5).next_to(img4,UP))\n        img5.add(Text(\"box\").scale(0.5).next_to(img5,UP))\n\n        x= Group(img1,img2,img3,img4,img5)\n        x.arrange()\n        self.add(x)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display five small grayscale images arranged in a row, each labeled with a different resampling algorithm: \"nearest,\" \"lanczos,\" \"linear,\" \"cubic,\" and \"box.\" Each image is a 4\u00d74 pixel grid with increasing brightness along the diagonal, and each one is rendered using its respective interpolation method to demonstrate visual differences."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass ImageInterpolationEx(Scene):\n    def construct(self):\n        img = ImageMobject(np.uint8([[63, 0, 0, 0],\n                                        [0, 127, 0, 0],\n                                        [0, 0, 191, 0],\n                                        [0, 0, 0, 255]\n                                        ]))\n\n        img.height = 2\n        img1 = img.copy()\n        img2 = img.copy()\n        img3 = img.copy()\n        img4 = img.copy()\n        img5 = img.copy()\n\n        img1.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"nearest\"])\n        img2.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"lanczos\"])\n        img3.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"linear\"])\n        img4.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"cubic\"])\n        img5.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"box\"])\n        img1.add(Text(\"nearest\").scale(0.5).next_to(img1,UP))\n        img2.add(Text(\"lanczos\").scale(0.5).next_to(img2,UP))\n        img3.add(Text(\"linear\").scale(0.5).next_to(img3,UP))\n        img4.add(Text(\"cubic\").scale(0.5).next_to(img4,UP))\n        img5.add(Text(\"box\").scale(0.5).next_to(img5,UP))\n\n        x= Group(img1,img2,img3,img4,img5)\n        x.arrange()\n        self.add(x)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a 2\u00d72 matrix composed of graphical objects:\n\n- A small circle in the top-left,\n- A small square in the top-right,\n- A large \\( \\pi \\) symbol in the bottom-left,\n- A small star in the bottom-right.\n\nThe matrix appears on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectMatrixExample(Scene):\n    def construct(self):\n        a = Circle().scale(0.3)\n        b = Square().scale(0.3)\n        c = MathTex(\"\\\\pi\").scale(2)\n        d = Star().scale(0.3)\n        m0 = MobjectMatrix([[a, b], [c, d]])\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a 2\u00d72 matrix composed of graphical objects:\n\n- A small circle in the top-left,\n- A small square in the top-right,\n- A large \\( \\pi \\) symbol in the bottom-left,\n- A small star in the bottom-right.\n\nThe matrix appears on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectMatrixExample(Scene):\n    def construct(self):\n        a = Circle().scale(0.3)\n        b = Square().scale(0.3)\n        c = MathTex(\"\\\\pi\").scale(2)\n        d = Star().scale(0.3)\n        m0 = MobjectMatrix([[a, b], [c, d]])\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a 2\u00d72 matrix composed of graphical objects:\n\n- A small circle in the top-left,\n- A small square in the top-right,\n- A large \\( \\pi \\) symbol in the bottom-left,\n- A small star in the bottom-right.\n\nThe matrix appears on screen without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectMatrixExample(Scene):\n    def construct(self):\n        a = Circle().scale(0.3)\n        b = Square().scale(0.3)\n        c = MathTex(\"\\\\pi\").scale(2)\n        d = Star().scale(0.3)\n        m0 = MobjectMatrix([[a, b], [c, d]])\n        self.add(m0)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display five lines of styled text arranged vertically:\n\n1. The first line shows the word \"bla\" with a green double underline.\n2. The second line displays \"xxx\" with a green single underline, followed by \"aabb\" in a yellow-to-red gradient, and ending with \"y\".\n3. The third line is similar to the second, but the gradient on \"aabb\" is offset slightly to the left, altering the color transition.\n4. The fourth line shows \"xxx\" with a green double underline, followed by \"aabb\" in a yellow-to-red gradient, and ending with \"y\".\n5. The fifth line is like the fourth, but the gradient on \"aabb\" is offset further to the left, shifting the gradient effect more noticeably.\n\nAll lines are centered and stacked vertically on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UnderlineExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\n            '<span underline=\"double\" underline_color=\"green\">bla</span>'\n        )\n        text2 = MarkupText(\n            '<span underline=\"single\" underline_color=\"green\">xxx</span><gradient from=\"#ffff00\" to=\"RED\">aabb</gradient>y'\n        )\n        text3 = MarkupText(\n            '<span underline=\"single\" underline_color=\"green\">xxx</span><gradient from=\"#ffff00\" to=\"RED\" offset=\"-1\">aabb</gradient>y'\n        )\n        text4 = MarkupText(\n            '<span underline=\"double\" underline_color=\"green\">xxx</span><gradient from=\"#ffff00\" to=\"RED\">aabb</gradient>y'\n        )\n        text5 = MarkupText(\n            '<span underline=\"double\" underline_color=\"green\">xxx</span><gradient from=\"#ffff00\" to=\"RED\" offset=\"-2\">aabb</gradient>y'\n        )\n        group = VGroup(text1, text2, text3, text4, text5).arrange(DOWN)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display five lines of styled text arranged vertically:\n\n1. The first line shows the word \"bla\" with a green double underline.\n2. The second line displays \"xxx\" with a green single underline, followed by \"aabb\" in a yellow-to-red gradient, and ending with \"y\".\n3. The third line is similar to the second, but the gradient on \"aabb\" is offset slightly to the left, altering the color transition.\n4. The fourth line shows \"xxx\" with a green double underline, followed by \"aabb\" in a yellow-to-red gradient, and ending with \"y\".\n5. The fifth line is like the fourth, but the gradient on \"aabb\" is offset further to the left, shifting the gradient effect more noticeably.\n\nAll lines are centered and stacked vertically on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass UnderlineExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\n            '<span underline=\"double\" underline_color=\"green\">bla</span>'\n        )\n        text2 = MarkupText(\n            '<span underline=\"single\" underline_color=\"green\">xxx</span><gradient from=\"#ffff00\" to=\"RED\">aabb</gradient>y'\n        )\n        text3 = MarkupText(\n            '<span underline=\"single\" underline_color=\"green\">xxx</span><gradient from=\"#ffff00\" to=\"RED\" offset=\"-1\">aabb</gradient>y'\n        )\n        text4 = MarkupText(\n            '<span underline=\"double\" underline_color=\"green\">xxx</span><gradient from=\"#ffff00\" to=\"RED\">aabb</gradient>y'\n        )\n        text5 = MarkupText(\n            '<span underline=\"double\" underline_color=\"green\">xxx</span><gradient from=\"#ffff00\" to=\"RED\" offset=\"-2\">aabb</gradient>y'\n        )\n        group = VGroup(text1, text2, text3, text4, text5).arrange(DOWN)\n        self.add(group)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a bipartite graph with four nodes arranged in two partitions. Nodes 0 and 1 are placed on one side, and nodes 2 and 3 on the other. Edges connect node 0 to nodes 2 and 3, and node 1 to node 2, visually emphasizing the two-part structure of the graph."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nimport networkx as nx\n\nclass PartiteGraph(Scene):\n    def construct(self):\n        G = nx.Graph()\n        G.add_nodes_from([0, 1, 2, 3])\n        G.add_edges_from([(0, 2), (0,3), (1, 2)])\n        graph = Graph(list(G.nodes), list(G.edges), layout=\"partite\", partitions=[[0, 1]])\n        self.play(Create(graph))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a bipartite graph with four nodes arranged in two partitions. Nodes 0 and 1 are placed on one side, and nodes 2 and 3 on the other. Edges connect node 0 to nodes 2 and 3, and node 1 to node 2, visually emphasizing the two-part structure of the graph."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nimport networkx as nx\n\nclass PartiteGraph(Scene):\n    def construct(self):\n        G = nx.Graph()\n        G.add_nodes_from([0, 1, 2, 3])\n        G.add_edges_from([(0, 2), (0,3), (1, 2)])\n        graph = Graph(list(G.nodes), list(G.edges), layout=\"partite\", partitions=[[0, 1]])\n        self.play(Create(graph))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a white title reading \"K-means clustering and Logistic Regression\" scaled down and positioned at the top of the screen. Below it, in the bottom-right quadrant, show a vertically arranged list of four white text items: \n\n- \"1. Measuring\"\n- \"2. Clustering\"\n- \"3. Regression\"\n- \"4. Prediction\"\n\nAll above are semi-transparent except for \"2. Clustering\", which is fully opaque, stressing it out over others."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TextAlignment(Scene):\n    def construct(self):\n        title = Text(\"K-means clustering and Logistic Regression\", color=WHITE)\n        title.scale(0.75)\n        self.add(title.to_edge(UP))\n\n        t1 = Text(\"1. Measuring\").set_color(WHITE)\n\n        t2 = Text(\"2. Clustering\").set_color(WHITE)\n\n        t3 = Text(\"3. Regression\").set_color(WHITE)\n\n        t4 = Text(\"4. Prediction\").set_color(WHITE)\n\n        x = VGroup(t1, t2, t3, t4).arrange(direction=DOWN, aligned_edge=LEFT).scale(0.7).next_to(ORIGIN,DR)\n        x.set_opacity(0.5)\n        x.submobjects[1].set_opacity(1)\n        self.add(x)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a white title reading \"K-means clustering and Logistic Regression\" scaled down and positioned at the top of the screen. Below it, in the bottom-right quadrant, show a vertically arranged list of four white text items: \n\n- \"1. Measuring\"\n- \"2. Clustering\"\n- \"3. Regression\"\n- \"4. Prediction\"\n\nAll above are semi-transparent except for \"2. Clustering\", which is fully opaque, stressing it out over others."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TextAlignment(Scene):\n    def construct(self):\n        title = Text(\"K-means clustering and Logistic Regression\", color=WHITE)\n        title.scale(0.75)\n        self.add(title.to_edge(UP))\n\n        t1 = Text(\"1. Measuring\").set_color(WHITE)\n\n        t2 = Text(\"2. Clustering\").set_color(WHITE)\n\n        t3 = Text(\"3. Regression\").set_color(WHITE)\n\n        t4 = Text(\"4. Prediction\").set_color(WHITE)\n\n        x = VGroup(t1, t2, t3, t4).arrange(direction=DOWN, aligned_edge=LEFT).scale(0.7).next_to(ORIGIN,DR)\n        x.set_opacity(0.5)\n        x.submobjects[1].set_opacity(1)\n        self.add(x)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a diagonal line slanting upward from left to right, positioned toward the left side of the screen. Then, a flipped copy of the line appears, mirrored vertically, creating a symmetrical shape with the original."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FlipExample(Scene):\n    def construct(self):\n        s= Line(LEFT, RIGHT+UP).shift(4*LEFT)\n        self.add(s)\n        s2= s.copy().flip()\n        self.add(s2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a diagonal line slanting upward from left to right, positioned toward the left side of the screen. Then, a flipped copy of the line appears, mirrored vertically, creating a symmetrical shape with the original."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FlipExample(Scene):\n    def construct(self):\n        s= Line(LEFT, RIGHT+UP).shift(4*LEFT)\n        self.add(s)\n        s2= s.copy().flip()\n        self.add(s2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a diagonal line slanting upward from left to right, positioned toward the left side of the screen. Then, a flipped copy of the line appears, mirrored vertically, creating a symmetrical shape with the original."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FlipExample(Scene):\n    def construct(self):\n        s= Line(LEFT, RIGHT+UP).shift(4*LEFT)\n        self.add(s)\n        s2= s.copy().flip()\n        self.add(s2)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a line of Arabic text with each character or diacritic styled in different colors: the first character \"\u0627\" in purple, followed by red, blue, and green diacritics and letters forming the word \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\" with colorful emphasis on pronunciation marks. The entire text is centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MarkupElaborateExample(Scene):\n    def construct(self):\n        text = MarkupText(\n            '<span foreground=\"purple\">\u0627</span><span foreground=\"red\">\u064e</span>'\n            '\u0644<span foreground=\"blue\">\u0652</span>\u0639<span foreground=\"red\">\u064e</span>\u0631'\n            '<span foreground=\"red\">\u064e</span>\u0628<span foreground=\"red\">\u0650</span>\u064a'\n            '<span foreground=\"green\">\u0651</span><span foreground=\"red\">\u064e</span>\u0629'\n            '<span foreground=\"blue\">\u064f</span>'\n        )\n        self.add(text)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a line of Arabic text with each character or diacritic styled in different colors: the first character \"\u0627\" in purple, followed by red, blue, and green diacritics and letters forming the word \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\" with colorful emphasis on pronunciation marks. The entire text is centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MarkupElaborateExample(Scene):\n    def construct(self):\n        text = MarkupText(\n            '<span foreground=\"purple\">\u0627</span><span foreground=\"red\">\u064e</span>'\n            '\u0644<span foreground=\"blue\">\u0652</span>\u0639<span foreground=\"red\">\u064e</span>\u0631'\n            '<span foreground=\"red\">\u064e</span>\u0628<span foreground=\"red\">\u0650</span>\u064a'\n            '<span foreground=\"green\">\u0651</span><span foreground=\"red\">\u064e</span>\u0629'\n            '<span foreground=\"blue\">\u064f</span>'\n        )\n        self.add(text)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display three shapes with distinct styles and positions: a circle with a thick green outline on the left, a fully yellow-filled square above the center, and a pink-filled triangle with 50% transparency on the right. Show all three shapes on screen and pause for one second."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectStyling(Scene):\n    def construct(self):\n        circle = Circle().shift(LEFT)\n        square = Square().shift(UP)\n        triangle = Triangle().shift(RIGHT)\n\n        circle.set_stroke(color=GREEN, width=20)\n        square.set_fill(YELLOW, opacity=1.0)\n        triangle.set_fill(PINK, opacity=0.5)\n\n        self.add(circle, square, triangle)\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display three shapes with distinct styles and positions: a circle with a thick green outline on the left, a fully yellow-filled square above the center, and a pink-filled triangle with 50% transparency on the right. Show all three shapes on screen and pause for one second."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectStyling(Scene):\n    def construct(self):\n        circle = Circle().shift(LEFT)\n        square = Square().shift(UP)\n        triangle = Triangle().shift(RIGHT)\n\n        circle.set_stroke(color=GREEN, width=20)\n        square.set_fill(YELLOW, opacity=1.0)\n        triangle.set_fill(PINK, opacity=0.5)\n\n        self.add(circle, square, triangle)\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display three shapes with distinct styles and positions: a circle with a thick green outline on the left, a fully yellow-filled square above the center, and a pink-filled triangle with 50% transparency on the right. Show all three shapes on screen and pause for one second."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MobjectStyling(Scene):\n    def construct(self):\n        circle = Circle().shift(LEFT)\n        square = Square().shift(UP)\n        triangle = Triangle().shift(RIGHT)\n\n        circle.set_stroke(color=GREEN, width=20)\n        square.set_fill(YELLOW, opacity=1.0)\n        triangle.set_fill(PINK, opacity=0.5)\n\n        self.add(circle, square, triangle)\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a line of text where the phrase \"Blue text\" appears in large blue font, followed by the words \"is *cool*!\" with \"cool\" italicized. The entire line is centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MarkupExample(Scene):\n    def construct(self):\n        text = MarkupText('<span foreground=\"blue\" size=\"x-large\">Blue text</span> is <i>cool</i>!\"')\n        self.add(text)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a line of text where the phrase \"Blue text\" appears in large blue font, followed by the words \"is *cool*!\" with \"cool\" italicized. The entire line is centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MarkupExample(Scene):\n    def construct(self):\n        text = MarkupText('<span foreground=\"blue\" size=\"x-large\">Blue text</span> is <i>cool</i>!\"')\n        self.add(text)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a line of text where the phrase \"Blue text\" appears in large blue font, followed by the words \"is *cool*!\" with \"cool\" italicized. The entire line is centered on the screen."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass MarkupExample(Scene):\n    def construct(self):\n        text = MarkupText('<span foreground=\"blue\" size=\"x-large\">Blue text</span> is <i>cool</i>!\"')\n        self.add(text)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a vertical bar chart with ten bars representing values from 10 down to 1. Each bar is labeled with its corresponding value using white mathematical text in a large font. The chart and labels appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetBarLabelsExample(Scene):\n    def construct(self):\n        chart = BarChart(values=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], y_range=[0, 10, 1])\n\n        c_bar_lbls = chart.get_bar_labels(\n            color=WHITE, label_constructor=MathTex, font_size=36\n        )\n\n        self.add(chart, c_bar_lbls)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a vertical bar chart with ten bars representing values from 10 down to 1. Each bar is labeled with its corresponding value using white mathematical text in a large font. The chart and labels appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetBarLabelsExample(Scene):\n    def construct(self):\n        chart = BarChart(values=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], y_range=[0, 10, 1])\n\n        c_bar_lbls = chart.get_bar_labels(\n            color=WHITE, label_constructor=MathTex, font_size=36\n        )\n\n        self.add(chart, c_bar_lbls)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a vertical bar chart with ten bars representing values from 10 down to 1. Each bar is labeled with its corresponding value using white mathematical text in a large font. The chart and labels appear on screen simultaneously without animation."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass GetBarLabelsExample(Scene):\n    def construct(self):\n        chart = BarChart(values=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], y_range=[0, 10, 1])\n\n        c_bar_lbls = chart.get_bar_labels(\n            color=WHITE, label_constructor=MathTex, font_size=36\n        )\n\n        self.add(chart, c_bar_lbls)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a square by fading it in. Then, rotate the square 45 degrees. Finally, fade the square out and pause for one second."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SomeAnimations(Scene):\n    def construct(self):\n        square = Square()\n\n        # some animations display mobjects, ...\n        self.play(FadeIn(square))\n\n        # ... some move or rotate mobjects around...\n        self.play(Rotate(square, PI/4))\n\n        # some animations remove mobjects from the screen\n        self.play(FadeOut(square))\n\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a square by fading it in. Then, rotate the square 45 degrees. Finally, fade the square out and pause for one second."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SomeAnimations(Scene):\n    def construct(self):\n        square = Square()\n\n        # some animations display mobjects, ...\n        self.play(FadeIn(square))\n\n        # ... some move or rotate mobjects around...\n        self.play(Rotate(square, PI/4))\n\n        # some animations remove mobjects from the screen\n        self.play(FadeOut(square))\n\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a square by fading it in. Then, rotate the square 45 degrees. Finally, fade the square out and pause for one second."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass SomeAnimations(Scene):\n    def construct(self):\n        square = Square()\n\n        # some animations display mobjects, ...\n        self.play(FadeIn(square))\n\n        # ... some move or rotate mobjects around...\n        self.play(Rotate(square, PI/4))\n\n        # some animations remove mobjects from the screen\n        self.play(FadeOut(square))\n\n        self.wait(1)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a tree graph with seven labeled nodes arranged hierarchically. Node 1 is the root at the top, branching into nodes 2 and 3. Node 2 further branches into nodes 4 and 5, while node 3 branches into nodes 6 and 7. The layout clearly shows the parent-child relationships in a balanced tree structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TreeLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6, 7],\n            [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)],\n            layout=\"tree\",\n            layout_config={\"root_vertex\": 1},\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a tree graph with seven labeled nodes arranged hierarchically. Node 1 is the root at the top, branching into nodes 2 and 3. Node 2 further branches into nodes 4 and 5, while node 3 branches into nodes 6 and 7. The layout clearly shows the parent-child relationships in a balanced tree structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TreeLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6, 7],\n            [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)],\n            layout=\"tree\",\n            layout_config={\"root_vertex\": 1},\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a tree graph with seven labeled nodes arranged hierarchically. Node 1 is the root at the top, branching into nodes 2 and 3. Node 2 further branches into nodes 4 and 5, while node 3 branches into nodes 6 and 7. The layout clearly shows the parent-child relationships in a balanced tree structure."}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass TreeLayout(Scene):\n    def construct(self):\n        graph = Graph(\n            [1, 2, 3, 4, 5, 6, 7],\n            [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)],\n            layout=\"tree\",\n            layout_config={\"root_vertex\": 1},\n            labels=True\n        )\n        self.add(graph)\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Display a dot positioned at the upper left. Then animate the text \u201cFadeIn with shift or target_position and scale\u201d appearing in four parts: the first part fades in normally, the second fades in while shifting upward, the third fades in while moving toward the dot, and the fourth fades in while scaling up. Each part appears with a delay between them.\n"}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FadeInExample(Scene):\n    def construct(self):\n        dot = Dot(UP * 2 + LEFT)\n        self.add(dot)\n        tex = Tex(\n            \"FadeIn with \", \"shift \", r\" or target\\_position\", \" and scale\"\n        ).scale(1)\n        animations = [\n            FadeIn(tex[0]),\n            FadeIn(tex[1], shift=DOWN),\n            FadeIn(tex[2], target_position=dot),\n            FadeIn(tex[3], scale=1.5),\n        ]\n        self.play(AnimationGroup(*animations, lag_ratio=0.5))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Create a Manim animation that display a dot positioned at the upper left. Then animate the text \u201cFadeIn with shift or target_position and scale\u201d appearing in four parts: the first part fades in normally, the second fades in while shifting upward, the third fades in while moving toward the dot, and the fourth fades in while scaling up. Each part appears with a delay between them.\n"}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FadeInExample(Scene):\n    def construct(self):\n        dot = Dot(UP * 2 + LEFT)\n        self.add(dot)\n        tex = Tex(\n            \"FadeIn with \", \"shift \", r\" or target\\_position\", \" and scale\"\n        ).scale(1)\n        animations = [\n            FadeIn(tex[0]),\n            FadeIn(tex[1], shift=DOWN),\n            FadeIn(tex[2], target_position=dot),\n            FadeIn(tex[3], scale=1.5),\n        ]\n        self.play(AnimationGroup(*animations, lag_ratio=0.5))\n```"}]}
{"conversations": [{"from": "system", "value": "You are a Manim code generator. Create clean, working Manim animations using ManimCE syntax. Always wrap code in Python code blocks."}, {"from": "user", "value": "Write Manim code to display a dot positioned at the upper left. Then animate the text \u201cFadeIn with shift or target_position and scale\u201d appearing in four parts: the first part fades in normally, the second fades in while shifting upward, the third fades in while moving toward the dot, and the fourth fades in while scaling up. Each part appears with a delay between them.\n"}, {"from": "assistant", "value": "```python\nfrom manim import *\n\nclass FadeInExample(Scene):\n    def construct(self):\n        dot = Dot(UP * 2 + LEFT)\n        self.add(dot)\n        tex = Tex(\n            \"FadeIn with \", \"shift \", r\" or target\\_position\", \" and scale\"\n        ).scale(1)\n        animations = [\n            FadeIn(tex[0]),\n            FadeIn(tex[1], shift=DOWN),\n            FadeIn(tex[2], target_position=dot),\n            FadeIn(tex[3], scale=1.5),\n        ]\n        self.play(AnimationGroup(*animations, lag_ratio=0.5))\n```"}]}
